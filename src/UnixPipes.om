(* Ulm's Oberon Library
   Copyright (C) 1989-1994 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: UnixPipes.om,v 1.5 2001/04/30 08:10:45 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: UnixPipes.om,v $
   Revision 1.5  2001/04/30 08:10:45  borchert
   Open and Spawn extended with bufmode parameter

   Revision 1.4  2001/02/06 07:30:56  borchert
   Spawn added

   Revision 1.3  1995/01/04  17:03:58  borchert
   support of services added

   Revision 1.2  1994/07/05  13:10:54  borchert
   UnixPipes blocks now the current task instead of the current process
   SIGINT/SIGQUIT/SIGHUP will no longer be ignored during WaitFor

   Revision 1.1  1994/02/23  07:28:01  borchert
   Initial revision

   ----------------------------------------------------------------------------
   AFB 9/89
   ----------------------------------------------------------------------------
*)

MODULE UnixPipes;

   IMPORT Conditions, Events, Priorities, RelatedEvents, Services,
      StreamConditions, Streams, SYS := SYSTEM, SysArgs, SysErrors,
      SysIO, SysProcess, SysSignals, SysTypes, Tasks, Types,
      UnixArgLists, UnixFileConditions, UnixFiles, UnixWaitConditions,
      UntaggedStorage, Write;

   CONST
      read = UnixFiles.read;
      write = UnixFiles.write;
      failure = 127;

   TYPE
      Stream = Streams.Stream;
      Mode = UnixFiles.Mode;
      Pipe = POINTER TO PipeRec;
      PipeRec = 
	 RECORD
	    (Streams.StreamRec)
	    (* read-only components *)
	    pid: SysProcess.ProcessId; (* process id of shell *)
	    status: SysProcess.Status; (* set after close *)
	    interrupted: BOOLEAN; (* EINTR occured? *)
	    retry: BOOLEAN;
	    (* === private components =========================== *)
	    file: SysIO.File;
	    mypid: SysProcess.ProcessId;
	    prev, next: Pipe; (* list of pipes *)
	    ioCond: Conditions.Condition;
	    exceptions: RelatedEvents.Object;
	 END;
   VAR
      pipes: Pipe; (* list of open pipes *)
      if: Streams.Interface;
      caps: Streams.CapabilitySet;
      type: Services.Type; (* UnixPipes.Pipe *)
      error: Events.EventType;

   PROCEDURE ForwardErrors(from, to: RelatedEvents.Object);
      VAR
	 queue: RelatedEvents.Queue;
   BEGIN
      RelatedEvents.GetQueue(from, queue);
      RelatedEvents.AppendQueue(to, queue);
   END ForwardErrors;

   PROCEDURE WouldBlock(errors: RelatedEvents.Object) : BOOLEAN;
      (* check for error messages which indicate that the operation
	 would block (we set all our fds in non-blocking mode) and
	 remove them
      *)
      VAR
	 event: Events.Event;
	 p, prev, queue: RelatedEvents.Queue;
	 wouldblock: BOOLEAN; removed: BOOLEAN;
   BEGIN
      wouldblock := FALSE;
      RelatedEvents.GetQueue(errors, queue);
      p := queue; prev := NIL; removed := FALSE;
      WHILE p # NIL DO
	 IF p.event IS SysErrors.Event THEN
	    event := p.event;
	    WITH event: SysErrors.Event DO
	       IF (event.errno = SysErrors.wouldblock) OR
		     (event.errno = SysErrors.again) OR
		     (event.errno = SysErrors.inprogress) THEN
		  wouldblock := TRUE;
		  IF prev = NIL THEN
		     queue := p.next;
		  ELSE
		     prev.next := p.next;
		  END;
		  removed := TRUE;
	       END;
	    END;
	 END;
	 IF removed THEN
	    removed := FALSE;
	 ELSE
	    prev := p;
	 END;
	 p := p.next;
      END;
      RelatedEvents.AppendQueue(errors, queue);
      RETURN wouldblock
   END WouldBlock;

   PROCEDURE SetNonBlocking(fd: SysIO.File;
			    errors: RelatedEvents.Object);
      VAR
	 interrupted: BOOLEAN;
	 flags: SET;
   BEGIN
      IF SysIO.FcntlGet(fd, SysIO.getfl, flags, errors) &
	    SysIO.FcntlSet(fd, SysIO.setfl, flags + SysIO.ndelay,
			   errors, (* retry = *) TRUE, interrupted) THEN
	 (* fd is now non-blocking, blocking system calls will
	    now return SysErrors.wouldblock OR SysErrors.again;
	    this mode affects Connect and is preferred by UnixFiles
	 *)
      END;
   END SetNonBlocking;

   PROCEDURE ReadBuf(s: Stream;
		     buf: SysIO.Address; cnt: SysIO.Count) : SysIO.Count;
      VAR
	 count: SysTypes.Count;
   BEGIN
      WITH s: Pipe DO
	 LOOP
	    count := SysIO.Read(s.file, buf, cnt,
				s.exceptions, s.retry, s.interrupted);
	    IF (count >= 0) OR ~WouldBlock(s.exceptions) THEN
	       ForwardErrors(s.exceptions, s);
	       RETURN count
	    END;
	    Tasks.WaitFor(s.ioCond);
	 END;
      END;
   END ReadBuf;

   PROCEDURE WriteBuf(s: Stream;
		      buf: SysIO.Address; cnt: SysIO.Count) : SysIO.Count;
      VAR
	 count: SysTypes.Count;
   BEGIN
      WITH s: Pipe DO
	 LOOP
	    count := SysIO.Write(s.file, buf, cnt,
				 s.exceptions, s.retry, s.interrupted);
	    IF (count >= 0) OR ~WouldBlock(s.exceptions) THEN
	       ForwardErrors(s.exceptions, s);
	       RETURN count
	    END;
	    Tasks.WaitFor(s.ioCond);
	 END;
      END;
   END WriteBuf;

   PROCEDURE ReadByte(s: Stream; VAR byte: BYTE) : BOOLEAN;
      VAR
	 count: SysTypes.Count;
   BEGIN
      WITH s: Pipe DO
	 LOOP
	    count := SysIO.Read(s.file, SYS.ADR(byte), SYS.SIZE(BYTE),
			        s.exceptions, s.retry, s.interrupted);
	    IF count = SYS.SIZE(BYTE) THEN
	       RETURN TRUE
	    ELSIF ~WouldBlock(s.exceptions) THEN
	       ForwardErrors(s.exceptions, s);
	       RETURN FALSE
	    END;
	    Tasks.WaitFor(s.ioCond);
	 END;
      END;
   END ReadByte;

   PROCEDURE WriteByte(s: Stream; byte: BYTE) : BOOLEAN;
      VAR
	 count: SysTypes.Count;
   BEGIN
      WITH s: Pipe DO
	 LOOP
	    count := SysIO.Write(s.file, SYS.ADR(byte), SYS.SIZE(BYTE),
			         s.exceptions, s.retry, s.interrupted);
	    IF count = SYS.SIZE(BYTE) THEN
	       RETURN TRUE
	    ELSIF ~WouldBlock(s.exceptions) THEN
	       ForwardErrors(s.exceptions, s);
	       RETURN FALSE
	    END;
	    Tasks.WaitFor(s.ioCond);
	 END;
      END;
   END WriteByte;

   PROCEDURE Close(s: Stream) : BOOLEAN;
      VAR
	 ok: BOOLEAN;
	 stat: SysProcess.Status;
	 waitfailed: BOOLEAN;
	 waitCond: Conditions.Condition;
   BEGIN
      WITH s: Pipe DO
         ok := SysIO.Close(s.file, s, s.retry, s.interrupted);
	 IF s.prev = NIL THEN
	    pipes := s.next;
	 ELSE
	    s.prev.next := s.next;
	 END;
	 IF s.next # NIL THEN
	    s.next.prev := s.prev;
	 END;
	 IF s.mypid = SysProcess.Getpid() THEN
	    UnixWaitConditions.Create(waitCond, s.pid);
	    Tasks.WaitFor(waitCond);
	    UnixWaitConditions.FetchStatus(waitCond, stat);
	    waitfailed := FALSE;
	 ELSE
	    waitfailed := TRUE;
	 END;
	 IF waitfailed THEN
	    ok := FALSE;
	    stat.exitcode := 0;
	    stat.signal := 0;
	    stat.core := FALSE;
	    stat.stopped := FALSE;
	 ELSIF (stat.signal = 0) & (stat.exitcode = failure) THEN
	    ok := FALSE;
	 END;
	 s.status := stat;
      END;
      RETURN ok
   END Close;

   PROCEDURE Spawn(VAR pipe: Streams.Stream;
		   readfd, writefd, childfd: SysIO.File;
		   pathname: ARRAY OF CHAR;
		   argv: SysArgs.Arguments;
		   mode: Mode; bufmode: Streams.BufMode;
		   errors: RelatedEvents.Object) : BOOLEAN;
      (* like Open but with an already opened pipe *)
      VAR
	 myside, yourside: SysIO.File;	(* ordered in dependance of mode *)
	 pid: SysProcess.ProcessId;	(* process id of son *)
	 mycaps: Streams.CapabilitySet;
	 ptr: Pipe;
	 newpipe: Pipe;
	 interrupted: BOOLEAN;
	 condMode: SHORTINT;

      PROCEDURE Close;
      BEGIN
	 IF ~SysIO.Close(readfd, errors, TRUE, interrupted) THEN END;
	 IF ~SysIO.Close(writefd, errors, TRUE, interrupted) THEN END;
      END Close;

   BEGIN (* Spawn *)
      IF (mode # read) & (mode # write) THEN RETURN FALSE END;
      IF mode = read THEN
	 myside := readfd; yourside := writefd;
      ELSE
	 myside := writefd; yourside := readfd;
      END;
      IF ~SysProcess.Fork(pid, errors) THEN Close; RETURN FALSE END;
      IF pid = 0 THEN
	 (* close all other pipes to assure receive of SysSignals.PIPE *)
	 ptr := pipes; pipes := NIL;
	 WHILE ptr # NIL DO
	    IF ~SysIO.Close(ptr.file, NIL, TRUE, interrupted) THEN END;
	    ptr := ptr.next;
	 END;
	 Events.RemoveHandlers(SysSignals.PIPE);
	 (* son: myside and yourside reverse roles *)
	 IF SysIO.Close(myside, NIL, TRUE, interrupted) &
	    SysIO.Dup2(yourside, childfd, NIL) &
	    SysIO.Close(yourside, NIL, TRUE, interrupted) THEN
	    SysProcess.Exec(pathname, argv, NIL);
	    UntaggedStorage.Dispose(SYS.VAL(Types.UntracedAddress, argv));
	 END;
	 SysProcess.Exit(failure);
      ELSE
	 IF ~SysIO.Close(yourside, errors, TRUE, interrupted) THEN END;
	 mycaps := caps;
	 IF mode = read THEN
	    INCL(mycaps, Streams.read); condMode := StreamConditions.read;
	 ELSE
	    INCL(mycaps, Streams.write); condMode := StreamConditions.write;
	 END;
	 NEW(newpipe);
	 Services.Init(newpipe, type);
	 Streams.Init(newpipe, if, mycaps, bufmode);
	 newpipe.pid := pid;
	 newpipe.file := myside;
	 newpipe.mypid := SysProcess.Getpid();
	 newpipe.next := pipes;
	 newpipe.prev := NIL;
	 newpipe.retry := TRUE;
	 newpipe.interrupted := FALSE;
	 NEW(newpipe.exceptions);
	 RelatedEvents.QueueEvents(newpipe.exceptions);
	 UnixFileConditions.Create(newpipe.ioCond, NIL, newpipe.file, condMode);
	 SetNonBlocking(newpipe.file, errors);
	 RelatedEvents.QueueEvents(newpipe);
	 pipes := newpipe;
	 pipe := newpipe;
      END;
      RETURN TRUE
   END Spawn;

   PROCEDURE Open(VAR pipe: Streams.Stream;
		  command: ARRAY OF CHAR; mode: Mode; bufmode: Streams.BufMode;
		  errors: RelatedEvents.Object) : BOOLEAN;
      (* open pipe (for reading xor writing) to/from `command';
	 `command' is interpreted by the shell /bin/sh;
	 `command' must be 0X-terminated
      *)
      CONST
	 stdin = 0;
	 stdout = 1;
	 shell = "/bin/sh";
      VAR
	 readfd, writefd: SysIO.File;	(* result of Pipe *)
	 childfd: SysIO.File;           (* 0 or 1; open fd for son process *)
	 args: UnixArgLists.Stream;	(* collect arguments and get... *)
	 argv: SysArgs.Arguments;	(* ... this argument list *)
   BEGIN
      IF ~SysIO.Pipe(readfd, writefd, errors) THEN RETURN FALSE END;
      IF mode = read THEN
	 childfd := stdout;
      ELSE
	 childfd := stdin;
      END;
      UnixArgLists.Open(args); Write.StringS(args, shell);
      UnixArgLists.Next(args); Write.StringS(args, "-c");
      UnixArgLists.Next(args); Write.StringS(args, command);
      UnixArgLists.Close(args, argv);
      RETURN Spawn(pipe, readfd, writefd, childfd, shell, argv,
	       mode, bufmode, errors)
   END Open;

BEGIN
   pipes := NIL;
   NEW(if);
   if.addrread := ReadBuf; if.addrwrite := WriteBuf;
   if.read := ReadByte; if.write := WriteByte;
   if.close := Close;
   caps := {Streams.addrio, Streams.close};
   Services.CreateType(type, "UnixPipes.Pipe", "Streams.Stream");
   Events.Handler(SysSignals.PIPE, Events.NilHandler);
   Events.Define(error);
   Events.SetPriority(error, Priorities.liberrors);
END UnixPipes.
