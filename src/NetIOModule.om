(* Ulm's Oberon Library
   Copyright (C) 1989-2001 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id$
   ----------------------------------------------------------------------------
   $Log$
   ----------------------------------------------------------------------------
*)

MODULE NetIOModules;

   IMPORT ConstStrings, Iterators, NetIO, Streams;

   TYPE
      Module = POINTER TO ModuleRec;
      ModuleRec =
	 RECORD
	    if: NetIO.Interface;
	    name: ConstStrings.String;
	    next: Module;
	 END;
   VAR
      head, tail: Module;

   (* === private procedures ============================================== *)

   PROCEDURE Init;
   BEGIN
      head := NIL; tail := NIL;
   END Init;

   PROCEDURE Lookup(name: ConstStrings.String; VAR module: Module) : BOOLEAN;
   BEGIN
      module := head;
      WHILE module # NIL DO
	 IF name = module.name THEN RETURN TRUE END;
	 module := module.next;
      END;
      RETURN FALSE
   END Lookup;

   PROCEDURE IterateModules(it: Iterators.Iterator;
			    ref: Iterators.Reference;
			    mode: Iterators.Mode);
      VAR
	 module: Module;
   BEGIN
      module := head;
      WHILE module # NIL DO
	 Iterators.Yield(it, module.name);
	 module := module.next;
      END;
   END IterateModules;

   (* === exported procedures ============================================= *)

   PROCEDURE Available(modname: ARRAY OF CHAR) : BOOLEAN;
      VAR
	 name: ConstStrings.String;
	 module: Module;
   BEGIN
      ConstStrings.Create(name, modname);
      RETURN Lookup(name, module)
   END Available;

   PROCEDURE Register(if: NetIO.Interface; modname: ARRAY OF CHAR);
      VAR
	 name: ConstStrings.String;
	 module: Module;
   BEGIN
      ASSERT(modname # "");
      ConstStrings.Create(name, modname);
      ASSERT(~Lookup(name, module));
      NEW(module); module.name := name; module.if := if; module.next := NIL;
      IF head = NIL THEN
	 head := module;
      ELSE
	 tail.next := module;
      END;
      tail := module;
   END Register;

   PROCEDURE Install(s: Streams.Stream; modname: ARRAY OF CHAR);
      VAR
	 name: ConstStrings.String;
	 module: Module;
	 ok: BOOLEAN;
   BEGIN
      ConstStrings.Create(name, modname);
      ok := Lookup(name, module); ASSERT(ok);
      NetIO.AttachInterface(s, module.if);
   END Install;

   PROCEDURE GetModules(VAR it: Iterators.Iterator);
      (* returns an iterator of ConstStrings.String *)
   BEGIN
      Iterators.Create(it, IterateModules, NIL, 0);
   END GetModules;

BEGIN
   Init;
END NetIOModules.
