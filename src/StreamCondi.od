(* Ulm's Oberon Library
   Copyright (C) 1989-1994 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: StreamCondi.od,v 1.1 1994/02/22 20:10:20 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: StreamCondi.od,v $
   Revision 1.1  1994/02/22  20:10:20  borchert
   Initial revision

   ----------------------------------------------------------------------------
   AFB 1/92
   ----------------------------------------------------------------------------
*)

DEFINITION StreamConditions;

   IMPORT Conditions, Events, RelatedEvents, Streams;

   CONST
      msgFailed = 0; (* message was not processed by the implementation *)
      invalidOp = 1; (* operation was not read or write *)
      errorcodes = 2;
   TYPE
      ErrorEvent = POINTER TO ErrorEventRec;
      ErrorEventRec =
	 RECORD
	    (Events.EventRec)
	    errorcode: SHORTINT;
	 END;
   VAR
      errormsg: ARRAY errorcodes OF Events.Message;
      error: Events.EventType;

   CONST
      read = 0; write = 1; (* operations *)
   TYPE
      Operation = SHORTINT; (* read or write *)
   TYPE
      CreateConditionMessage =
	 RECORD
	    (Streams.Message)
	    (* in-parameters *)
	    operation: Operation; (* read or write *)
	    (* out-parameters *)
	    condition: Conditions.Condition; (* return value *)
	    stream: Streams.Stream; (* message processed for this stream *)
	    msgProcessed: BOOLEAN; (* initially FALSE; has to be set to TRUE *)
	 END;
      TestConditionMessage =
	 RECORD
	    (Streams.Message)
	    (* in-parameters *)
	    operation: Operation; (* read or write *)
	    errors: RelatedEvents.Object; (* relate errors to this object *)
	    (* out-parameters *)
	    wouldblock: BOOLEAN;
	    msgProcessed: BOOLEAN;
	 END;

   PROCEDURE Create(VAR condition: Conditions.Condition;
		    s: Streams.Stream; operation: Operation);
      (* condition = NIL in error case, eg if the associated
	 stream implementation does not interpret such messages
      *)

END StreamConditions.
