MODULE TermAttributes;

   IMPORT Disciplines, Events, Objects, Priorities, RelatedEvents, Streams;

   CONST 
      (* attributes *)
      standout = 0;
      underline = 1;
      reverse = 2;
      blink = 3;
      dim = 4;
      bold = 5;
      attributes = 6;

      (* errorcodes *)
      unknownAttribute = 0;
      notSupported = 1;
      errorcodes = 2;

   TYPE 
      AttributeSet = SET;  (* of attributes *)

      SetProc = PROCEDURE (s: Streams.Stream; atts: AttributeSet);

      Interface = POINTER TO InterfaceRec;
      InterfaceRec = 
         RECORD
            (Objects.ObjectRec)
            set: SetProc;
         END;
 
      Discipline = POINTER TO DisciplineRec;
      DisciplineRec =
         RECORD
            (Disciplines.DisciplineRec)
            available: AttributeSet;
            current: AttributeSet;
            if: Interface;
         END;

      ErrorEvent = POINTER TO ErrorEventRec;
      ErrorEventRec =
         RECORD
            (Events.EventRec)
            errorcode: SHORTINT;
         END;

   VAR 
      id: Disciplines.Identifier;
      error: Events.EventType;
      errormsg: ARRAY errorcodes OF Events.Message;

   PROCEDURE InitErrorHandling;
   BEGIN
      Events.Define(error);
      Events.SetPriority(error, Priorities.liberrors);
      errormsg[unknownAttribute] :=
        "attribute unknown to terminal";
      errormsg[notSupported] :=
	 "attributes not supported by implementation";
   END InitErrorHandling;

   PROCEDURE Error(object: RelatedEvents.Object; errorcode: SHORTINT);
      VAR
         event: ErrorEvent;
   BEGIN
      NEW(event);
      event.type := error;
      event.message := errormsg[errorcode];
      event.errorcode := errorcode;
      RelatedEvents.Raise(object, event);
   END Error;

   PROCEDURE Init(s: Streams.Stream; available: AttributeSet; if: Interface);
      VAR
         disc: Discipline;
   BEGIN
      NEW(disc);
      disc.id := id;
      disc.available := available;
      disc.current := {};
      disc.if := if;
      Disciplines.Add(s, disc);
   END Init;

   PROCEDURE Set(s: Streams.Stream; attributes: AttributeSet);
      VAR disc: Discipline;
	  at: SHORTINT;
   BEGIN
      IF Disciplines.Seek(s, id, disc) THEN
         IF disc.available * attributes = attributes THEN
            disc.if.set(s, attributes);
            disc.current := attributes;
            Disciplines.Add(s, disc);
         ELSE
            Error(s, unknownAttribute);
         END;
      ELSE
         Error(s, notSupported);
      END;
   END Set;

   PROCEDURE Current(s: Streams.Stream): AttributeSet;
      VAR
         disc: Discipline;
   BEGIN
      IF Disciplines.Seek(s, id, disc) THEN
         RETURN disc.current;
      ELSE
         RETURN {};
      END;
   END Current;

   PROCEDURE Available(s: Streams.Stream): AttributeSet;
      VAR
         disc: Discipline;
   BEGIN
      IF Disciplines.Seek(s, id, disc) THEN
         RETURN disc.available;
      ELSE
         RETURN {};
      END;
   END Available;

BEGIN
   id := Disciplines.Unique();
   InitErrorHandling;
END TermAttributes.
