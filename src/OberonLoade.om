(* Ulm's Oberon Compiler
   Copyright (C) 1989-1998 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   This file is part of Ulm's Oberon Compiler.

   Ulm's Oberon Compiler is free software; you can redistribute it
   and/or modify it under the terms of the GNU General Public License
   as published by the Free Software Foundation; either version 1, or
   (at your option) any later version.

   Ulm's Oberon Compiler is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with Ulm's Compiler Toolkit; see the file COPYING.  If not,
   write to the Free Software Foundation, 675 Mass Ave, Cambridge, MA
   02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id$
   ----------------------------------------------------------------------------
   $Log$
   ----------------------------------------------------------------------------
*)

MODULE OberonLoader;

   IMPORT Conclusions, SysMonitor, Architectures, Args := UnixArguments, CDB,
      CompilerDatabases, CompilerErrors, CompilerKeys, CompilerLogs,
      CompilerObjects, Compilers, ConstStrings, Errors,
      Lex := OberonLex, Listers, ModularizedStructures, Names, OberonBuiltIns,
      OberonCompiler, OberonParser, OberonSPARCv8, OberonI386, OberonSymbols,
      ObjectLoader, PersistentObjects, PersistentTexts, Print, Process, Read,
      RelatedEvents, RemoteCDBNames, RemoteIterators, RemoteNames, Services,
      Shards, Sources := CompilerSources, Storage, Streams, TerminalLister,
      Terminals, UnixFiles, UnixNames, Write, UnixTerminals,
      Iterators, SysStorage, PrivateShards;

   CONST
      language = "oberon";

   VAR
      outkeys : CompilerKeys.Set;
      ch : CHAR;
      key : CompilerKeys.Key;
      i : INTEGER;
      cs : Streams.Stream;
      ok : BOOLEAN;
      intensity: INTEGER;
      errors: RelatedEvents.Object;
      module: OberonSymbols.Ident;
      outputfilename, pattern : ARRAY 512 OF CHAR;
      outputpattern : BOOLEAN;
      runtime : BOOLEAN;
      output: Streams.Stream;

      db: CompilerDatabases.Database;
      authfile, basedir: ARRAY 512 OF CHAR;
      modname, mod : ConstStrings.String;
      runmod : ARRAY 20 OF ConstStrings.String;
      type: CompilerObjects.ObjectType;
      auth: Shards.Lid;
      log: CompilerLogs.Log;

      arch: Architectures.Architecture;
      context: Compilers.Context;
      header: CompilerObjects.Header;
      text: PersistentTexts.Text;

      lidType: Services.Type;
      retcode: Process.ExitCode;

   PROCEDURE CreateLid(VAR lid: Shards.Lid; filename: ARRAY OF CHAR);
      VAR
	 s: Streams.Stream;
   BEGIN
      s := NIL;
      IF ~UnixFiles.Open(s, filename, UnixFiles.read, Streams.onebuf,
			 errors) THEN
	 Conclusions.Conclude(errors, Errors.fatal, "");
      END;
      RelatedEvents.Forward(s, errors);
      IF ~PersistentObjects.GuardedRead(s, lidType, lid) THEN
	 Conclusions.Conclude(errors, Errors.fatal, filename);
      END;
   END CreateLid;

   PROCEDURE ProcessArguments;
      VAR
	 flag: CHAR;
	 filename: ARRAY 512 OF CHAR;
	 archstring: ConstStrings.String;
	 as: Streams.Stream;
	 level: INTEGER;
   BEGIN (* ProcessArguments *)
      archstring := NIL;
      basedir := "/pub/cdb";
      outputfilename[0] := 0X;
      type := CompilerObjects.public;
      arch := NIL;
      context.cachemode := CompilerObjects.cachePublic +
                   {CompilerObjects.private * CompilerObjects.archDependent};
      Args.Init("[-a auth] [-A arch] [-b basedir] [-l loglevel] [-o output] [-c|-C] [-D|-M] modname");
      WHILE Args.GetFlag(flag) DO
	 CASE flag OF
	 | "a": Args.FetchString(filename); CreateLid(auth, filename);
	 | "A": Args.FetchString(filename);
	        ConstStrings.Create(archstring, filename);
		Architectures.GetArch(archstring, arch);
		IF arch = NIL THEN
		   Write.StringS(Streams.stderr, "invalid architecture spec: ");
		   Write.LineS(Streams.stderr, filename);
		   Process.Exit(Process.indicateFailure);
		END;
		IF ~Compilers.Supported(OberonCompiler.compiler, arch) THEN
		   Write.StringS(Streams.stderr, "unsupported architecture: ");
		   Write.LineS(Streams.stderr, filename);
		   Process.Exit(Process.indicateFailure);
		END;
	 | "b": Args.FetchString(basedir);
	 | "c": context.cachemode := CompilerObjects.cacheAll;
	 | "C": context.cachemode := {};
	 | "l": IF ~Args.OpenArg(as) THEN Args.Usage END;
	        Read.IntS(as, level);
	        CompilerLogs.Create(log, Streams.stdout);
		CompilerLogs.SetLogLevel(log, level);
	 | "o": Args.FetchString(outputfilename);
	 | "O": Args.FetchString(pattern);
	        outputpattern := TRUE;
	 | "R": runtime := TRUE;
	 | "D": type := CompilerObjects.public;
	 | "M": type := CompilerObjects.private;
	 ELSE
	    Args.Usage;
	 END;
      END;
      Args.FetchString(filename); Args.AllArgs;
      ConstStrings.Create(modname, filename);
   END ProcessArguments;

   PROCEDURE Output (header : CompilerObjects.Header;
                      text : PersistentTexts.Text) : BOOLEAN;

      PROCEDURE DoOutput (header : CompilerObjects.Header;
			   text : PersistentTexts.Text) : BOOLEAN;
	 VAR
	    it : Iterators.Iterator;
	    dummy, key : CompilerKeys.Key;
	    ok : BOOLEAN;
	    i,j : INTEGER;
      BEGIN
         (* Write.String ("DoOutput: "); *)
	 (* ConstStrings.Write (Streams.stdout, header.modname); *)
	 (* Write.Ln; *)
	 (* ASSERT (Streams.Flush (Streams.stdout)); *)
         IF CompilerKeys.Lookup (outkeys, header.modname, dummy) THEN
	    RETURN TRUE;
	 END;
         (* Write.String ("Doing"); Write.Ln; *)
	 (* ASSERT (Streams.Flush (Streams.stdout)); *)
	 CompilerKeys.Incl (outkeys, header.key);
	 i := 0; j := 0;
	 LOOP
	    IF i >= LEN (outputfilename) THEN
	       EXIT;
	    END;
	    IF j >= LEN (pattern) THEN
	       EXIT
	    END;
	    IF pattern[j] = 0X THEN
	       EXIT;
	    END;
	    IF pattern[j] = "%" THEN
	       ConstStrings.Open (cs, header.modname);
	       WHILE (i < LEN(outputfilename)) & Streams.Read (cs, ch) & (ch # 0X) DO
		  outputfilename[i] := ch;
		  INC(i);
	       END;
	       Streams.Release (cs);
	       cs := NIL;
	       INC (j);
	    ELSE
	       outputfilename[i] := pattern[j];
	       INC(i); INC(j);
	    END;
	 END;
	 IF i >= LEN (outputfilename) THEN
	    i := LEN(outputfilename) - 1;
	 END;
	 outputfilename[i] := 0X;
	 IF ~UnixFiles.Open (output, outputfilename,
			     UnixFiles.write + UnixFiles.create, 
			     Streams.onebuf, errors) THEN
	    Conclusions.Conclude(errors, Errors.fatal, "");
	 END;
	 RelatedEvents.Forward(output, errors);
	 ASSERT (text # NIL);
	 IF ~PersistentObjects.Write(output, header) OR
	       ~PersistentObjects.Write(output, text) THEN
	    Conclusions.Conclude(errors, Errors.fatal, outputfilename);
	 END;
	 Streams.Release(output);
         CompilerKeys.GetKeys (header.dependencies, it);
	 ok := TRUE;
	 WHILE ok & Iterators.Get (it, key) DO
	    mod := key.modname;
	    IF ~CompilerKeys.Lookup (outkeys, mod, dummy) THEN
	       ok := ObjectLoader.LoadText(OberonCompiler.compiler, context,
			     mod, type, arch, header, text, errors);
	       IF ok THEN
	          ok := DoOutput (header, text);
	       END;
	    END;
	 END;
	 RETURN ok;
      END DoOutput;

   BEGIN
      IF outkeys = NIL THEN
         CompilerKeys.CreateSet (outkeys);
      END;
      RETURN DoOutput (header, text);
   END Output;

BEGIN
   SysMonitor.Start();
   intensity := Storage.Intensity(8);
   ASSERT (Streams.Close (Streams.stdin));
   NEW(errors); RelatedEvents.QueueEvents(errors);
   Services.SeekType("Shards.Lid", lidType);
   outputpattern := FALSE;
   NEW(context);

   ProcessArguments;

   IF ~CDB.Open(context.db, basedir, language, auth, errors) THEN
      Conclusions.Conclude(errors, Errors.fatal, "");
   END;
   RelatedEvents.Forward(context.db, errors);

   CompilerKeys.CreateSet(context.keys);
   ModularizedStructures.CreateTable(context.tab);
   CompilerObjects.CreateModuleTable(context.mtab);
   context.log := log;
   ok := TRUE;
   IF runtime THEN
      ConstStrings.Create (runmod[0], "SysModules");
      ConstStrings.Create (runmod[1], "Storage");
      ConstStrings.Create (runmod[2], "Process");
      ConstStrings.Create (runmod[3], "RTErrors");
      ConstStrings.Create (runmod[4], "Coroutines");
      ConstStrings.Create (runmod[5], "SysInterrupts");
      ConstStrings.Create (runmod[6], "SysSegments");
      ConstStrings.Create (runmod[7], "SysStorage");
      ConstStrings.Create (runmod[8], "SysArgs");
      ConstStrings.Create (runmod[9], "UnixProcess");
      ConstStrings.Create (runmod[10], "UnixClock");
      ConstStrings.Create (runmod[11], "UnixFiles");
      ConstStrings.Create (runmod[12], "UnixTimezones");
      ConstStrings.Create (runmod[13], "SysMain");
      ConstStrings.Create (runmod[14], "UnixArguments");
      runmod[15] := NIL;
      i := 0;
      WHILE ok & (runmod[i] # NIL) DO
	 ok := ObjectLoader.LoadText(OberonCompiler.compiler, context,
	               runmod[i], type, arch, header, text, errors);
	 IF ok & outputpattern THEN
	       ok := Output (header, text);
	 END;
	 INC (i);
      END;
   END;
   IF ok & ObjectLoader.LoadText(OberonCompiler.compiler, context, modname,
                            type, arch, header, text, errors) THEN
      IF outputpattern THEN
         ok := Output (header, text);
      ELSIF outputfilename # "" THEN
	 IF ~UnixFiles.Open(output, outputfilename,
	                    UnixFiles.write + UnixFiles.create,
			    Streams.onebuf, errors) THEN
	    Conclusions.Conclude(errors, Errors.fatal, "");
	 END;
	 RelatedEvents.Forward(output, errors);
	 ASSERT (text # NIL);
	 IF ~PersistentObjects.Write(output, header) OR
	       ~PersistentObjects.Write(output, text) THEN
	    Conclusions.Conclude(errors, Errors.fatal, outputfilename);
	 END;
	 Streams.Release(output);
      END;
      retcode := Process.indicateSuccess;
   ELSE
      ok := FALSE;
   END;
   IF ~ok THEN
      IF (Terminals.console # NIL) &
	    TerminalLister.Init(Terminals.console) THEN
	 Listers.GenListing(Terminals.console, errors);
      ELSE
	 Listers.GenListing(Streams.stderr, errors);
      END;
      retcode := Process.indicateFailure;
   END;
   IF RelatedEvents.EventsPending(errors) THEN
      Conclusions.Conclude(errors, Errors.error, "");
   END;
   IF Terminals.console # NIL THEN
      Streams.Release(Terminals.console);
   END;
   SysMonitor.Stop (Streams.stderr);
   ASSERT(Streams.Flush (Streams.stderr));
   Process.Exit(retcode);
END OberonLoader.
