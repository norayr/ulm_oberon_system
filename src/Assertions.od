(* Ulm's Oberon Library
   Copyright (C) 1989-1994 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: Assertions.od,v 1.1 1994/02/22 20:05:56 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: Assertions.od,v $
   Revision 1.1  1994/02/22  20:05:56  borchert
   Initial revision

   ----------------------------------------------------------------------------
   AFB 11/91
   ----------------------------------------------------------------------------
*)

DEFINITION Assertions;

   IMPORT Disciplines, Events, RelatedEvents;

   TYPE
      Identifier = ARRAY 32 OF CHAR; (* should be sufficient *)
      Event = POINTER TO EventRec;
      EventRec =
	 RECORD
	    (Events.EventRec)
	    object: RelatedEvents.Object;
	    module: Identifier;
	    proc: Identifier;
	 END;
      EventType = POINTER TO EventTypeRec;
      EventTypeRec = RECORD (Events.EventTypeRec) END;

   VAR
      failedAssertion: Events.EventType;

   PROCEDURE Define(VAR type: Events.EventType; module: ARRAY OF CHAR);
      (* create a new event type which will be of type Assertions.EventType *)

   PROCEDURE Raise(object: RelatedEvents.Object;
		   type: Events.EventType;
		   proc: ARRAY OF CHAR;
		   text: ARRAY OF CHAR);
      (* raise Assertions.failedAssertion;
	 create a event of the given type and pass it
	 to RelatedEvents.Raise (if object # NIL)
	 or Events.Raise (if object = NIL);
      *)

END Assertions.
