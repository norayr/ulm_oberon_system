(* Ulm's Oberon Library
   Copyright (C) 1989-1998 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: ObjectLoade.od,v 1.2 2004/08/25 15:26:03 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: ObjectLoade.od,v $
   Revision 1.2  2004/08/25 15:26:03  borchert
   log levels and error codes are now public

   Revision 1.1  1998/04/16 14:06:08  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

DEFINITION ObjectLoader;

   IMPORT Architectures, CompilerDatabases, CompilerKeys, CompilerObjects,
      Compilers, ConstStrings, Events, ModularizedStructures,
      PersistentTexts, RelatedEvents;

   CONST
      (* log levels *)
      logLoading = 0;
      logLoadingResult = 1;
      logCompiling = 2; (* includes 3 and 4 *)
      logStoring = 5;
      logChecks = 6;
      logErrors = 7;

   CONST
      noSrcFound = 0;
      compilationFailed = 1;
      loadFailed = 2;
      refCycle = 3;
      errors = 4;
   TYPE
      ErrorCode = SHORTINT; (* noSrcFound ... *)
      ErrorEvent = POINTER TO ErrorEventRec;
      ErrorEventRec =
	 RECORD
	    (Events.EventRec)
	    code: ErrorCode;
	    modname: ConstStrings.String;
	 END;
   VAR
      error: Events.EventType;
      errormsg: ARRAY errors OF Events.Message;

   PROCEDURE UpToDate(context: Compilers.Context;
                      header: CompilerObjects.Header) : BOOLEAN;
      (* return TRUE if the object associated with header is
	 up-to-date and does need to be recompiled/reloaded
      *)

   PROCEDURE LoadObject(compiler: Compilers.Compiler;
                        context: Compilers.Context;
		        modname: ConstStrings.String;
		        type: CompilerObjects.ObjectType;
		        arch: Architectures.Architecture;
		        VAR header: CompilerObjects.Header;
		        VAR object: CompilerObjects.Object;
		        errors: RelatedEvents.Object) : BOOLEAN;

   PROCEDURE LoadText(compiler: Compilers.Compiler;
                      context: Compilers.Context;
		      modname: ConstStrings.String;
		      type: CompilerObjects.ObjectType;
		      arch: Architectures.Architecture;
		      VAR header: CompilerObjects.Header;
		      VAR text: PersistentTexts.Text;
		      errors: RelatedEvents.Object) : BOOLEAN;

   PROCEDURE LoadHeader(compiler: Compilers.Compiler;
                        context: Compilers.Context;
		        modname: ConstStrings.String;
		        type: CompilerObjects.ObjectType;
		        arch: Architectures.Architecture;
		        VAR header: CompilerObjects.Header;
		        errors: RelatedEvents.Object) : BOOLEAN;

END ObjectLoader.
