(* Ulm's Oberon Library
   Copyright (C) 1989-1994 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: Messages.om,v 1.5 1995/12/11 09:40:50 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: Messages.om,v $
   Revision 1.5  1995/12/11  09:40:50  borchert
   ForeignEvents has been renamed to PersistentEvents

   Revision 1.4  1995/12/11  09:33:43  borchert
   - target objects for messages need no longer to be extensions
     of PersistentDisciplines.Object but just Disciplines.Object
   - messages will no longer be delivered to terminated objects
   - Messages registers now itself at Forwarders and forwards
     locally unprocessed messages to its dependants (see Resources)

   Revision 1.3  1994/07/18  14:17:57  borchert
   Messages no longer generates error events itself

   Revision 1.2  1994/07/05  08:39:02  borchert
   bug fix: the wrong base type was given to PersistentObjects.RegisterType

   Revision 1.1  1994/02/22  20:08:32  borchert
   Initial revision

   ----------------------------------------------------------------------------
   AFB 6/93
   ----------------------------------------------------------------------------
*)

MODULE Messages;

   (* management of messages and associated handlers which
      are attached by Disciplines
   *)

   IMPORT Events, Disciplines, Forwarders, NetIO, PersistentDisciplines,
      PersistentEvents, PersistentObjects, Priorities, RelatedEvents,
      Resources, Services, Streams;

   TYPE
      Object = Disciplines.Object;
      Message = POINTER TO MessageRec;
      MessageRec =
	 RECORD
	    (PersistentDisciplines.ObjectRec)
	    processed: BOOLEAN;
	    done: BOOLEAN;
	    errors: RelatedEvents.Object;
	       (* only error texts survive persistency *)
	 END;

      Handler = PROCEDURE (object: Object; VAR message: Message);

   (* private data structures *)

   TYPE
      HandlerList = POINTER TO HandlerListRec;
      HandlerListRec =
	 RECORD
	    handler: Handler;
	    next: HandlerList;
	 END;
      ObjectDiscipline = POINTER TO ObjectDisciplineRec;
      ObjectDisciplineRec =
	 RECORD
	    (Disciplines.DisciplineRec)
	    handlers: HandlerList;
	    dependsOn: Object; (* forward messages to this object *)
	 END;
   VAR
      discID: Disciplines.Identifier;
      msgType: Services.Type;

   PROCEDURE TerminationHandler(event: Events.Event);
      (* terminated objects do no longer need message handlers;
	 it's good to enforce this cleanup to avoid message
	 handlers to be confused from calls after termination
      *)
   BEGIN
      WITH event: Resources.Event DO
	 IF event.change = Resources.terminated THEN
	    Disciplines.Remove(event.resource, discID);
	 END;
      END;
   END TerminationHandler;

   PROCEDURE GetDiscipline(object: Object; VAR disc: ObjectDiscipline);
      VAR
	 eventType: Events.EventType;
   BEGIN
      IF ~Disciplines.Seek(object, discID, disc) THEN
	 NEW(disc); disc.id := discID;
	 disc.handlers := NIL; disc.dependsOn := NIL;
	 Resources.TakeInterest(object, eventType);
	 Events.Handler(eventType, TerminationHandler);
      END;
   END GetDiscipline;

   PROCEDURE InstallHandler(object: Object; handler: Handler);
      VAR
	 disc: ObjectDiscipline;
	 newhandler: HandlerList;
	 eventType: Events.EventType;
   BEGIN
      GetDiscipline(object, disc);
      NEW(newhandler);
      newhandler.handler := handler;
      newhandler.next := disc.handlers;
      disc.handlers := newhandler;
      Disciplines.Add(object, disc);
   END InstallHandler;

   PROCEDURE Send(object: Object; VAR message: Message);
      (* send message to given object, i.e. all installed handlers
	 will be called with the given message
      *)
      VAR
	 disc: ObjectDiscipline;
	 handlers: HandlerList;

   BEGIN
      IF Disciplines.Seek(object, discID, disc) THEN
	 handlers := disc.handlers;
	 WHILE (handlers # NIL) & ~message.processed DO
	    handlers.handler(object, message);
	    handlers := handlers.next;
	 END;
	 IF ~message.processed & (disc.dependsOn # NIL) THEN
	    Send(disc.dependsOn, message);
	 END;
      (* ELSE ignore message *)
      END;
   END Send;

   PROCEDURE Forward(from, to: Forwarders.Object);
      VAR
	 disc: ObjectDiscipline;
   BEGIN
      GetDiscipline(from, disc);
      disc.dependsOn := to;
   END Forward;

   PROCEDURE Init(message: Message); (* doesn't call NEW *)
   BEGIN
      message.processed := FALSE;
      message.done := FALSE;
      NEW(message.errors);
      RelatedEvents.QueueEvents(message.errors);
   END Init;

   PROCEDURE MsgRead(s: Streams.Stream;
		     message: PersistentObjects.Object) : BOOLEAN;
      VAR
	 processed, done: BOOLEAN;
	 errors: RelatedEvents.Object;
   BEGIN
      WITH message: Message DO
	 IF NetIO.ReadBoolean(s, processed) & NetIO.ReadBoolean(s, done) &
	       PersistentEvents.ReadErrors(s, errors) THEN
	    message.processed := processed;
	    message.done := done;
	    IF errors = NIL THEN
	       NEW(message.errors);
	       RelatedEvents.QueueEvents(message.errors);
	    ELSE
	       message.errors := errors;
	    END;
	    RETURN TRUE
	 ELSE
	    RETURN FALSE
	 END;
      END;
   END MsgRead;

   PROCEDURE MsgWrite(s: Streams.Stream;
		      message: PersistentObjects.Object) : BOOLEAN;
   BEGIN
      WITH message: Message DO
	 RETURN NetIO.WriteBoolean(s, message.processed) &
		NetIO.WriteBoolean(s, message.done) &
		PersistentEvents.WriteErrors(s, message.errors)
      END;
   END MsgWrite;

   PROCEDURE MsgCreate(VAR object: PersistentObjects.Object);
      VAR
	 message: Message;
   BEGIN
      NEW(message);
      Init(message);
      PersistentObjects.Init(message, msgType);
      object := message;
   END MsgCreate;

   PROCEDURE InitModule;
      VAR
	 msgIF: PersistentObjects.Interface;
	    (* interface for Message *)
   BEGIN
      discID := Disciplines.Unique();

      NEW(msgIF);
      msgIF.read := MsgRead;
      msgIF.write := MsgWrite;
      msgIF.create := MsgCreate;
      msgIF.createAndRead := NIL;
      PersistentObjects.RegisterType(msgType,
	 "Messages.Message", "PersistentDisciplines.Object", msgIF);

      Forwarders.Register("", Forward);
   END InitModule;

BEGIN
   InitModule;
END Messages.
