(* Ulm's Oberon Library
   Copyright (C) 1989-1994 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: ConstString.od,v 1.3 1997/04/02 07:34:27 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: ConstString.od,v $
   Revision 1.3  1997/04/02  07:34:27  borchert
   ConstStrings are now an extension of Disciplines.Object

   Revision 1.2  1996/01/04  17:02:53  borchert
   - const strings are now an extension of Disciplines.Object
   - domains added

   Revision 1.1  1994/02/22  20:06:33  borchert
   Initial revision

   ----------------------------------------------------------------------------
   AFB 10/90
   ----------------------------------------------------------------------------
*)

DEFINITION ConstStrings;

   (* WORM-device for strings *)

   IMPORT Disciplines, Objects, Streams;

   TYPE
      String = POINTER TO StringRec;
      StringRec =
	 RECORD
	    (Disciplines.ObjectRec)
	    (* read-only *)
	    len: Streams.Count;		(* length of string in bytes *)
	    hashval: LONGINT;		(* hash value *)
	 END;

   TYPE
      Domain = POINTER TO DomainRec;
      DomainRec = RECORD (Disciplines.ObjectRec) END;
   VAR
      std: Domain; (* default domain *)

   (* if two strings belong to the same domain they are identical
      iff their references (String) are equal
   *)

   PROCEDURE CreateDomain(VAR domain: Domain);

   PROCEDURE Init(VAR s: Streams.Stream);
      (* open s for writing *)

   PROCEDURE Close(s: Streams.Stream; VAR string: String);
      (* must be called instead of Streams.Close to get the resulting string;
	 the string is being put into the default domain
      *)

   PROCEDURE CloseD(s: Streams.Stream; domain: Domain; VAR string: String);

   PROCEDURE Create(VAR string: String; s: ARRAY OF CHAR);
      (* create new string (of default domain) with contents copied from `s' *)

   PROCEDURE CreateD(VAR string: String; domain: Domain; s: ARRAY OF CHAR);

   PROCEDURE Open(VAR s: Streams.Stream; string: String);
      (* open s for reading *)

   PROCEDURE Compare(string1, string2: String) : INTEGER;
      (* returns < 0: if string1 < string2
		 = 0: if string1 = string2 (see note above)
		 > 0: if string1 > string2
      *)

   PROCEDURE Write(s: Streams.Stream; string: String);
      (* copy contents of `string' to `s' *)

   PROCEDURE Extract(VAR s: ARRAY OF CHAR; string: String);
      (* copy contents of `string' to `s' *)

END ConstStrings.
