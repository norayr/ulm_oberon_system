(* Ulm's Oberon Library
   Copyright (C) 1989-1998 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: CompilerSou.od,v 1.1 1998/03/18 10:03:32 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: CompilerSou.od,v $
   Revision 1.1  1998/03/18 10:03:32  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

DEFINITION CompilerSources;

   IMPORT Args, ConstStrings, Objects, PersistentDisciplines, Streams, Times;

   CONST
      definition = 0;  (* if definition only *)
      module = 1;      (* implementation only, may update if definition *)
      defmod = 2;      (* module that generates both, if and code *)
   TYPE
      SourceKind = SHORTINT; (* definition .. defmod *)

   TYPE
      Header = POINTER TO HeaderRec;
      HeaderRec =
	 RECORD
	    (PersistentDisciplines.ObjectRec)
	    modname: ConstStrings.String;
	    kind: SourceKind;
	    date: Times.Time; (* date of last modification *)
	    srcid: ConstStrings.String; (* sth unique *)
	    args: Args.Arguments; (* for compilation *)
	 END;

      Source = POINTER TO SourceRec;
      SourceRec =
	 RECORD
	    (PersistentDisciplines.ObjectRec)
	    header: Header;
	 END;

   TYPE
      OpenProc = PROCEDURE (source: Source; VAR s: Streams.Stream) : BOOLEAN;
      Interface = POINTER TO InterfaceRec;
      InterfaceRec =
	 RECORD
	    (Objects.ObjectRec)
	    open: OpenProc;
	 END;

   PROCEDURE Init(source: Source; if: Interface);

   PROCEDURE CreateHeader(VAR header: Header;
                          modname: ConstStrings.String;
			  kind: SourceKind;
			  date: Times.Time;
			  srcid: ConstStrings.String;
			  args: Args.Arguments);

   PROCEDURE Open(source: Source; VAR s: Streams.Stream) : BOOLEAN;

   PROCEDURE GetSource(s: Streams.Stream; VAR source: Source);
      (* return the associated source of s if s has been created by Open *)

END CompilerSources.
