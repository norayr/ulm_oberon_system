(* Ulm's Oberon Library
   Copyright (C) 1989-1994 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: Read.od,v 1.1 1994/02/23 07:46:36 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: Read.od,v $
   Revision 1.1  1994/02/23  07:46:36  borchert
   Initial revision

   ----------------------------------------------------------------------------
   AFB 6/89
   ----------------------------------------------------------------------------
*)

DEFINITION Read;

   (* termination characters (e.g. first non-digit after Read.Int)
      are pushed back to the stream (Streams.Back);
      if not defined otherwise Streams.stdin.count equals 1 on success
      else 0;
      white space is determined by StreamDisciplines

      syntax of integers:
	 [+-][0-9]+
      syntax of reals (ignore blank in RE);
	 [+-][0-9]+(\.[0-9]* )?([eEdD][+-][0-9]+)?
   *)

   IMPORT Streams;

   (* procedures reading from Streams.stdin *)
      
   PROCEDURE ShortInt(VAR shortint: SHORTINT);

   PROCEDURE Int(VAR int: INTEGER);

   PROCEDURE LongInt(VAR longint: LONGINT);

   PROCEDURE Real(VAR real: REAL);

   PROCEDURE LongReal(VAR longreal: LONGREAL);

   PROCEDURE Char(VAR ch: CHAR);

   PROCEDURE Byte(VAR byte: BYTE);

   PROCEDURE Line(VAR line: ARRAY OF CHAR);
      (* a complete line ('til ASCII.nl or end of file) is read;
	 `line' is filled with the beginning of the line;
	 `line' is guaranteed to be 0X-terminated;
	 Streams.stdin.count equals the number of characters copied into `line';
	 the line terminator may be redefined by StreamDisciplines
      *)

   PROCEDURE Ln;
      (* skip input until next ASCII.nl or end of file *)

   PROCEDURE String(VAR string: ARRAY OF CHAR);
      (* input is skipped to the first non-white space character;
	 further input is copied into `string' until `string' is filled
	 or white space is read;
	 Streams.stdin.count equals the number of characters
	    copied into `string'
      *)

   PROCEDURE Field(VAR string: ARRAY OF CHAR) : BOOLEAN;
      (* records are separated by line terminators and fields are
	 delimited either by field separators or line terminators;
	 surrounding white space of fields is to be skipped;
	 Field does not skip line terminators but returns FALSE
	 if there are no more fields on that line;
	 Field returns an empty string for empty fields;
	 exception: if the field separators are a subset of the
	 set of white space, then only non-empty fields will be returned;
	 Field returns FALSE on empty lines
      *)

   (* procedures reading from stream `s' *)

   PROCEDURE ShortIntS(s: Streams.Stream; VAR shortint: SHORTINT);

   PROCEDURE IntS(s: Streams.Stream; VAR int: INTEGER);

   PROCEDURE LongIntS(s: Streams.Stream; VAR longint: LONGINT);

   PROCEDURE RealS(s: Streams.Stream; VAR real: REAL);

   PROCEDURE LongRealS(s: Streams.Stream; VAR longreal: LONGREAL);

   PROCEDURE CharS(s: Streams.Stream; VAR ch: CHAR);

   PROCEDURE ByteS(s: Streams.Stream; VAR byte: BYTE);

   PROCEDURE LineS(s: Streams.Stream; VAR line: ARRAY OF CHAR);

   PROCEDURE LnS(s: Streams.Stream);

   PROCEDURE StringS(s: Streams.Stream; VAR string: ARRAY OF CHAR);

   PROCEDURE FieldS(s: Streams.Stream; VAR string: ARRAY OF CHAR) : BOOLEAN;

END Read.
