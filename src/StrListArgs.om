(* Ulm's Oberon Library
   Copyright (C) 1989-1994 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: StrListArgs.om,v 1.2 1995/04/13 13:55:21 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: StrListArgs.om,v $
   Revision 1.2  1995/04/13  13:55:21  borchert
   simplifications & cleanup

   Revision 1.1  1994/10/28  10:23:52  borchert
   Initial revision

   ----------------------------------------------------------------------------
   Jan Oliver Stibane -- October 1994
   ----------------------------------------------------------------------------
*)

MODULE StrListArgs;

   IMPORT Args, ConstStrings, Iterators, NetIO, PersistentObjects,
      Services, Streams, StringArgs, Write;

   TYPE
      Member = POINTER TO MemberRec;
      MemberRec =
	 RECORD
	    string: ConstStrings.String;
	    next: Member;
	 END;
      Value = POINTER TO ValueRec;
      ValueRec =
	 RECORD
	    (Args.ValueRec)
	    head, tail: Member;
	 END;

   VAR 
      type: Args.Type;

   VAR 
      valueType: Services.Type;
      valueIf: PersistentObjects.Interface;
      if: Args.TypeInterface;

   (* === interface to PersistentObjects ================================= *)

   PROCEDURE CreateValue(VAR obj: PersistentObjects.Object);
      VAR 
	 value : Value;
   BEGIN
      NEW(value); value.head := NIL; value.tail := NIL;
      PersistentObjects.Init(value, valueType);
      obj := value;
   END CreateValue;

   PROCEDURE WriteValue(s: Streams.Stream;
			obj: PersistentObjects.Object) : BOOLEAN;
      VAR
	 count: LONGINT;
	 member: Member;
   BEGIN
      WITH obj: Value DO
	 count := 0; member := obj.head;
	 WHILE member # NIL DO
	    INC(count); member := member.next;
	 END;
	 IF ~NetIO.WriteLongInt(s, count) THEN RETURN FALSE END;
	 member := obj.head;
	 WHILE member # NIL DO
	    IF ~NetIO.WriteConstString(s, member.string) THEN RETURN FALSE END;
	    member := member.next; DEC(count);
	 END;
	 ASSERT(count = 0);
	 RETURN TRUE
      END;
   END WriteValue;

   PROCEDURE ReadValue(s: Streams.Stream;
		       obj: PersistentObjects.Object) : BOOLEAN;
      VAR
	 count: LONGINT;
	 member: Member;
   BEGIN
      WITH obj: Value DO
	 IF ~NetIO.ReadLongInt(s, count) THEN RETURN FALSE END;
	 WHILE count > 0 DO
	    NEW(member); member.next := NIL;
	    IF ~NetIO.ReadConstString(s, member.string) THEN RETURN FALSE END;
	    IF obj.tail = NIL THEN
	       obj.head := member;
	    ELSE
	       obj.tail.next := member;
	    END;
	    obj.tail := member;
	    DEC(count);
	 END;
	 RETURN TRUE
      END;
   END ReadValue;

   (* === interface to Args ========================================== *)

   PROCEDURE ReadArg(s: Streams.Stream; VAR value: Args.Value): BOOLEAN;
      VAR 
	 string: ConstStrings.String;
	 myval: Value;
	 sval: StringArgs.Value;
	 member: Member;
   BEGIN
      IF ~Args.ReadValue(s, StringArgs.type, sval) THEN RETURN FALSE END;
      IF (value # NIL) & (value IS Value) THEN
	 myval := value(Value);
      ELSE
	 CreateValue(myval);
      END;
      NEW(member); member.string := sval.string; member.next := NIL;
      IF myval.tail = NIL THEN
	 myval.head := member;
      ELSE
	 myval.tail.next := member;
      END;
      myval.tail := member;
      value := myval;
      RETURN TRUE
   END ReadArg;

   PROCEDURE PrintValue(s: Streams.Stream; value: Args.Value);
      VAR
	 member: Member;
   BEGIN
      WITH value: Value DO
	 member := value.head;
	 WHILE member # NIL DO
	    ConstStrings.Write(s, member.string);
	    member := member.next;
	    IF member # NIL THEN
	       Write.LnS(s); Write.IndentS(s);
	    END;
	 END;
      END;
   END PrintValue;

   PROCEDURE Help(s: Streams.Stream);
   BEGIN
      Write.LineS(s, "a character string of arbitrary length;");
      Write.IndentS(s);
      Write.StringS(s, "non-printable chars including 0X are permitted");
   END Help;

   (* === exported procedure ============================================ *)

   PROCEDURE Create(VAR value: Args.Value; it: Iterators.Iterator);
      (* all objects of the iterator which are not of type
	 ConstStrings.String will not be put into the list
      *)
      VAR
	 object: Iterators.Reference;
	 val: Value;
	 member: Member;
   BEGIN
      CreateValue(val);
      WHILE Iterators.Get(it, object) DO
	 IF object IS ConstStrings.String THEN
	    NEW(member); member.next := NIL;
	    member.string := object(ConstStrings.String);
	    IF val.tail = NIL THEN
	       val.head := member;
	    ELSE
	       val.tail.next := member;
	    END;
	    val.tail := member;
	 END;
      END;
      value := val;
   END Create;

BEGIN
   NEW (valueIf);
   valueIf.read := ReadValue;
   valueIf.write := WriteValue;
   valueIf.create := CreateValue;
   valueIf.createAndRead := NIL;
   PersistentObjects.RegisterType(valueType,
      "StrListArgs.Value", "Args.Value", valueIf);

   NEW (if);
   if.read := ReadArg;
   if.help := Help;
   if.print := PrintValue;


   NEW(type);
   type.name := "list of strings";
   type.moduleName := "StrListArgs";
   Args.DefineType(type, if, valueType);
END StrListArgs.
