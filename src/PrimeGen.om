(* Ulm's Oberon Library
   Copyright (C) 1989-1997 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: PrimeGen.om,v 1.1 1997/04/03 09:39:05 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: PrimeGen.om,v $
   Revision 1.1  1997/04/03  09:39:05  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

MODULE PrimeGen; (* Frank B.J. Fischer *)
    
   IMPORT IntOperations, Operations, Primes, QuickPrimeTest,
      Random := RandomGenerators;

   VAR
      val1: Operations.Operand;

   PROCEDURE RandTVal(min, max: IntOperations.Operand): IntOperations.Operand;
      VAR
	 tVal: IntOperations.Operand;
   BEGIN
      Operations.Assign(tVal, max);
      Random.SetVal(tVal);
      IntOperations.Mod2(tVal, max);
      IF Operations.Compare(tVal, min)<0 THEN
	 Operations.Add2(tVal, min);
      END;
      RETURN tVal
   END RandTVal;


   PROCEDURE Generate(test: Primes.Test; n: INTEGER; 
		      pLeast: REAL;
		      VAR prime: IntOperations.Operand);
      VAR
         min, max: IntOperations.Operand; 
	 tVal    : IntOperations.Operand; 
         k, tRes : INTEGER;
	 p, ps   : REAL;
   BEGIN
      (* check prime *)
      ASSERT(prime#NIL);
      ASSERT(IntOperations.IsLargeEnoughFor(prime, n));

      (* create the global value val1 *)
      Operations.Assign(val1, prime);
      IntOperations.IntToOp(1, val1);

      (* create min *)
      IntOperations.Shift3(min, val1, n-1);
      (* create max *)
      IntOperations.Shift3(max, val1, n);
            
      (* init generator *)
      k := 0;
      tRes := Primes.indefinite;

      REPEAT
	 p := 1.0;

	 (* next odd tVal *)
	 tVal := RandTVal(min, max);
	 IF ~IntOperations.Odd(tVal) THEN  (* assure tVal is odd *)
	    IntOperations.Inc2(tVal);
         END;
	 INC(k);

	 tRes := Primes.PerformTest(QuickPrimeTest.test, tVal, ps);
	 WHILE (1 - p < pLeast) & (tRes = Primes.indefinite) DO
	    tRes := Primes.PerformTest(test, tVal, ps);

	    (* check if test is a probabilistic test *)
	    IF ps = 0.0 THEN
	       p := 0.0;
            END;
            (* calculate probability *)
	    p := p * (1 - ps);
	 END;
      UNTIL (1 - p >= pLeast) OR (tRes = Primes.prime);
      Operations.Copy(tVal, prime);
   END Generate;

END PrimeGen.
