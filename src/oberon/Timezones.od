(* Ulm's Oberon Library
   Copyright (C) 1989-1994 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: Timezones.od,v 1.3 1994/12/13 15:52:48 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: Timezones.od,v $
   Revision 1.3  1994/12/13  15:52:48  borchert
   - time zones are now an extension of PersistentDisciplines.Object
   - assertions of Assertions replaced by real assertions

   Revision 1.2  1994/05/03  10:35:47  martin
   lastChange, nextChange, TYPE Offset added;
   some name changes; Lookup may be called with at=NIL.

   Revision 1.1  1994/04/05  12:55:34  martin
   Initial revision
   ----------------------------------------------------------------------------
   Martin Hasch, Mar 1994
   ----------------------------------------------------------------------------
*)
(*
 *	Abstraction for time zones.
 *	A time zone is a persistent object that can tell how a local
 *	time differs from universal time (aka Greenwich mean time).
 *	We want to keep time values uniform around the globe;
 *	location dependent, however, their interpretation.
 *)
DEFINITION Timezones;

   IMPORT Events, Objects, PersistentDisciplines, Scales, Times;

   (* -------- types and variables of general interest -------- *)

   TYPE
      Name = ARRAY 12 OF CHAR;
      Offset = Scales.Value;

      Timezone = POINTER TO TimezoneRec;
      TimezoneRec =
	 RECORD
	    (PersistentDisciplines.ObjectRec)
	    baseName:	Name;		(* identifying time zone *)
	 END;

      Glimpse = POINTER TO GlimpseRec;
      GlimpseRec =
	 RECORD
	    (Objects.ObjectRec)
	    name:	Name;		(* identifying time zone & dst mode *)
	    offset:	Offset;		(* seconds behind universal time *)
	    isDst:	BOOLEAN;	(* daylight saving time in effect *)
	    lastChange,			(* times of previous and next change,*)
	    nextChange: Times.Time;	(* if determinable, otherwise NIL *)
	 END;

   VAR
      utc,				(* universal time (GMT), readonly *)
      local: Timezone;			(* can be reset by the system *)

   (* -------- types for timezone implementors -------- *)

   TYPE
      LookupProc =
	 PROCEDURE (tz: Timezone; at: Times.Time; VAR glimpse: GlimpseRec);
      
      Interface = POINTER TO InterfaceRec;
      InterfaceRec =
	 RECORD
	    (Objects.ObjectRec)
	    unsteady:	BOOLEAN;	(* if TRUE, name and offset can vary *)
	    lookup:	LookupProc;	(* ... and lookup will be needed     *)
	    stdGlimpse: Glimpse;	(* consulted if time is not relevant *)
	 END;

      InitProc = PROCEDURE (tz: Timezone) : Interface; (* must not fail *)

      FindProc =
	 PROCEDURE (name: ARRAY OF CHAR;
		     VAR tz: Timezone; VAR glimpse: GlimpseRec) : BOOLEAN;

   (* -------- timezone access procedures -------- *)

   PROCEDURE GetOffset(tz: Timezone; at: Times.Time) : Offset;
      (* supplies basic offset if at = NIL *)

   PROCEDURE Unsteady(tz: Timezone) : BOOLEAN;

   PROCEDURE Lookup(tz: Timezone; at: Times.Time; VAR glimpse: GlimpseRec);
      (*
       * works for steady timezones as well as for unsteady ones;
       * supplies basic glimpse if at = NIL
       *)

   PROCEDURE FindOffset(name: ARRAY OF CHAR; VAR offset: Offset) : BOOLEAN;

   PROCEDURE Find(name: ARRAY OF CHAR;
		  VAR tz: Timezone; VAR glimpse: GlimpseRec) : BOOLEAN;

   (* -------- procedures for timezone implementors -------- *)

   PROCEDURE Init(tz: Timezone; if: Interface);
   PROCEDURE DelayInit(tz: Timezone; init: InitProc);
      (*
       * Init or DelayInit must be called by any tz constructor.
       * In the latter case, init will be called later to supply the
       * interface when access to tz is needed for the first time.
       *)

   PROCEDURE Declare(find: FindProc);
      (* last declared = first called *)

END Timezones.
