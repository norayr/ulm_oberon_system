(* Ulm's Oberon Library
   Copyright (C) 1989-2004 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: I386ObReloc.om,v 1.2 2005/04/11 10:18:03 ehrhardt Exp $
   ----------------------------------------------------------------------------
   $Log: I386ObReloc.om,v $
   Revision 1.2  2005/04/11 10:18:03  ehrhardt
   Formatting fixes,

   Revision 1.1  2004/09/07 09:16:08  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

MODULE I386ObRelocations; (* Christian Ehrhardt *)

   IMPORT Disciplines, FragmentedStreams, Relocations := CompilerRelocations,
      Res := I386OberonResults;

   PROCEDURE Process(obj: Disciplines.Object;
		     stream: FragmentedStreams.Stream;
		     target: Res.Block; start: FragmentedStreams.Label);
      VAR
         req: Relocations.Request;
         mind, maxd: LONGINT;
         dist, dummy: LONGINT;
         inst: Relocations.Instance;
   BEGIN
      req := Relocations.GetRequests(obj);
      WHILE req # NIL DO
         IF req IS Relocations.RelocRequest THEN
            WITH req: Relocations.RelocRequest DO
               IF req.type # Relocations.noReloc THEN
                  inst := req.instances;
                  WHILE inst # NIL DO
                     FragmentedStreams.Difference(start, inst.label, dist,
                                                  dummy);
                     ASSERT(dist = dummy);
                     Res.AddReloc(target, req.type, dist + inst.off,
                                  inst.len, req.ref);
                     inst := inst.next;
                  END;
               END;
            END;
         ELSE
            WITH req: Relocations.SymRequest DO
               FragmentedStreams.Difference(start, req.label, dist, dummy);
               ASSERT(dist = dummy);
               Res.AddSymbol(target, req.name, dist);
            END;
         END;
         req := req.next;
      END;
   END Process;

END I386ObRelocations.
