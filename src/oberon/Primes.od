(* Ulm's Oberon Library
   Copyright (C) 1989-1997 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: Primes.od,v 1.1 1997/04/03 09:39:10 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: Primes.od,v $
   Revision 1.1  1997/04/03  09:39:10  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

DEFINITION Primes; (* Frank B.J. Fischer *)
    
   IMPORT Disciplines, IntOperations, Objects; 

   CONST
      composite = 0; prime = 1; indefinite = 2;

   TYPE
      Test = POINTER TO TestRec;
      TestRec = RECORD (Disciplines.ObjectRec) END;
      PerformTestProc = PROCEDURE(test: Test;
                                  value: IntOperations.Operand;
                                  VAR p: REAL): INTEGER;
      Interface = POINTER TO InterfaceRec;
      InterfaceRec = RECORD
			(Objects.ObjectRec)
			performTest: PerformTestProc;
                     END;

   PROCEDURE Init(test: Test; if: Interface);

   PROCEDURE PerformTest(test: Test; value: IntOperations.Operand;
			 VAR p: REAL): INTEGER;
      (* perform test for given value and 
	 returns composite, if value is definitely not prime
	 returns prime, if value is prime and
	 returns indefinite, if value may be prime, then p in [0..1] 
	 indicates the quality of the test: there is a chance of 100*p %
	 that value is prime!
      *)

END Primes.
