(* Ulm's Oberon Library
   Copyright (C) 1989-1996 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: CopyingStre.od,v 1.1 1996/12/07 20:18:16 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: CopyingStre.od,v $
   Revision 1.1  1996/12/07  20:18:16  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

DEFINITION CopyingStreams;

   (* stream implementation offering seek and tell capability
      on base of input streams which do not permit rewinding;
      this is done by copying everything read so far into memory
   *)

   IMPORT Events, RelatedEvents, Streams;

   CONST
      cannotAllocMemory = 0;
	 (* always returned by Open if we do not have a valid mapfd *)
      invalidInputStream = 1;
	 (* the stream passed as input stream to Open does not
	    support reading
	 *)
      outOfMemory = 2;
	 (* unable to process more input data due out of memory *)
      posOutOfRange = 3;
	 (* seek position outside the range of 0..maxinputpos;
	    note that seek positions outside of the range read
	    so far are not supported
	 *)
      errors = 4;
   TYPE
      ErrorCode = SHORTINT; (* cannotAllocMemory..posOutOfRange *)
      ErrorEvent = POINTER TO ErrorEventRec;
      ErrorEventRec =
	 RECORD
	    (Events.EventRec)
	    errorcode: ErrorCode;
	 END;
   VAR
      error: Events.EventType;
      errormsg: ARRAY errors OF Events.Message;

   PROCEDURE Open(VAR s: Streams.Stream; input: Streams.Stream;
                  errors: RelatedEvents.Object) : BOOLEAN;

END CopyingStreams.
