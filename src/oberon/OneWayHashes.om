(* Ulm's Oberon Library
   Copyright (C) 1989-1997 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: OneWayHashe.om,v 1.3 1998/04/04 18:33:18 martin Exp $
   ----------------------------------------------------------------------------
   $Log: OneWayHashe.om,v $
   Revision 1.3  1998/04/04  18:33:18  martin
   major revision: values are now proper objects,
   ExtractValue renamed CreateStream, Equal and Generator added

   Revision 1.2  1998/03/24  22:49:19  borchert
   module name fixed

   Revision 1.1  1997/04/02  13:54:55  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

MODULE OneWayHashes; (* Frank B.J. Fischer / rev.: mh *)

   IMPORT Objects, PersistentDisciplines, PersistentObjects, 
	  Services, Streams;

   TYPE
      Hash = POINTER TO HashRec;
      Value = POINTER TO ValueRec;

      GenerateProc     = PROCEDURE (hash: Hash; message: Streams.Stream;
				    VAR value: Value);
      BitlengthProc    = PROCEDURE (hash: Hash): LONGINT;

      Interface = POINTER TO InterfaceRec;
      InterfaceRec =
	 RECORD
	    (Objects.ObjectRec)
	    generate:	   GenerateProc;
	    bitlength:	   BitlengthProc;
	 END;

      HashRec =
	 RECORD
	    (Services.ObjectRec)
	    if: Interface;
	 END;

      GeneratorProc    = PROCEDURE (value: Value): Hash;
      EqualProc        = PROCEDURE (value1, value2: Value): BOOLEAN;
      CreateStreamProc = PROCEDURE (value: Value; VAR stream: Streams.Stream);

      ValueInterface = POINTER TO ValueInterfaceRec;
      ValueInterfaceRec =
	 RECORD
	    (Objects.ObjectRec)
	    generator:	   GeneratorProc;
	    equal:	   EqualProc;
	    createStream:  CreateStreamProc;
	 END;

      ValueRec =
	 RECORD
	    (PersistentDisciplines.ObjectRec)
	    if: ValueInterface;
	 END;

   VAR
      hashType,
      valueType: Services.Type;

   PROCEDURE Init(hash: Hash; if: Interface);
   BEGIN
      ASSERT((if.generate # NIL) & (if.bitlength # NIL));
      hash.if := if;
   END Init;

   PROCEDURE InitValue(value: Value; if: ValueInterface);
   BEGIN
      ASSERT((if.generator # NIL) & (if.equal # NIL) & (if.createStream # NIL));
      value.if := if;
   END InitValue;

   PROCEDURE Generate(hash: Hash; message: Streams.Stream; VAR value: Value);
      (* generate hash value from all remaining bytes in message *)
   BEGIN
      hash.if.generate(hash, message, value);
   END Generate;

   PROCEDURE Bitlength(hash: Hash): LONGINT;
      (* return fixed number of bits per hash value *)
   BEGIN
      RETURN hash.if.bitlength(hash)
   END Bitlength;

   PROCEDURE Generator(value: Value): Hash;
      (* get hash that generated this value *)
   BEGIN
      RETURN value.if.generator(value)
   END Generator;

   PROCEDURE Equal(value1, value2: Value): BOOLEAN;
      (* test whether two values generated by same hash are equal *)
   BEGIN
      ASSERT( Generator(value1) = Generator(value2) );
      ASSERT(value1.if = value2.if);
      RETURN value1.if.equal(value1, value2)
   END Equal;

   PROCEDURE CreateStream(value: Value; VAR stream: Streams.Stream);
      (* convert value to a stream, opened for reading *)
   BEGIN
      value.if.createStream(value, stream);
   END CreateStream;

BEGIN
   Services.CreateType(hashType, "OneWayHashes.Hash", "");
   PersistentObjects.RegisterType(valueType,
      "OneWayHashes.Value", "PersistentDisciplines.Object", NIL);
END OneWayHashes.
