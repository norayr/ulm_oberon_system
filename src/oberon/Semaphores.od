(* Ulm's Oberon Library
   Copyright (C) 1989-1994 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: Semaphores.od,v 1.3 1997/07/09 13:55:01 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: Semaphores.od,v $
   Revision 1.3  1997/07/09  13:55:01  borchert
   major revision due to design faults of the former interface:
   - V must be called only for claimed resources
   - Drop is to be called otherwise

   Revision 1.2  1995/01/20  12:23:23  borchert
   p interface procedure added

   Revision 1.1  1994/02/23  08:04:37  borchert
   Initial revision

   ----------------------------------------------------------------------------
   AFB 10/93
   ----------------------------------------------------------------------------
*)

DEFINITION Semaphores;

   IMPORT Conditions, Disciplines, Objects;

   TYPE
      Semaphore = POINTER TO SemaphoreRec;
      SemaphoreRec = RECORD (Disciplines.ObjectRec) END;

      SemaOp = PROCEDURE (sema: Semaphore);
      StatusProc = PROCEDURE (sema: Semaphore) : INTEGER;
      GetConditionProc = PROCEDURE (sema: Semaphore;
			            VAR condition: Conditions.Condition);
      DropProc = PROCEDURE (condition: Conditions.Condition);
      Interface = POINTER TO InterfaceRec;
      InterfaceRec =
	 RECORD
	    (Objects.ObjectRec)
	    p: SemaOp; (* optional: may be NIL *)
	    v: SemaOp;
	    getcondition: GetConditionProc;
	    drop: DropProc;
	    status: StatusProc;
	 END;

   PROCEDURE Init(sema: Semaphore; if: Interface);

   PROCEDURE P(sema: Semaphore);
   PROCEDURE V(sema: Semaphore);
      (* PRE: the resource must have been claimed already;
         otherwise Drop is to be called
      *)

   PROCEDURE GetCondition(sema: Semaphore; VAR condition: Conditions.Condition);
      (* return condition which waits for a free resource;
	 if the condition evaluates to TRUE, the resource is already taken,
	 i.e. P must not be called additionally
      *)
   PROCEDURE Drop(condition: Conditions.Condition);
      (* undoes the queuing (of GetCondition) or releases the resource *)

   PROCEDURE Status(sema: Semaphore) : INTEGER;
      (* return value:
	    >= 0: number of free resources
	    <  0: absolute value indicates length of queue
      *)

END Semaphores.
