(* Ulm's Oberon Library
   Copyright (C) 1989-1998 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: OberonStdCo.om,v 1.1 1998/03/28 23:03:58 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: OberonStdCo.om,v $
   Revision 1.1  1998/03/28 23:03:58  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

MODULE OberonStdConstants;

   IMPORT BaseTypes := OberonBaseTypes, Lex := OberonLex, Sym := OberonSymbols;

   PROCEDURE Create(VAR at: Sym.Attribute; kind: Sym.ConstantKind);
      VAR
	 constval: Sym.ConstantValue;
   BEGIN
      Sym.CreateConstval(constval, kind);
      Sym.CreateConstvalAt(at, constval, NIL);
   END Create;

   PROCEDURE CreateNIL(VAR at: Sym.Attribute);
   BEGIN
      Create(at, Sym.tokenConst); at.constval.token.sy := Lex.nil;
      at.type := BaseTypes.nil;
   END CreateNIL;

   PROCEDURE CreateEmptySet(VAR at: Sym.Attribute);
   BEGIN
      Create(at, Sym.emptySetConst); at.type := BaseTypes.set;
   END CreateEmptySet;

   PROCEDURE CreateBoolConst(VAR at: Sym.Attribute; val: BOOLEAN);
   BEGIN
      IF val THEN
	 Create(at, Sym.trueConst);
      ELSE
	 Create(at, Sym.falseConst);
      END;
      at.type := BaseTypes.boolean;
   END CreateBoolConst;

END OberonStdConstants.
