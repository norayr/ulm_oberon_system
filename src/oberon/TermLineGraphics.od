(* Ulm's Oberon Library
   Copyright (C) 1989-2004 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: TermLineGra.od,v 1.1 2004/06/11 12:11:43 borchert Exp borchert $
   ----------------------------------------------------------------------------
   $Log: TermLineGra.od,v $
   Revision 1.1  2004/06/11 12:11:43  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

DEFINITION TermLineGraphics; (* Ralf Beck *)

   (* this module provides routines for simple drawing *)
   (* operations on ascii-terminals                    *)

   IMPORT Streams; 

   CONST (* graphics characters *)
      verticalLine = 0;
      horizontalLine = 1;
      lowerRightCorner = 2;
      upperRightCorner = 3;
      upperLeftCorner = 4;
      lowerLeftCorner = 5;
      cross = 6;
      leftTee = 7;
      rightTee = 8;
      bottomTee = 9;
      topTee = 10;
      chars = 11;
   TYPE
      Symbol = SHORTINT; (* verticalLine ... *)

   CONST
      (* character sets *)
      standard = 0; graphics = 1;
   TYPE
      CharacterSet = SHORTINT; (* standard, graphics *)

   TYPE
      GraphicsChar =
	 RECORD
	    set: CharacterSet; (* character set set to use *)
	    char: CHAR;    (* ASCII code of character *)
         END;
      
      CharSet = ARRAY chars OF GraphicsChar; (* set used for drawing *)

      SetProc = PROCEDURE (s: Streams.Stream; charset: CharacterSet);

   PROCEDURE Init(s: Streams.Stream; charset: CharSet; setCharset: SetProc);
      (* initialize the graphics characterset *)
      (* must be done by terminal implementation *)

   PROCEDURE Supported(s: Streams.Stream) : BOOLEAN;
      (* return TRUE if line graphics are supported
	 and not just simulated
      *)

   PROCEDURE SwitchCharSet(s: Streams.Stream; charset: CharacterSet);
      (* switch to the given character set *)

   PROCEDURE GetGraphicalCharacterSet(s: Streams.Stream; VAR charset: CharSet);

   PROCEDURE Draw(s: Streams.Stream; char: Symbol);
      (* draw one of the characters above *)

   PROCEDURE HLine(s: Streams.Stream; line, column, length: INTEGER);
      (* draw a horizontal line from position (line, column) with *)
      (* length (length)                                          *)
      (* HLine doesn't check for validity of parameters           *)

   PROCEDURE VLine(s: Streams.Stream; line, column, length: INTEGER);
      (* draw a vertical line from position (line, column) with   *)
      (* length (length)                                          *)
      (* VLine doesn't check for validity of parameters           *)
      (* terminal must be in raw mode for proper operation        *)

   PROCEDURE Box(s: Streams.Stream; line, column, lines, columns: INTEGER);
      (* draw a box starting at position (line, column) with *)
      (* dimensions (lines, columns)                         *)
      (* Box doesn't check for validity of parameters        *)
      (* terminal must be in raw mode for proper operation   *)

END TermLineGraphics.
