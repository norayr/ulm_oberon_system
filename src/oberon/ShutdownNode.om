(* Ulm's Oberon Library
   Copyright (C) 1989-2004 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id$
   ----------------------------------------------------------------------------
   $Log$
   ----------------------------------------------------------------------------
*)

MODULE ShutdownNode;

   IMPORT Args, CommandNodes, Conclusions, ControlNodes, Errors, InetTCP,
      Names, Paths, PersistentEvents, PersistentObjects, PrivateShards,
      Process, RelatedEvents, RemoteEvents, RemoteNames, RemoteStreams,
      Resources, Services, Shards, Streams, StringArgs,
      UArgs := UnixArguments, UnixFiles, UnixNames, VolatileShards, Write;

   VAR
      path: ARRAY 512 OF CHAR;
      auth: Shards.Lid;
      node: Names.Node;
      errors: RelatedEvents.Object;
      lidType: Services.Type;

   PROCEDURE CreateLid(VAR lid: Shards.Lid; filename: ARRAY OF CHAR);
      VAR
	 s: Streams.Stream;
   BEGIN
      IF ~UnixFiles.Open(s, filename, UnixFiles.read, Streams.onebuf,
			 errors) THEN
	 Conclusions.Conclude(errors, Errors.fatal, "");
      END;
      RelatedEvents.Forward(s, errors);
      IF ~PersistentObjects.GuardedRead(s, lidType, lid) THEN
	 Conclusions.Conclude(errors, Errors.fatal, filename);
      END;
   END CreateLid;

   PROCEDURE ProcessArgs;
      VAR
	 flag: CHAR;
	 filename: ARRAY 512 OF CHAR;
   BEGIN
      auth := NIL;
      UArgs.Init("[-a auth] path");
      WHILE UArgs.GetFlag(flag) DO
	 CASE flag OF
	 | "a":
	       UArgs.FetchString(filename);
	       CreateLid(auth, filename);
	 ELSE
	    UArgs.Usage;
	 END;
      END;
      UArgs.FetchString(path);
      UArgs.AllArgs;
   END ProcessArgs;

   PROCEDURE FetchNode;
   BEGIN
      IF ~Paths.GetNode(path, auth, errors, node) THEN
	 Conclusions.Conclude(errors, Errors.fatal, path);
      END;
   END FetchNode;

   PROCEDURE Shutdown(node: Names.Node);
      VAR
	 args: Args.Arguments;
	 value: StringArgs.Value;
   BEGIN (* Shutdown *)
      RelatedEvents.Forward(node, errors);
      IF Resources.Terminated(node) THEN
	 Write.Line("node is terminated");
      ELSIF (node IS CommandNodes.Node) &
	    CommandNodes.GetArgs(node(CommandNodes.Node), args) &
	    Args.Exists(args, "command") THEN
	 WITH node: CommandNodes.Node DO
	    StringArgs.Create(value, "shut");
	    Args.SetValue(args, "command", value);
	    IF ~CommandNodes.Invoke(node, args, NIL, Streams.stdout, auth) THEN
	       IF RelatedEvents.EventsPending(errors) THEN
		  Conclusions.Conclude(errors, Errors.fatal, path);
	       END;
	    END;
	 END;
      ELSE
	 IF ~Names.Destroy(node, auth) THEN
	    Conclusions.Conclude(errors, Errors.fatal, path);
	 END;
      END;
   END Shutdown;

BEGIN
   Services.SeekType("Shards.Lid", lidType);
   NEW(errors); RelatedEvents.QueueEvents(errors);
   ProcessArgs;
   FetchNode;
   Shutdown(node);
   Process.TerminateSoftly;
END ShutdownNode.
