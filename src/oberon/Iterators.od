(* Ulm's Oberon Library
   Copyright (C) 1989-2004 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: Iterators.od,v 1.3 2004/09/03 09:00:51 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: Iterators.od,v $
   Revision 1.3  2004/09/03 09:00:51  borchert
   CreateQuickIterator added

   Revision 1.2  1994/12/29 20:20:20  borchert
   iterators are now an extension of Services.Object

   Revision 1.1  1994/02/23  08:03:34  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

DEFINITION Iterators;

   IMPORT Objects, Services;

   TYPE
      Reference = Objects.Object; Mode = SHORTINT;
      Iterator = POINTER TO IteratorRec;
      IteratorRec = RECORD (Services.ObjectRec) END;
      IteratorProc = PROCEDURE (it: Iterator; ref: Reference; mode: Mode);

   PROCEDURE Create(VAR it: Iterator; itproc: IteratorProc;
		    ref: Reference; mode: Mode);
   PROCEDURE CreateQuickIterator(VAR it: Iterator;
                                 itproc: IteratorProc;
				 ref: Reference; mode: Mode);
   PROCEDURE Get(it: Iterator; VAR object: Objects.Object) : BOOLEAN;
   PROCEDURE Yield(it: Iterator; object: Objects.Object);

END Iterators.
