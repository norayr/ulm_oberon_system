(* Ulm's Oberon Library
   Copyright (C) 1989-1994 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: SysTime.od,v 1.1 1994/02/23 08:01:21 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: SysTime.od,v $
   Revision 1.1  1994/02/23  08:01:21  borchert
   Initial revision

   ----------------------------------------------------------------------------
   AFB 12/90
   ----------------------------------------------------------------------------
*)

DEFINITION SysTime;

   IMPORT SysTypes;

   CONST
      UnitsPerSecond = 100;	(* local clock resolution *)

   TYPE
      Time = SysTypes.Time;
      TimesRec =
	 RECORD
	    utime: Time;	(* CPU time while in user mode *)
	    stime: Time;	(* CPU time while in system mode *)
	    cutime: Time;	(* user time of all children *)
	    cstime: Time;	(* system time of all children *)
	 END;
      TimeVal =
	 RECORD
	    sec: Time;          (* seconds and ... *)
	    usec: Time;         (* ... micro seconds *)
	 END;
      TimeZone =
	 RECORD
	    minuteswest: INTEGER; (* of Greenwich *)
	    dsttime: INTEGER; (* type of dst correction to apply *)
	 END;

   PROCEDURE GetTime() : Time;
      (* returns the value of time in seconds since Jan 1, 1970 *)

   PROCEDURE GetTimeOfDay(VAR time: TimeVal; VAR timezone: TimeZone);

   PROCEDURE GetProcessTimes(VAR times: TimesRec);

   PROCEDURE RealTime(reset: BOOLEAN) : Time;
      (* return elapsed real time in units elapsed since the
	 start of the process or since the last call with
	 argument TRUE
      *)

   PROCEDURE CPUTime(reset: BOOLEAN) : Time;
      (* return elapsed CPU time in units elapsed since the
	 start of the process or since the last call with
	 arugment TRUE
      *)

   PROCEDURE Alarm(seconds: Time);
      (* cause SysSignals.ALRM to be raised after the number of real time
	 seconds specified by seconds have elapsed;
	 seconds = 0 resets the alarm clock
      *)

   PROCEDURE AlarmTime() : Time;
      (* return the amount of time remaining in the alarm clock *)

   PROCEDURE Sleep(seconds: Time);
      (* pause(2) the process for the given number of seconds *)

END SysTime.
