(* Ulm's Oberon Library
   Copyright (C) 1989-1998 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: CompilerDat.od,v 1.1 1998/04/08 22:16:57 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: CompilerDat.od,v $
   Revision 1.1  1998/04/08 22:16:57  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

DEFINITION CompilerDatabases;

   IMPORT Architectures, CompilerKeys, CompilerObjects, ConstStrings,
      Objects, PersistentTexts, RelatedEvents, Services,
      Sources := CompilerSources, Streams;

   TYPE
      Database = POINTER TO DatabaseRec;
      DatabaseRec = RECORD (Services.ObjectRec) END;

   TYPE
      LookupProc = PROCEDURE (db: Database; modname: ConstStrings.String;
                              type: CompilerObjects.ObjectType;
			      arch: Architectures.Architecture;
			      keys: CompilerKeys.Set;
			      VAR header: CompilerObjects.Header;
			      VAR text: PersistentTexts.Text;
			      errors: RelatedEvents.Object) : BOOLEAN;
      LookupHeaderProc = PROCEDURE (db: Database; modname: ConstStrings.String;
                              type: CompilerObjects.ObjectType;
			      arch: Architectures.Architecture;
			      keys: CompilerKeys.Set;
			      VAR header: CompilerObjects.Header;
			      errors: RelatedEvents.Object) : BOOLEAN;
      StoreProc = PROCEDURE (db: Database; header: CompilerObjects.Header;
                             text: PersistentTexts.Text;
		             errors: RelatedEvents.Object) : BOOLEAN;
      LookupSrcProc = PROCEDURE (db: Database; modname: ConstStrings.String;
				 kind: Sources.SourceKind;
			         VAR src: Sources.Source;
				 errors: RelatedEvents.Object) : BOOLEAN;
      StoreSrcProc = PROCEDURE (db: Database;
                                src: Sources.Source;
		                errors: RelatedEvents.Object) : BOOLEAN;

      Interface = POINTER TO InterfaceRec;
      InterfaceRec =
	 RECORD
	    (Objects.ObjectRec)
	    lookup: LookupProc;
	    lookupHeader: LookupHeaderProc;
	    store: StoreProc;
	    lookupSrc: LookupSrcProc;
	    storeSrc: StoreSrcProc;
	 END;

   PROCEDURE Init(db: Database; if: Interface);

   PROCEDURE Lookup(db: Database; modname: ConstStrings.String;
                    type: CompilerObjects.ObjectType;
		    arch: Architectures.Architecture;
		    keys: CompilerKeys.Set;
		    VAR header: CompilerObjects.Header;
		    VAR text: PersistentTexts.Text;
		    errors: RelatedEvents.Object) : BOOLEAN;

   PROCEDURE LookupHeader(db: Database; modname: ConstStrings.String;
			  type: CompilerObjects.ObjectType;
			  arch: Architectures.Architecture;
			  keys: CompilerKeys.Set;
			  VAR header: CompilerObjects.Header;
			  errors: RelatedEvents.Object) : BOOLEAN;

   PROCEDURE Store(db: Database; header: CompilerObjects.Header;
                   text: PersistentTexts.Text;
		   errors: RelatedEvents.Object) : BOOLEAN;

   PROCEDURE LookupSrc(db: Database; modname: ConstStrings.String;
                       kind: Sources.SourceKind;
                       VAR src: Sources.Source;
		       errors: RelatedEvents.Object) : BOOLEAN;

   PROCEDURE StoreSrc(db: Database; src: Sources.Source;
		      errors: RelatedEvents.Object) : BOOLEAN;

END CompilerDatabases.
