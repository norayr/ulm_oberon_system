(* Ulm's Oberon Library
   Copyright (C) 1989-1994 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: BlockingEve.od,v 1.1 1994/09/06 13:20:59 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: BlockingEve.od,v $
   Revision 1.1  1994/09/06  13:20:59  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

DEFINITION BlockingEvents;

   IMPORT Conditions, Events;

   (* usually the party which raises an event doesn't wait for the
      completion of the event handling -- especially if this is done
      by other tasks (see EventConditions);
      this module allows the raising party to be blocked until
      all interested parties have seen it;
      there is, of course, some risk for the calling party to
      be blocked for a long time if not all interested parties are
      waiting all the time for this -- so it's wise to use this
      module only for inter-task communications inside a module
   *)

   TYPE
      EventType = POINTER TO EventTypeRec;
      EventTypeRec = RECORD (Events.EventTypeRec) END;

   PROCEDURE Define(VAR type: EventType);

   PROCEDURE Register(type: EventType; VAR condition: Conditions.Condition);
   PROCEDURE Unregister(condition: Conditions.Condition);
   PROCEDURE TestAndGet(condition: Conditions.Condition;
			VAR event: Events.Event) : BOOLEAN;
      (* test & fetch an event which must be marked as done *)
   PROCEDURE Done(condition: Conditions.Condition);

   PROCEDURE Raise(event: Events.Event);
      (* Events.Raise works also but this Raise guarantees that
	 the caller gets blocked independent of current priorities
      *)

END BlockingEvents.
