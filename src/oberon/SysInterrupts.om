(* Ulm's Oberon Library
   Copyright (C) 1989-1994 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: SysInterrup.om,v 1.2 2005/04/28 08:39:53 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: SysInterrup.om,v $
   Revision 1.2  2005/04/28 08:39:53  borchert
   adapted to the SPARC architecture

   Revision 1.1  1994/02/23  07:49:16  borchert
   Initial revision

   ----------------------------------------------------------------------------
   AFB 7/93
   ----------------------------------------------------------------------------
*)

MODULE SysInterrupts;

   (* interface which allows coroutines to be checked for being interrupted;
      this is needed by the garbage collector
   *)

   IMPORT Coroutines, SYS := SYSTEM;

   TYPE
      CrPtr = POINTER TO CoroutineRec;
      CoroutineRec =
	 RECORD
	    interrupts: INTEGER;
	    started: INTEGER;
	 END;
   VAR
      interrupts: INTEGER;
	 (* current sum of all coroutines *)

   PROCEDURE GetNumberOfInterrupts(cr: Coroutines.Coroutine) : INTEGER;
      VAR
	 crptr: CrPtr;
   BEGIN
      crptr := SYS.VAL(CrPtr, cr);
      RETURN crptr.interrupts
   END GetNumberOfInterrupts;

   PROCEDURE IncNumberOfInterrupts(cr: Coroutines.Coroutine);
      VAR
	 crptr: CrPtr;
   BEGIN
      crptr := SYS.VAL(CrPtr, cr);
      INC(crptr.interrupts); INC(interrupts);
   END IncNumberOfInterrupts;

   PROCEDURE DecNumberOfInterrupts(cr: Coroutines.Coroutine);
      VAR
	 crptr: CrPtr;
   BEGIN
      crptr := SYS.VAL(CrPtr, cr);
      DEC(crptr.interrupts); DEC(interrupts);
   END DecNumberOfInterrupts;

BEGIN
   interrupts := 0;
END SysInterrupts.
