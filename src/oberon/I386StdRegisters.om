(* Ulm's Oberon Library
   Copyright (C) 1989-2004 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: I386StdRegi.om,v 1.1 2004/09/06 20:34:10 borchert Exp borchert $
   ----------------------------------------------------------------------------
   $Log: I386StdRegi.om,v $
   Revision 1.1  2004/09/06 20:34:10  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

MODULE I386StdRegisters; (* Christian Ehrhardt *)

   IMPORT Disciplines, Emit := I386Emit, FragmentedStreams,
      Gen := I386OpCodeGenerator, Op := I386Operands,
      Pentium := I386Instructions, Regs := CompilerRegisters,
      StackAlloc := CompilerStackAllocations, Streams,
      TmpPtrs := CompilerTemporaryPointers;

   TYPE
      SaveBlock = Disciplines.Object;

      RestoreBlock = POINTER TO RestoreBlockRec;
      RestoreBlockRec = RECORD
         (Disciplines.ObjectRec)
	 next : RestoreBlock;
      END;

   TYPE
      RegSet = POINTER TO RegSetRec;
      RegSetRec = RECORD
	 (Regs.RegSetRec)
	 stream : FragmentedStreams.Stream;
         save : SaveBlock;
	 restore : RestoreBlock;
	 used : SET;
         tmpptrs : TmpPtrs.Ptr;
      END;

   (* Interface procedures for Registers *)

   PROCEDURE Xchg (set : Regs.RegSet; reg1, reg2 : Regs.Register);
      VAR
	 ops : ARRAY 2 OF Op.Operand;
	 reg : Regs.Value;
   BEGIN
      ops[0] := NIL;
      WITH set : RegSet DO
         ASSERT ((reg1 IN set.used) & (reg2 IN set.used));
	 Regs.UntracedValue (reg, reg1);
         ops[0] := Op.RegOp (reg, 4);
	 Regs.UntracedValue (reg, reg2);
         ops[1] := Op.RegOp (reg, 4);
         Emit.Instr (set.stream, Pentium.XCHG, 2, ops);
      END;
   END Xchg;

   PROCEDURE Read (set : Regs.RegSet; value : Regs.Value; reg1 : Regs.Register;
		   offset : LONGINT);
      VAR
	 ops : ARRAY 2 OF Op.Operand;
	 reg : Regs.Value;
         end : FragmentedStreams.Label;
	 ptr : TmpPtrs.Ptr;
   BEGIN
      ops[0] := NIL;
      WITH set : RegSet DO
         ASSERT (reg1 IN set.used);
	 Regs.UntracedValue (reg, reg1);
         ops[0] := Op.RegOp (reg, 4);
	 Regs.UntracedValue (reg, Gen.genbp);
         ops[1] := Op.MemOp1 (reg, 4, offset, 0);
         Emit.Instr (set.stream, Pentium.MOV, 2, ops);
         FragmentedStreams.CreateLabel (end);
         FragmentedStreams.AttachLabel (set.stream, end);
         ptr := TmpPtrs.Close (value, end);
         (* ptr = NIL means the temp pointer hasn't been commited,
          * ptr.mode NOT IN {Regs.addrM, Regs.ptrM} means that the
          * register doesn't contain a pointer. *)
         IF (ptr # NIL) & (ptr.mode IN {Regs.addrM, Regs.ptrM}) THEN
            ASSERT (ptr.mode = Regs.GetMode (value));
            ptr.next := set.tmpptrs;
            set.tmpptrs := ptr;
         END;
      END;
   END Read;

   PROCEDURE Write (set : Regs.RegSet; value : Regs.Value; reg1 : Regs.Register;
		    offset : LONGINT);
      VAR
	 ops : ARRAY 2 OF Op.Operand;
	 reg : Regs.Value;
         mode : Regs.Mode;
	 start : FragmentedStreams.Label;
   BEGIN
      ops[0] := NIL;
      WITH set : RegSet DO
         ASSERT (reg1 IN set.used);
	 Regs.UntracedValue (reg, reg1);
         ops[1] := Op.RegOp (reg, 4);
	 Regs.UntracedValue (reg, Gen.genbp);
         ops[0] := Op.MemOp1 (reg, 4, offset, 0);
         Emit.Instr (set.stream, Pentium.MOV, 2, ops);
         mode := Regs.GetMode (value);
	 (* Wr.String ("SAVING: reg = "); Wr.Int (reg1, 0); *)
	 (* Wr.String (" mode = "); Wr.Int (mode, 0); *)
	 (* Wr.String (" offset = "); Wr.Int (offset, 0); Wr.Ln; *)
	 FragmentedStreams.CreateLabel (start);
	 FragmentedStreams.AttachLabel (set.stream, start);
	 TmpPtrs.Open (value, start, offset, mode);
      END;
   END Write;

   PROCEDURE MarkUsed (set : Regs.RegSet; reg : Regs.Register);
   BEGIN
      WITH set : RegSet DO
         INCL (set.used, reg);
      END;
   END MarkUsed;

   PROCEDURE InitValue (set : Regs.RegSet; reg : Regs.Value);
      VAR
         ptr : TmpPtrs.Ptr;
   BEGIN
      ptr := TmpPtrs.Close (reg, NIL);
   END InitValue;

   PROCEDURE Create (VAR set : Regs.RegSet; alloc : StackAlloc.Stack;
                     s : FragmentedStreams.Stream);
      VAR
	 ret : RegSet;
   BEGIN
      ret := NIL;
      ASSERT (s # NIL);
      NEW(ret);
      set := ret;
      Regs.InitSet (ret, 8, Gen.StdRegs, 4, alloc, Read, Write, Xchg, InitValue, MarkUsed);
      ret.stream := s;
      ret.used := {};
      ret.tmpptrs := NIL;
      NEW(ret.save);
      (* This is harmless because we fix the object in Close which
       * must be called before Emit.UnfixedObjects *)
      FragmentedStreams.IncludeObject (s, ret.save, 0, 100);
   END Create;

   PROCEDURE IncludeRestoreBlock (set : Regs.RegSet);
      VAR
         restore : RestoreBlock;
   BEGIN
      restore := NIL;
      WITH set : RegSet DO
         NEW(restore);
         FragmentedStreams.IncludeObject (set.stream, restore, 0, 100);
	 restore.next := set.restore;
	 set.restore := restore;
      END;
   END IncludeRestoreBlock;

   PROCEDURE Close (set : Regs.RegSet);
      VAR
	 i : INTEGER;
	 op, opreg : Op.Operand;
	 ebp, reg : Regs.Value;
	 code : Gen.Code;
	 instr : Gen.Instruction;
	 ok : BOOLEAN;
	 mode : Gen.OpcodeMode;
	 saves, restores : FragmentedStreams.Stream;
	 savelen, restorelen, dummy : Streams.Count;
	 offset : LONGINT;
   BEGIN
      op := NIL;
      WITH set : RegSet DO
	 FragmentedStreams.Create (saves);
	 FragmentedStreams.Create (restores);
	 i := 0;
	 WHILE i < MAX (SET) DO
	    IF i IN set.used * Gen.StdRegs THEN
	       offset := StackAlloc.AllocateClosed (set.alloc, 4);
	       Regs.UntracedValue (reg, i);
	       Regs.UntracedValue (ebp, Gen.genbp);
	       op := Op.MemOp1 (ebp, 4, offset, 0);
	       opreg := Op.RegOp (reg, 4);
	       Emit.Instr2 (saves, Pentium.MOV, op, opreg);
	       Emit.Instr2 (restores, Pentium.MOV, opreg, op);
	    END;
	    INC(i);
	 END;
	 FragmentedStreams.Length (saves, savelen, dummy);
	 ASSERT (dummy = savelen);
	 (* Wr.String ("DEBUG savelen = "); Wr.Int (savelen, 0); Wr.Ln; *)
	 FragmentedStreams.Length (restores, restorelen, dummy);
	 ASSERT (dummy = restorelen);
	 (* Wr.String ("DEBUG restore = "); Wr.Int (restorelen, 0); Wr.Ln; *)
	 ok := Streams.Seek (saves, 0, Streams.fromStart); ASSERT (ok);
	 FragmentedStreams.SetObjectSize (set.save, savelen);
	 FragmentedStreams.FixObject (set.save);
	 IF savelen # 0 THEN
	    ok := Streams.Copy (saves, set.stream, savelen);
	    ASSERT (ok);
	 END;
	 set.save := NIL;
	 WHILE set.restore # NIL DO
	    ok := Streams.Seek (restores, 0, Streams.fromStart); ASSERT (ok);
	    FragmentedStreams.SetObjectSize (set.restore, restorelen);
	    FragmentedStreams.FixObject (set.restore);
	    IF restorelen # 0 THEN
	       ok := Streams.Copy (restores, set.stream, restorelen);
	       ASSERT (ok);
	    END;
	    set.restore := set.restore.next;
	 END;
	 ok := Streams.Seek (set.stream, 0, Streams.fromEnd);
	 ASSERT (ok);
      END;
   END Close;

   PROCEDURE GetTmpPtrs (set : Regs.RegSet) : TmpPtrs.Ptr;
   BEGIN
      WITH set : RegSet DO
         RETURN set.tmpptrs;
      END;
   END GetTmpPtrs;


END I386StdRegisters.
