(* Ulm's Oberon Library
   Copyright (C) 1989-1996 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: CompilerErr.od,v 1.1 1998/03/05 07:32:36 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: CompilerErr.od,v $
   Revision 1.1  1998/03/05 07:32:36  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

DEFINITION CompilerErrors;

   (* common type of error events which are related to
      an source file (i.e. syntax, semantics and
      implementation restrictions or problems);
      I/O errors, temporary failures etc. do not belong here
   *)

   IMPORT CompilerObjects, Events, Iterators, Objects, RelatedEvents,
      Streams;

   TYPE
      ErrorEvent = POINTER TO ErrorEventRec;
      ErrorEventRec =
	 RECORD
	    (Events.EventRec)
	    loc1, loc2, reference: CompilerObjects.Location;
	       (* loc1 is always # NIL;
	          loc2 is set if two items belong to
		  this error event (for example, on assignment incompatibility);
		  reference optionally references a possibly distant
		  line (e.g. in case of multiple declarations)
	       *)
	    longmsg: Streams.Stream;
	 END;
   VAR
      error: Events.EventType;

   PROCEDURE Raise(errors: RelatedEvents.Object;
		   at: CompilerObjects.Location;
                   message: ARRAY OF CHAR);
      (* short & simple form; note that message will be
         shortened if it is longer than Events.Message
      *)

   PROCEDURE Open(VAR s: Streams.Stream);
   PROCEDURE At1(s: Streams.Stream; location: CompilerObjects.Location);
   PROCEDURE At2(s: Streams.Stream; location: CompilerObjects.Location);
   PROCEDURE Ref(s: Streams.Stream; location: CompilerObjects.Location);
   PROCEDURE AtObject1(s: Streams.Stream; object: CompilerObjects.Object);
   PROCEDURE AtObject2(s: Streams.Stream; object: CompilerObjects.Object);
   PROCEDURE RefObject(s: Streams.Stream; object: CompilerObjects.Object);
   PROCEDURE Close(s: Streams.Stream; errors: RelatedEvents.Object);

   PROCEDURE GetSortedErrors(errors: RelatedEvents.Object;
                             VAR it: Iterators.Iterator);
      (* remove all ErrorEvents from errors, sort them by location,
	 and return them as events through the iterator
      *)

END CompilerErrors.
