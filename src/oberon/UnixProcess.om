(* Ulm's Oberon Library
   Copyright (C) 1989-1994 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: UnixProcess.om,v 1.2 2004/09/10 16:42:01 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: UnixProcess.om,v $
   Revision 1.2  2004/09/10 16:42:01  borchert
   support of Process.id added

   Revision 1.1  1994/02/23 07:28:12  borchert
   Initial revision

   ----------------------------------------------------------------------------
   AFB 3/92
   ----------------------------------------------------------------------------
*)

MODULE UnixProcess;

   (* initializes Process *)

   IMPORT Process, Streams, Strings, SysProcess, UnixArguments, Write;

   PROCEDURE Exit(code: Process.ExitCode);
   BEGIN
      SysProcess.Exit(code);
   END Exit;

   PROCEDURE Abort;
   BEGIN
      SysProcess.Abort;
   END Abort;

   PROCEDURE Pause;
   BEGIN
      SysProcess.Pause;
   END Pause;

   PROCEDURE Init;
      VAR
	 if: Process.Interface;
	 pids: Streams.Stream;
   BEGIN
      Process.indicateSuccess := 0;
      Process.indicateFailure := 1;

      NEW(if); if.exit := Exit; if.abort := Abort; if.pause := Pause;
      Process.SetHandlers(if);

      UnixArguments.GetCommandName(Process.name);
      Process.id := "";
      Strings.Open(pids, Process.id);
      Write.IntS(pids, SysProcess.Getpid(), 1);
      Streams.Release(pids);
   END Init;

BEGIN
   Init;
END UnixProcess.
