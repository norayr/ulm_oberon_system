(* Ulm's Oberon Library
   Copyright (C) 1989-2005 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: XResources.od,v 1.1 2005/04/08 18:54:22 borchert Exp borchert $
   ----------------------------------------------------------------------------
   $Log: XResources.od,v $
   Revision 1.1  2005/04/08 18:54:22  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

DEFINITION XResources;

   IMPORT Events, XColors, XDisplays, XObjects;

   TYPE
      Resource = POINTER TO ResourceRec;
      ResourceRec = RECORD (XObjects.ObjectRec) END;
      Drawable = POINTER TO DrawableRec;
      DrawableRec = RECORD (ResourceRec) END;
      Window = POINTER TO WindowRec;
      WindowRec = RECORD (DrawableRec) END;
      Fontable = POINTER TO FontableRec;
      FontableRec = RECORD (ResourceRec) END;
      GContext = POINTER TO GContextRec;
      GContextRec = RECORD (FontableRec) END;
      Font = POINTER TO FontRec;
      FontRec = RECORD (FontableRec) END;
      Event = POINTER TO EventRec;
      EventRec =
	 RECORD
	    (Events.EventRec)
	    resource: Resource;
	    xevent: XDisplays.XEvent;
	 END;

   PROCEDURE CreateSimpleWindow(VAR win: Window;
                                xdisplay: XDisplays.Display;
		                parent: Window;
		                x, y: INTEGER;
		                width, height: INTEGER;
		                borderWidth: INTEGER;
		                border: XDisplays.Pixel;
		                background: XDisplays.Pixel) : BOOLEAN;

   PROCEDURE CreateWindowFromID(VAR win: Window;
			        xdisplay: XDisplays.Display;
                                wid: XDisplays.WindowID) : BOOLEAN;

   PROCEDURE GetID(resource: Resource) : XDisplays.ResourceID;
   PROCEDURE GetDisplay(resource: Resource) : XDisplays.Display;

   PROCEDURE GetEventMask(win: Window;
                          VAR mask: XDisplays.EventTypeSet);
   PROCEDURE SetEventMask(win: Window;
                          mask: XDisplays.EventTypeSet) : BOOLEAN;

   PROCEDURE GetEventType(resource: Resource;
                          code: XDisplays.XEventCode;
			  VAR eventType: Events.EventType);

   PROCEDURE ExtendEventMask(win: Window;
                             mask: XDisplays.EventTypeSet) : BOOLEAN;

   PROCEDURE GetGeometry(drawable: Drawable;
                         VAR geometry: XDisplays.Geometry);

   PROCEDURE Visibility(win: Window) : XDisplays.VisibilityState;

   PROCEDURE ChangeProperty(win: Window;
                            property: XDisplays.Property;
			    mode: XDisplays.PropertyChangeMode) : BOOLEAN;

   PROCEDURE CreateGContext(VAR gc: GContext;
		xdisplay: XDisplays.Display;
		drawable: Drawable;
		gcats: XDisplays.GraphicalContextAttributes) : BOOLEAN;

   PROCEDURE SetGContext(drawable: Drawable;
                         gc: GContext);
   PROCEDURE GetGContext(drawable: Drawable;
                         VAR gc: GContext);
   PROCEDURE SaveGContext(drawable: Drawable);
   PROCEDURE RestoreGContext(drawable: Drawable);
   PROCEDURE ChangeGContext(drawable: Drawable;
                            ats: XDisplays.GraphicalContextAttributes);

   PROCEDURE OpenFont(VAR font: Font; display: XDisplays.Display;
                      name: ARRAY OF CHAR) : BOOLEAN;
   PROCEDURE CloseFont(font: Font);

   PROCEDURE ParseColor(drawable: Drawable;
                        name: ARRAY OF CHAR) : XColors.Color;
   PROCEDURE SetCapStyle(drawable: Drawable;
                         capStyle: XDisplays.CapStyle);
   PROCEDURE SetLineWidth(drawable: Drawable;
                          lineWidth: INTEGER);
   PROCEDURE SetLineStyle(drawable: Drawable;
                          lineStyle: XDisplays.LineStyle);
   PROCEDURE SetForeground(drawable: Drawable;
                           color: XColors.Color);
   PROCEDURE SetBackground(drawable: Drawable;
                           color: XColors.Color);
   PROCEDURE SetFont(drawable: Drawable; font: Font);
   PROCEDURE SetNamedFont(drawable: Drawable;
                          fontname: ARRAY OF CHAR);
   PROCEDURE SetDashes(drawable: Drawable;
                       dashOffset, len1, len2: INTEGER);
   PROCEDURE SetDashes2(drawable: Drawable;
                        dashOffset, len1, len2, len3, len4: INTEGER);

   PROCEDURE Clear(win: Window) : BOOLEAN;
   PROCEDURE ClearArea(win: Window;
                       x, y: INTEGER;
		       width, height: INTEGER;
		       exposures: BOOLEAN) : BOOLEAN;

   PROCEDURE ConfigureWindow(win: Window;
		    ats: XDisplays.ConfigureWindowParameters) : BOOLEAN;
   PROCEDURE ConfigureWindowSize(win: Window;
                             width, height: INTEGER) : BOOLEAN;

   PROCEDURE FillPoly(drawable: Drawable;
		      shape: XDisplays.Shape;
		      coordinateMode: XDisplays.CoordinateMode;
		      points: XDisplays.ListOfPoints) : BOOLEAN;
   PROCEDURE PolyArc(drawable: Drawable;
		     arcs: XDisplays.ListOfArcs) : BOOLEAN;
   PROCEDURE PolyLine(drawable: Drawable;
		      coordinateMode: INTEGER;
		      points: XDisplays.ListOfPoints) : BOOLEAN;
   PROCEDURE PolyPoint(drawable: Drawable;
		       coordinateMode: INTEGER;
		       points: XDisplays.ListOfPoints) : BOOLEAN;
   PROCEDURE WriteString(drawable: Drawable;
                         x, y: INTEGER;
			 text: ARRAY OF CHAR) : BOOLEAN;

END XResources.
