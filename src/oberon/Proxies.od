(* Ulm's Oberon Library
   Copyright (C) 1989-2004 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: Proxies.od,v 1.1 2004/08/27 15:24:29 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: Proxies.od,v $
   Revision 1.1  2004/08/27 15:24:29  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

DEFINITION Proxies;

   IMPORT Objects, Services;

   (* support of proxies to _local_ objects;
      see RemoteObjects for proxy objects to remote objects
   *)

   TYPE
      CreateProxyProc = PROCEDURE (VAR object: Services.Object;
                                   orig: Services.Object);
      InitProxyProc = PROCEDURE (object: Services.Object;
                                 orig: Services.Object);
      Interface = POINTER TO InterfaceRec;
      InterfaceRec =
	 RECORD
	    (Objects.ObjectRec)
	    createProxy: CreateProxyProc;
	    initProxy: InitProxyProc;
	 END;
      
   PROCEDURE Register(type: Services.Type; if: Interface);
   PROCEDURE Supported(type: Services.Type) : BOOLEAN;
   PROCEDURE GetSupportedBaseType(type: Services.Type;
                                  VAR baseType: Services.Type);

   PROCEDURE CreateProxy(VAR proxy: Services.Object;
                         orig: Services.Object);

   PROCEDURE CreateUninitializedProxy(VAR proxy: Services.Object;
                                      orig: Services.Object);
   PROCEDURE InitializeAllInterfacesUpTo(proxy: Services.Object;
                                         type: Services.Type);
      (* includes all interfaces from the basetype up to and
	 _including_ type
      *)
   PROCEDURE InitializeAllInterfacesBeyond(proxy: Services.Object;
                                           type: Services.Type);

   PROCEDURE GetOrig(proxy: Services.Object; VAR orig: Services.Object);

END Proxies.
