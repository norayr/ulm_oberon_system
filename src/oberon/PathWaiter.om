(* Ulm's Oberon Library
   Copyright (C) 1989-2004 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id$
   ----------------------------------------------------------------------------
   $Log$
   ----------------------------------------------------------------------------
*)

MODULE PathWaiter;

   IMPORT Args := UnixArguments, Conclusions, Conditions, Errors,
      LoaderErrors, Names, PathConditions, Paths, PersistentObjects,
      PrivateShards, Process, RelatedEvents, RemoteCDBNames,
      RemoteCommandNodes, Services, Shards, Streams, UnixFiles, UnixNames;

   VAR
      lidType: Services.Type;
      errors: RelatedEvents.Object;
      auth: Shards.Lid;
      path: ARRAY 512 OF CHAR;

   PROCEDURE CreateLid(VAR lid: Shards.Lid; filename: ARRAY OF CHAR);
      VAR
	 s: Streams.Stream;
   BEGIN
      IF ~UnixFiles.Open(s, filename, UnixFiles.read, Streams.onebuf,
			 errors) THEN
	 Conclusions.Conclude(errors, Errors.fatal, "");
      END;
      RelatedEvents.Forward(s, errors);
      IF ~PersistentObjects.GuardedRead(s, lidType, lid) THEN
	 Conclusions.Conclude(errors, Errors.fatal, filename);
      END;
   END CreateLid;

   PROCEDURE ProcessArgs;
      VAR
	 flag: CHAR;
	 filename: ARRAY 512 OF CHAR;
   BEGIN
      auth := NIL;
      Args.Init("[-a auth] path");
      WHILE Args.GetFlag(flag) DO
	 CASE flag OF
	 | "a":
	    Args.FetchString(filename);
	    CreateLid(auth, filename);
	 ELSE
	    Args.Usage;
	 END;
      END;
      Args.FetchString(path);
      Args.AllArgs;
   END ProcessArgs;

   PROCEDURE WaitFor(path: ARRAY OF CHAR);
      VAR
	 condition: PathConditions.Condition;
	 node: Names.Node;
   BEGIN
      PathConditions.Create(condition, path, Names.root, auth);
      IF ~PathConditions.GetNode(condition, node, errors) THEN
	 Conclusions.Conclude(errors, Errors.fatal, path);
      END;
   END WaitFor;

BEGIN
   Services.SeekType("Shards.Lid", lidType);
   NEW(errors); RelatedEvents.QueueEvents(errors);
   ProcessArgs;
   WaitFor(path);
   Process.TerminateSoftly;
END PathWaiter.
