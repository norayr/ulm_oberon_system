(* Ulm's Oberon Library
   Copyright (C) 1989-1998 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: CompilerKey.od,v 1.1 1998/09/25 07:48:36 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: CompilerKey.od,v $
   Revision 1.1  1998/09/25 07:48:36  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

DEFINITION CompilerKeys;

   IMPORT Architectures, ConstStrings, Iterators, Keys,
      PersistentDisciplines, PersistentObjects, Streams, Times, Types;

   TYPE
      Value = POINTER TO ValueRec;
      ValueRec =
	 RECORD
	    (PersistentObjects.ObjectRec)
	    time: Times.Time; (* date of creation *)
	    unique1, unique2: INTEGER; (* hopefully unique *)
	 END;
      Key = POINTER TO KeyRec;
      KeyRec =
	 RECORD
	    (Keys.ValueRec)
	    modname: ConstStrings.String;
	    defsrcid, modsrcid: ConstStrings.String;
	    genkey: Value;
	    arch: Architectures.Architecture;
	    archkey: Value;
	 END;
      Set = POINTER TO SetRec;
      SetRec = RECORD (PersistentDisciplines.ObjectRec) END;
   VAR
      key: Keys.Key; (* for Key *)

   PROCEDURE CreateValue(VAR value: Value);
      (* creates value and initializes time, unique1 and unique2 *)

   PROCEDURE Create(VAR key: Key; modname: ConstStrings.String);
   PROCEDURE CreateCopy(VAR key: Key; orig: Key);

   PROCEDURE ValueToString(value: Value; VAR string: ConstStrings.String);
   PROCEDURE StringToValue(string: Streams.Stream; VAR value: Value);

   PROCEDURE CreateSet(VAR set: Set);
   PROCEDURE CreateSetCopy(VAR set: Set; orig: Set);
   PROCEDURE Incl(set: Set; key: Key);
   PROCEDURE InclSet(set, keys: Set);
   PROCEDURE Union(VAR set: Set; set1, set2: Set);
   PROCEDURE Lookup(set: Set; modname: ConstStrings.String;
                    VAR key: Key) : BOOLEAN;
   PROCEDURE GetKeys(set: Set; VAR it: Iterators.Iterator);
   PROCEDURE Compatible(set1, set2: Set) : BOOLEAN;
   PROCEDURE CompatibleWith(key: Key; set: Set) : BOOLEAN;
   PROCEDURE CombineKeys(key1: Key; key2: Key; VAR combined: Key) : BOOLEAN;

END CompilerKeys.
