(* Ulm's Oberon Library
   Copyright (C) 1989-1996 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: Transaction.od,v 1.2 1996/11/28 11:02:59 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: Transaction.od,v $
   Revision 1.2  1996/11/28  11:02:59  borchert
   Mode renamed to AccessSpecification

   Revision 1.1  1996/11/20  18:07:04  borchert
   Initial revision

   ----------------------------------------------------------------------------
   initial idea and manual page developed by Werner Stanglow
   ----------------------------------------------------------------------------
*)

DEFINITION Transactions;

   IMPORT ConstStrings, Events, Iterators, Objects, PersistentDisciplines,
      Shards, Services;

   TYPE
      Transaction = POINTER TO TransactionRec;
      TransactionRec = RECORD (Services.ObjectRec) END;
      Object = Services.Object;

   TYPE
      AccessSpecification = PersistentDisciplines.Object;

   CONST
      defined = 0; begun = 1; committed = 2; aborted = 3;
   TYPE
      State = SHORTINT; (* defined..aborted *)

   TYPE
      AttachProc = PROCEDURE (trans: Transaction; auth: Shards.Lid;
			      obj: Object; aspec: AccessSpecification) : BOOLEAN;
      AttachedProc = PROCEDURE (trans: Transaction; auth: Shards.Lid;
				obj: Object) : BOOLEAN;
      GetAttachedProc = PROCEDURE (trans: Transaction;
				   auth: Shards.Lid;
				   VAR it: Iterators.Iterator) : BOOLEAN;
      TransProc = PROCEDURE (trans: Transaction;
			     auth: Shards.Lid) : BOOLEAN;
      GetStateProc = PROCEDURE (trans: Transaction; auth: Shards.Lid;
				VAR state: State) : BOOLEAN;
      GetNameProc = PROCEDURE (trans: Transaction; auth: Shards.Lid;
			       VAR name: ConstStrings.String) : BOOLEAN;
      TakeInterestProc =
	 PROCEDURE (trans: Transaction; auth: Shards.Lid;
		    VAR eventType: Events.EventType) : BOOLEAN;
      Interface = POINTER TO InterfaceRec;
      InterfaceRec =
	 RECORD
	    (Objects.ObjectRec);
	    attach: AttachProc;
	    attachable: AttachProc;
	    attached: AttachedProc;
	    getAttached: GetAttachedProc;
	    begin: TransProc;
	    commit: TransProc;
	    abort: TransProc;
	    release: TransProc;
	    getState: GetStateProc;
	    getName: GetNameProc;
	    takeInterest: TakeInterestProc;
	 END;

   TYPE
      (* these events are raised (if requested only) *after*
         the indicated state transition
      *)
      Event = POINTER TO EventRec;
      EventRec =
	 RECORD
	    (Events.EventRec)
	    state: State; (* begun, committed, or aborted *)
	    trans: Transaction;
	 END;

   CONST
      beginFailed = 0; commitFailed = 1; abortFailed = 2;
      attachFailed = 3; releaseFailed = 4;
      errors = 5;
   TYPE
      ErrorCode = SHORTINT; (* beginFailed..releaseFailed *)
      ErrorEvent = POINTER TO ErrorEventRec;
      ErrorEventRec =
      RECORD
	 (Events.EventRec);
	 errcode: ErrorCode;
	 trans: Transaction;
      END;
   VAR
      error: Events.EventType;
      errormsg: ARRAY errors OF Events.Message;

   PROCEDURE Init(trans: Transaction; if: Interface);
   PROCEDURE Release(trans: Transaction; auth: Shards.Lid) : BOOLEAN;

   (* defining and examining the set of attached objects *)
   PROCEDURE Attach(trans: Transaction; auth: Shards.Lid;
		    obj: Object; aspec: AccessSpecification) : BOOLEAN;
   PROCEDURE Attached(trans: Transaction; auth: Shards.Lid;
		      obj: Object) : BOOLEAN;
   PROCEDURE Attachable(trans: Transaction; auth: Shards.Lid;
			obj: Object; aspec: AccessSpecification) : BOOLEAN;
   PROCEDURE GetAttached(trans: Transaction; auth: Shards.Lid;
			 VAR it: Iterators.Iterator) : BOOLEAN;

   (* transaction primitives *)
   PROCEDURE Begin(trans: Transaction; auth: Shards.Lid) : BOOLEAN;
   PROCEDURE Commit(trans: Transaction; auth: Shards.Lid) : BOOLEAN;
   PROCEDURE Abort(trans: Transaction; auth: Shards.Lid) : BOOLEAN;

   (* further requests *)
   PROCEDURE GetState(trans: Transaction; auth: Shards.Lid;
		      VAR state: State) : BOOLEAN;
   PROCEDURE GetName(trans: Transaction; auth: Shards.Lid;
		     VAR name: ConstStrings.String) : BOOLEAN;
   PROCEDURE TakeInterest(trans: Transaction;
                          auth: Shards.Lid;
			  VAR eventType: Events.EventType) : BOOLEAN;

END Transactions.
