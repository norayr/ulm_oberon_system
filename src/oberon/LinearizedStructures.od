(* Ulm's Oberon Library
   Copyright (C) 1989-1994 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: LinearizedS.od,v 1.2 1998/03/24 22:54:57 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: LinearizedS.od,v $
   Revision 1.2  1998/03/24  22:54:57  borchert
   error typeGuardFailure added

   Revision 1.1  1996/01/04  16:46:34  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

DEFINITION LinearizedStructures;

   IMPORT Events, PersistentObjects, Services, Streams;

   (* save or load data structures which may contain cycles simply
      by replacing PersistentObjects.Read by LinearizedStructures.Read
      and PersistentObjects.Write by LinearizedStructures.Write
   *)

   TYPE
      Object = PersistentObjects.Object;

   CONST
      missingReset = 0; (* Reset must be called before switching mode *)
      cannotReadHeader = 1; (* failed to read object header *)
      invalidHeader = 2; (* corrupted/invalid object header *)
      cannotReadObject = 3; (* failed to read object *)
      unknownKey = 4; (* unknown key encountered *)
      cannotWriteHeader = 5; (* failed to write object header *)
      cannotWriteObject = 6; (* failed to write object *)
      typeGuardFailure = 7;
      errors = 8;
   TYPE
      ErrorCode = SHORTINT; (* missingReset.. *)
      ErrorEvent = POINTER TO ErrorEventRec;
      ErrorEventRec =
	 RECORD
	    (Events.EventRec)
	    errorcode: ErrorCode;
	 END;
   VAR
      error: Events.EventType;
      errormsg: ARRAY errors OF Events.Message;

   PROCEDURE Reset(s: Streams.Stream);
      (* restart saving/loading of persistent data from the given stream *)

   PROCEDURE Read(s: Streams.Stream; VAR object: Object) : BOOLEAN;
   PROCEDURE Write(s: Streams.Stream; object: Object) : BOOLEAN;

   PROCEDURE GuardedRead(s: Streams.Stream; guard: Services.Type;
			 VAR object: Object) : BOOLEAN;

END LinearizedStructures.
