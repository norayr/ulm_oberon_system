(* Ulm's Oberon Library
   Copyright (C) 1989-1996 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or(at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: StandardCon.od,v 1.4 1996/11/28 10:58:09 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: StandardCon.od,v $
   Revision 1.4  1996/11/28  10:58:09  borchert
   - ElementsT..FindT removed
   - Container.Dir constants removed
   - Close..Forget removed
   - att renamed to insertpos and more meaningful type names
     than just SHORTINT given
   - error codes exported
   - no-parameter of Open removed

   Revision 1.3  1996/11/22  16:11:42  borchert
   debugging procedures removed

   Revision 1.2  1996/11/22  16:10:49  borchert
   formatting changed

   Revision 1.1  1996/11/22  10:37:19  borchert
   Initial revision

   ----------------------------------------------------------------------------
   original version is due to Werner Stanglow
   ----------------------------------------------------------------------------
*)

DEFINITION StandardContainers;

   IMPORT Containers, Events, RelatedEvents, Services, Streams;

   CONST
      usecurrent = 0;
      usestripped = 1;
      usefree = 2;
      useothercurrent = 3;
      useotherstripped = 4;
      useotherfree = 5;
      usenew = 6;
      usedefault = 7;
   TYPE
      AllocStrat = SHORTINT; (* usecurrent..usedefault *)

   CONST
      usestrippedslot = 0;
      usefreeslot = 1;
      usenewslot  = 2;
      usedefaultslot = 3;
   TYPE
      SlotStrat = SHORTINT; (* usestrippedslot..usedefaultslot *)
     
   CONST
      unsupportedStream = 0; (* stream does not support ObjectTransactions *)
      invalidContainer = 1; (* no container found on data stream *)
      containerInAutoMode = 2; (* transaction ops not permitted *)
      invalidTransaction = 3; (* container not member of given transaction *)
      fatalIOError = 4; (* I/O error on underlying stream *)
      transStreamOpFailed = 5; (* transaction op on data stream failed *)
      persFailure = 6; (* operation of PersistentObjects failed *)
      objectTooLarge = 7; (* object is too large *)
      outOfSpace = 8; (* unable to allocate new object *)
      tooManyObjects = 9; (* too many objects *)
      objectIsNIL = 10; (* container objects must not be NIL *)
      noSuchIdent = 11; (* invalid ID was given *)
      noAnchorDefined = 12; (* no anchor defined yet *)
      errors = 13;
   TYPE
      ErrorCode = SHORTINT;
      ErrorEvent = POINTER TO ErrorEventRec;
      ErrorEventRec =
         RECORD
            (Events.EventRec);
            errcode: ErrorCode;
         END;
   VAR
      error: Events.EventType;
      errormsg: ARRAY errors OF Events.Message;

   PROCEDURE Open(VAR container: Containers.Container;
                  data: Streams.Stream;
                  auto: BOOLEAN;
		  errors: RelatedEvents.Object) : BOOLEAN;

   PROCEDURE SetTries(cont: Containers.Container; tries: SHORTINT);
   PROCEDURE SetAllocStrat(cont: Containers.Container;
                           insertpos, mode: AllocStrat);
   PROCEDURE SetSlotStrat(cont: Containers.Container;
                          insertpos, mode: SlotStrat);
      
END StandardContainers.
