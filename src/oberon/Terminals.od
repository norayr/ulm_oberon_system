(* Ulm's Oberon Library
   Copyright (C) 1989-2004 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: Terminals.od,v 1.1 2004/06/11 12:12:00 borchert Exp borchert $
   ----------------------------------------------------------------------------
   $Log: Terminals.od,v $
   Revision 1.1  2004/06/11 12:12:00  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

DEFINITION Terminals; (* Ralf Beck *)

   (* this module provides some basic procedures for *)
   (* managing ASCII-terminals                       *)

   IMPORT Disciplines, Events, Objects, Streams;

   CONST 
      (* terminal characteristics *)
      autoleftmargin = 0;  (* terminal wraps from last column to first column
                              of next line if character is typed *)
      autorightmargin = 1; (* backspace in first column moves cursor to
                              last column of previous line *)
      overstrikes = 2;     (* terminal overstrikes characters rather than 
                              replacing them *)
      safelastcolumn = 3;  (* safe to write character in last column *)
     
      (* errorcodes *)
      cannotSetEcho = 0;
      cannotSetTermMode = 1;
      cannotSetCursor = 2;
      cannotMoveCursor = 3;
      cannotSetAppearance = 4;
      cannotScroll = 5;
      cannotSetScrollRegion = 6;
      cannotClearScreen = 7;
      invalidDirection = 8;
      invalidRegion = 9;
      invalidPosition = 10;
      notSupported = 11;

      errorcodes = 12;

      (* echo *)
      on = 0; off = 1;
      (* terminal modes *)
      raw = 0; cooked = 1;
      (* directions *)
      forward = 0; reverse = 1;
      (* cursor shapes *)
      visible = 0; invisible = 1;

      (* capabilities *)
      setEcho = 0;
      setTermMode = 1;
      setCursor = 2;
      moveCursor = 3;
      setAppearance = 4;
      scroll = 5;
      setScrollRegion = 6;
      clearScreen = 7;

   TYPE 
      CapabilitySet = SET;
      EchoMode = SHORTINT;
      TermMode = SHORTINT;
      Direction = SHORTINT;
      Shape = SHORTINT;

      Stream = POINTER TO StreamRec;

      WindowChangeEvent = POINTER TO WindowChangeEventRec;
      WindowChangeEventRec =
	 RECORD
	    (Events.EventRec)
	    stream: Streams.Stream;
	    newlines, newcolumns: INTEGER;
         END;

      InterruptEvent = POINTER TO InterruptEventRec;
      InterruptEventRec =
	 RECORD
	    (Events.EventRec)
	    stream: Streams.Stream;
         END;

      QuitEvent = POINTER TO QuitEventRec;
      QuitEventRec =
	 RECORD
	    (Events.EventRec)
	    stream: Streams.Stream;
         END;

      HangupEvent = POINTER TO HangupEventRec;
      HangupEventRec =
	 RECORD
	    (Events.EventRec)
	    stream: Streams.Stream;
         END;

      ErrorEvent = POINTER TO ErrorEventRec;
      ErrorEventRec = 
         RECORD
           (Events.EventRec)
           errorcode: SHORTINT;
         END;

     (* interface procedures *)

      SetTermModeProc = PROCEDURE (s: Streams.Stream; mode: TermMode);
      SetEchoProc = PROCEDURE (s: Streams.Stream; mode: EchoMode);
      SetCursorProc = PROCEDURE (s: Streams.Stream; line, column: INTEGER);
      MoveCursorProc = PROCEDURE(s: Streams.Stream; fromline, fromcolumn,
						    toline, tocolumn: INTEGER);
      SetAppearanceProc = PROCEDURE(s: Streams.Stream; shape: Shape);
      ScrollProc = PROCEDURE(s: Streams.Stream; dir: Direction);
      SetScrollRegionProc = PROCEDURE(s: Streams.Stream; top, bottom: INTEGER);
      ClearProc = PROCEDURE(s: Streams.Stream);

      Interface = POINTER TO InterfaceRec;
      InterfaceRec =
         RECORD
            (Objects.ObjectRec)
            setEcho: SetEchoProc;
            setTermMode: SetTermModeProc;
            setCursor: SetCursorProc;
            moveCursor: MoveCursorProc;
            setAppearance: SetAppearanceProc;
            scroll: ScrollProc;
            setScrollRegion: SetScrollRegionProc;
	    clearScreen: ClearProc;
         END;

      Status =
	 RECORD
            (Objects.ObjectRec)
            lines, columns: INTEGER;      (* of physical screen    *)
            scrtop, scrbottom: INTEGER;   (* start & end of scroll region *)
            echo: EchoMode;               (* on or off             *)
            mode: TermMode;               (* raw or cooked         *)
            characteristics: SET;         (* of terminal characteristics *)
            scrollDirections: SET;        (* up, down *)
            cursorShape: Shape;           (* current shape of cursor *)
         END;

      StreamRec = 
         RECORD
            (Streams.StreamRec)
         END;

   VAR 
      console: Streams.Stream;  (* terminal the user logged in *)
      windowchanged: Events.EventType; (* size of display changed *)
      interrupt: Events.EventType; (* interrupt key pressed *)
      quit: Events.EventType; (* quit key pressed *)
      hangup: Events.EventType; (* terminal line hung up *)
      error: Events.EventType;  
      errormsg: ARRAY errorcodes OF Events.Message;

   (* ==================== public procedures ========================== *)

   PROCEDURE Init(s: Stream; status: Status; caps: CapabilitySet; 
                  if: Interface);

   (* ------------ client procedures --------------------------*)

   PROCEDURE ClearScreen(s: Streams.Stream);
      (* clears the screen *)

   PROCEDURE Echo(s: Streams.Stream; mode: EchoMode);
      (* turns echoing of characters on or off *)
 
   PROCEDURE SetTermMode(s: Streams.Stream; mode: TermMode);
      (* set s's mode to raw or cooked *)

   PROCEDURE SetCursor(s: Streams.Stream; line, column: INTEGER);
      (* set cursor absolute to (line, column)    *)
      (* position must fit within screen limits   *)

   PROCEDURE MoveCursor(s: Streams.Stream; 
                        fromline, fromcolumn,
                        toline, tocolumn: INTEGER);
      (* move cursor relative to current position *)
      (* must be within screen limits             *)

   PROCEDURE CursorAppearance(s: Streams.Stream; shape: Shape);
      (* make cursor visible or invisible *)

   PROCEDURE Scroll(s: Streams.Stream; dir: Direction);
      (* scroll scrollregion once in direction (dir) *)

   PROCEDURE SetScrollRegion(s: Streams.Stream; top, bottom: INTEGER);
      (* set scrollregion (from) line#1 (to) line#2 *)                          
                                             
   PROCEDURE Capabilities(s: Streams.Stream): CapabilitySet;
      (* return s's capabilities *)

   PROCEDURE GetStatus(s: Streams.Stream; VAR status: Status);
      (* return s's status *)

END Terminals.
