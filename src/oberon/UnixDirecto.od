(* Ulm's Oberon Library
   Copyright (C) 1989-1994 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: UnixDirecto.od,v 1.2 1995/01/04 16:59:06 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: UnixDirecto.od,v $
   Revision 1.2  1995/01/04  16:59:06  borchert
   assertion of Assertions replaced by real assertion

   Revision 1.1  1994/02/23  07:26:58  borchert
   Initial revision

   ----------------------------------------------------------------------------
   AFB 9/89
   ----------------------------------------------------------------------------
*)

DEFINITION UnixDirectories;

   IMPORT Events, RelatedEvents, Streams;

   CONST
      dirsize = 255;		(* maximal file name length in directory *)
      namelength = dirsize+1;	(* inclusive 0X *)

   TYPE
      FileName = ARRAY namelength OF CHAR;
      Inode = LONGINT;		(* 0..65535 *)
      Entry =
	 RECORD
	    inode: Inode;
	    padd : LONGINT;
	    name: FileName;
	 END;
      Stream = POINTER TO StreamRec;
      StreamRec = RECORD (Streams.StreamRec) END;

   PROCEDURE Open(VAR dir: Streams.Stream; dirname: ARRAY OF CHAR;
		  errors: RelatedEvents.Object) : BOOLEAN;
      (* open directory `dirname' for reading;
	 `dirname' must be 0X-terminated;
	 `dir' becomes an unbuffered stream of type Directory;
	 positions in the sense of Streams.Seek and Streams.Tell 
	 are not necessarily byte positions;
	 Open returns FALSE if `dirname' cannot be opened
      *)

END UnixDirectories.
