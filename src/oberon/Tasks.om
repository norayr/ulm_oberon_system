(* Ulm's Oberon Library
   Copyright (C) 1989-1994 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: Tasks.om,v 1.4 2004/05/21 08:09:21 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: Tasks.om,v $
   Revision 1.4  2004/05/21 08:09:21  borchert
   Disconnect added (as alternative to Terminate)

   Revision 1.3  1995/02/07 09:41:37  borchert
   - tasks events removed
   - default task group added
   - Select & associated optimizations added

   Revision 1.2  1994/07/05  13:02:15  borchert
   bug fix: Dispatch assigned too early Coroutines.current to scheduler.cr

   Revision 1.1  1994/02/23  08:04:52  borchert
   Initial revision

   ----------------------------------------------------------------------------
   AFB 12/91
   ----------------------------------------------------------------------------
*)

MODULE Tasks;

   IMPORT Conditions, Coroutines, Disciplines, Events, Priorities,
      RelatedEvents, Resources, SYS := SYSTEM;

   CONST
      taskGroupMismatch = 0; (* task and task group do not match *)
      dispatchTerminatedTask = 1; (* try to reactive terminated task *)
      wrongScheduler = 2; (* try to dispatch a task by a foreign scheduler *)
      invalidSet = 3; (* setOfTrueConditions was NIL *)
      errorcodes = 4;
   TYPE
      ErrorEvent = POINTER TO ErrorEventRec;
      ErrorEventRec =
	 RECORD
	    (Events.EventRec)
	    errorcode: SHORTINT;
	 END;
   VAR
      errormsg: ARRAY errorcodes OF Events.Message;
      error: Events.EventType;
	 (* raised on errorneous task operations;
	    ignored by default
	 *)

   TYPE
      Task = POINTER TO TaskRec;
      TaskGroup = POINTER TO TaskGroupRec;
      (* a task is a group of coroutines which share some properties
	 and is represented by one of the coroutines
      *)
      TaskRec =
	 RECORD
	    (Disciplines.ObjectRec)
	    (* private part *)
	    cr: Coroutines.Coroutine; (* switch to this cr to reactive
					 this task
				      *)
	    group: TaskGroup;
	    psys: Events.PrioritySystem;
	    (* in parameters of Dispatch *)
	    setOfTrueConditions: Conditions.ConditionSet;
	    (* out parameters of Dispatch *)
	    code: SHORTINT; conditionSet: Conditions.ConditionSet;
	 END;

   TYPE
      TaskGroupRec =
	 RECORD
	    (Disciplines.ObjectRec)
	    scheduler: Task;
	 END;
	 (* a group of tasks is maintained by a scheduler
	    which itself acts as a task
	 *)
   CONST
      (* codes returned by the dispatch procedure *)
      terminate = 0; suspend = 1; waitfor = 2;

   TYPE
      CreateProc = PROCEDURE (VAR task: Task; cr: Coroutines.Coroutine);

   VAR
      currentTask: Task;
      currentGroup: TaskGroup;
      firstTask: BOOLEAN;
      createp: CreateProc;

   PROCEDURE InitErrors;
   BEGIN
      errormsg[taskGroupMismatch] := "task and task group do not match";
      errormsg[dispatchTerminatedTask] := "try to reactive terminated task";
      errormsg[wrongScheduler] :=
	 "try to dispatch a task by a foreign scheduler";
      errormsg[invalidSet] :=
	 "unexpected empty set of ready conditions";
      Events.Define(error);
      Events.SetPriority(error, Priorities.liberrors);
      Events.Ignore(error);
   END InitErrors;

   PROCEDURE Error(tg: TaskGroup; code: SHORTINT);
      VAR
	 event: ErrorEvent;
   BEGIN
      NEW(event);
      event.type := error;
      event.message := errormsg[code];
      event.errorcode := code;
      RelatedEvents.Raise(tg, event);
   END Error;

   PROCEDURE Current() : Task;
   BEGIN RETURN currentTask END Current;

   PROCEDURE CurrentGroup() : TaskGroup;
   BEGIN RETURN currentGroup END CurrentGroup;

   PROCEDURE Init(task: Task; cr: Coroutines.Coroutine; tg: TaskGroup);
      (* initialize task which is represented by the already
	 existing coroutine cr;
	 task is added to the given task group
      *)
   BEGIN
      task.cr := cr;
      task.group := tg;
      IF firstTask THEN
	 firstTask := FALSE;
	 task.psys := Events.CurrentPrioritySystem();
      ELSE
	 Events.CreatePrioritySystem(task.psys);
      END;
      task.code := suspend;
      task.conditionSet := NIL;
   END Init;

   PROCEDURE Dispatch(tg: TaskGroup; task: Task;
		      setOfTrueConditions: Conditions.ConditionSet;
		      VAR code: SHORTINT;
		      VAR conditionSet: Conditions.ConditionSet);
      (* conditionSet is of interest if code equals waitfor;
	 setOfTrueConditions must be # NIL if the previous code was waitfor
      *)
      VAR
	 scheduler: Task;
   BEGIN
      code := 0; conditionSet := NIL; (* defaults for error case *)
      IF currentTask # tg.scheduler THEN
	 Error(tg, wrongScheduler); RETURN
      END;
      IF task.group # tg THEN
	 Error(tg, taskGroupMismatch); RETURN
      END;
      IF task.code = terminate THEN
	 Error(tg, dispatchTerminatedTask); RETURN
      END;
      IF (task.code = waitfor) & (setOfTrueConditions = NIL) THEN
	 Error(tg, invalidSet); RETURN
      END;
      scheduler := task.group.scheduler;
      task.setOfTrueConditions := setOfTrueConditions;

      (* task switch *)
      Events.SwitchPrioritySystem(task.psys);
      scheduler.cr := Coroutines.current; (* must be one of the last things! *)
      currentGroup := task.group;
      currentTask := task;
      SYS.CRSWITCH(task.cr);
      currentGroup := scheduler.group;
      currentTask := scheduler;
      Events.SwitchPrioritySystem(currentTask.psys);

      (* return values *)
      code := task.code;
      conditionSet := task.conditionSet;
   END Dispatch;

   PROCEDURE InitGroup(tg: TaskGroup);
      (* the current task declares itself to be a scheduler of
	 a new task group which is initially empty
      *)
   BEGIN
      tg.scheduler := currentTask;
   END InitGroup;

   PROCEDURE GeneralSuspend(code: SHORTINT;
			    conditionSet: Conditions.ConditionSet;
			    VAR setOfTrueConditions: Conditions.ConditionSet);
      VAR
	 scheduler: Task;
   BEGIN
      currentTask.code := code;
      currentTask.conditionSet := conditionSet;

      (* the coroutine may have changed, i.e. if a task consists
	 of more than one coroutine
      *)
      currentTask.cr := Coroutines.current;

      scheduler := currentTask.group.scheduler;
      IF scheduler # NIL THEN
	 SYS.CRSWITCH(scheduler.cr);
	 setOfTrueConditions := currentTask.setOfTrueConditions;
      ELSE
	 CASE code OF
	 | terminate:   HALT(0);
	 | suspend:     RETURN
	 | waitfor:     Conditions.WaitFor(conditionSet,
				   setOfTrueConditions, currentTask);
	 END;
      END;
   END GeneralSuspend;

   PROCEDURE Suspend;
      (* suspend the current task in the hope to become active again *)
      VAR
	 setOfTrueConditions: Conditions.ConditionSet;
   BEGIN
      GeneralSuspend(suspend, NIL, setOfTrueConditions);
   END Suspend;

   PROCEDURE Select(conditionSet: Conditions.ConditionSet;
		    VAR setOfTrueConditions: Conditions.ConditionSet);
   BEGIN
      GeneralSuspend(waitfor, conditionSet, setOfTrueConditions);
   END Select;

   PROCEDURE WaitForOneOf(conditionSet: Conditions.ConditionSet);
      (* wait for the given condition which is passed to the scheduler *)
      VAR
	 setOfTrueConditions: Conditions.ConditionSet;
   BEGIN
      GeneralSuspend(waitfor, conditionSet, setOfTrueConditions);
   END WaitForOneOf;

   PROCEDURE WaitFor(condition: Conditions.Condition);
      VAR
	 conditionSet: Conditions.ConditionSet;
	 setOfTrueConditions: Conditions.ConditionSet;
   BEGIN
      Conditions.CreateSet(conditionSet);
      Conditions.Incl(conditionSet, condition);
      GeneralSuspend(waitfor, conditionSet, setOfTrueConditions);
   END WaitFor;

   PROCEDURE Terminate;
      (* terminate the current task *)
      VAR
	 setOfTrueConditions: Conditions.ConditionSet;
	 false: BOOLEAN;
   BEGIN
      false := FALSE;
      GeneralSuspend(terminate, NIL, setOfTrueConditions);
      (* do not allow this coroutine to be continued *)
      ASSERT(false);
   END Terminate;

   PROCEDURE Disconnect;
      (* disconnect the current coroutine from its task *)
      VAR
	 setOfTrueConditions: Conditions.ConditionSet;
   BEGIN
      GeneralSuspend(terminate, NIL, setOfTrueConditions);
   END Disconnect;

   PROCEDURE Create(VAR task: Task; cr: Coroutines.Coroutine);
      (* create a new task which will be added to
	 a default task group
      *)
   BEGIN
      ASSERT(createp # NIL);
      createp(task, cr);
   END Create;

   PROCEDURE SetupDefaultGroup(create: CreateProc);
      (* must be called once to support Create *)
   BEGIN
      ASSERT(create # NIL);
      IF createp = NIL THEN
	 createp := create;
      END;
   END SetupDefaultGroup;

BEGIN
   createp := NIL;
   NEW(currentGroup); currentGroup.scheduler := NIL;
   firstTask := TRUE;
   NEW(currentTask); Init(currentTask, Coroutines.main, currentGroup);
   InitErrors;
END Tasks.
