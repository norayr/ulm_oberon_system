(* Ulm's Oberon Library
   Copyright (C) 1989-2005 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: XAuthority.od,v 1.2 2007/02/19 19:51:47 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: XAuthority.od,v $
   Revision 1.2  2007/02/19 19:51:47  borchert
   auth field added to event record for noMatchingEntryFound

   Revision 1.1  1994/07/13 07:06:00  borchert
   Initial revision

   ----------------------------------------------------------------------------
   AFB 11/91
   ----------------------------------------------------------------------------
*)

DEFINITION XAuthority;

   (* access X11 authorization file *)

   IMPORT Events, RelatedEvents;

   CONST
      (* family values taken from /usr/openwin/include/X11/{X.h,Xauth.h} *)
      familyInternet = 0;         (* corresponds to Sockets.afINET *)
      familyDECnet = 1;           (* corresponds to Sockets.afDECnet *)
      familyChaos = 2;            (* corresponds to Sockets.afCHAOS *)
      familyLocal = 256;          (* corresponds to Sockets.afUNIX *)
      familyWild = 65535;         (* matches any family *)
   TYPE
      Family = INTEGER;           (* one of familyXXX *)

   CONST
      maxfieldlen = 512;          (* maximal field length *)

   TYPE
      Field = POINTER TO FieldRec;
      String = ARRAY maxfieldlen OF CHAR;
      FieldRec =
	 RECORD
	    len: INTEGER;
	    string: String;
	 END;
      AuthRec =
	 RECORD
	    family: Family;
	    address: Field;
	    number: Field;
	    name: Field;
	    data: Field;
	 END;

   CONST
      authFileNotFound = 0; (* no authorization file found *)
      noMatchingEntryFound = 1; (* no matching entry found *)
      undefinedHome = 2; (* HOME is not defined in the environment *)
      errorcodes = 3;
   TYPE
      ErrorEvent = POINTER TO ErrorEventRec;
      ErrorEventRec =
	 RECORD
	    (Events.EventRec)
	    errorcode: SHORTINT;
	    (* in case of noMatchingEntryFound: *)
	    auth: AuthRec;
	 END;
   VAR
      error: Events.EventType;
      errormsg: ARRAY errorcodes OF Events.Message;

   PROCEDURE GetAuthByAddr(VAR auth: AuthRec;
			   errors: RelatedEvents.Object) : BOOLEAN;
      (* scan authorization file for an entry which matches
	 the family, the address, the number and the name of auth;
	 wildcards (i.e. familyWild or empty fields) matches anything;
	 on success the record is copied back to auth and TRUE is returned
      *)

END XAuthority.
