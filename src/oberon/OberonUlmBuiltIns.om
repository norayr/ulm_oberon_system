(* Ulm's Oberon Library
   Copyright (C) 1989-1998 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: OberonUlmBu.om,v 1.1 1998/03/29 08:05:47 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: OberonUlmBu.om,v $
   Revision 1.1  1998/03/29 08:05:47  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

MODULE OberonUlmBuiltIns;

   (* defines Ulm's extensions of SYSTEM *)

   IMPORT Args, BoolArgs, OberonBuiltIns, Procs := OberonUlmProcedures,
      Scopes, Sym := OberonSymbols, Types := OberonBaseTypes;

   PROCEDURE DefArgs(args: Args.Arguments);
      
      PROCEDURE Flag(name, help: ARRAY OF CHAR; default: BOOLEAN);
	 VAR
	    flag: BoolArgs.Value;
      BEGIN
	 Args.Define(args, name, 0X, BoolArgs.type, help);
	 BoolArgs.Create(flag, default); Args.SetValue(args, name, flag);
      END Flag;

   BEGIN
      Flag("sysaddress", "define SYSTEM.ADDRESS etc", TRUE);
      Flag("syshalt", "define SYSTEM.HALT", TRUE);
      Flag("sysint16", "define SYSTEM.INT16", TRUE);
      Flag("syscr", "include coroutines in SYSTEM", TRUE);
   END DefArgs;

   PROCEDURE Add(scope: Scopes.Scope; args: Args.Arguments);
      (* insert all standard constants, types, procedures and functions
	 into scope in dependence of args
      *)

      PROCEDURE Flag(flagname: ARRAY OF CHAR) : BOOLEAN;
	 VAR
	    flag: BoolArgs.Value;
      BEGIN
	 Args.GetValue(args, flagname, flag);
	 RETURN (flag # NIL) & flag.bool
      END Flag;

      PROCEDURE AddType(type: Sym.Type);
      BEGIN
	 ASSERT(type.ident # NIL);
	 OberonBuiltIns.AddIdent(scope, type.ident, args, "ulmsys");
      END AddType;

      PROCEDURE AddIdent(ident: Sym.Ident);
      BEGIN
	 OberonBuiltIns.AddIdent(scope, ident, args, "ulmsys");
      END AddIdent;

   BEGIN (* Add *)
      AddIdent(Procs.haltP);
      AddIdent(Procs.tasF);
      AddIdent(Procs.wclearP);
      AddIdent(Procs.wmoveP);

      IF Flag("sysaddress") THEN
	 AddType(Types.address);
	 AddType(Types.untracedAddress);
      END;
      IF Flag("sysint16") THEN
	 AddType(Types.int16);
      END;
      IF Flag("syshalt") THEN
	 AddIdent(Procs.haltP);
      END;

      IF Flag("syscr") THEN
	 AddType(Types.coroutine);
	 AddIdent(Procs.crspawnP);
	 AddIdent(Procs.crswitchP);
      END;
   END Add;

   PROCEDURE Init;
      VAR
	 if: OberonBuiltIns.Interface;
   BEGIN
      NEW(if); if.add := Add; if.defArgs := DefArgs;
      OberonBuiltIns.RegisterSet("ulmsys", if);
   END Init;

BEGIN
   Init;
END OberonUlmBuiltIns.
