(* Ulm's Oberon Library
   Copyright (C) 1989-2004 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: IPv4NameSys.om,v 1.3 2004/09/22 21:19:08 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: IPv4NameSys.om,v $
   Revision 1.3  2004/09/22 21:19:08  borchert
   Convert and error handling added

   Revision 1.2  2004/05/12 17:55:11  borchert
   byte orderung bug fixed in ImportFrom

   Revision 1.1  2004/03/30 12:21:52  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

MODULE IPv4NameSystems;

   (* import name systems using IPv4 addresses *)

   IMPORT DNSRecords, DNSResolvers, DNSStdResolvers, Errors, Events, InetTCP,
      IPv4Addresses, Names, NamesBootService, Networks, Read, RelatedEvents,
      StreamDisciplines, Streams, Strings, SYS := SYSTEM, Write;

   CONST
      errors = 6;
      colonExpected = 0;
      portExpected = 1;
      invalidPortNumber = 2;
      hostnameExpected = 3;
      unableToFindPort = 4;
      tooManyIndirections = 5;
   TYPE
      ErrorCode = SHORTINT; (* colonExpected.. *)
      ErrorEvent = POINTER TO ErrorEventRec;
      ErrorEventRec =
	 RECORD
	    (Events.EventRec)
	    errorcode: ErrorCode;
	    source: ARRAY 128 OF CHAR;
	 END;
   VAR
      error: Events.EventType;
      errormsg: ARRAY errors OF Events.Message;

   PROCEDURE WriteError(s: Streams.Stream; event: Events.Event);
   BEGIN
      WITH event: ErrorEvent DO
	 IF event.source # "" THEN
	    Write.StringS(s, event.source);
	    Write.StringS(s, ": ");
	 END;
	 Write.StringS(s, event.message);
      END;
   END WriteError;

   PROCEDURE InitErrorHandling;
   BEGIN
      errormsg[colonExpected] := "colon is missing";
      errormsg[portExpected] := "port number is missing";
      errormsg[invalidPortNumber] := "port number is out of range";
      errormsg[hostnameExpected] := "hostname is missing";
      errormsg[unableToFindPort] :=
	 "port was neither specified nor retrievable through DNS";
      errormsg[tooManyIndirections] :=
	 "too many indirections (TXT records in DNS)";
      Events.Define(error);
      Errors.AssignWriteProcedure(error, WriteError);
   END InitErrorHandling;

   PROCEDURE Error(errors: RelatedEvents.Object;
                   errorcode: ErrorCode;
		   source: ARRAY OF CHAR);
      VAR
	 event: ErrorEvent;
   BEGIN
      NEW(event);
      event.type := error;
      event.message := errormsg[errorcode];
      event.errorcode := errorcode;
      COPY(source, event.source);
      RelatedEvents.Raise(errors, event);
   END Error;

   PROCEDURE Import(ipaddr: IPv4Addresses.SocketAddress;
                    VAR root: Names.Node;
		    errors: RelatedEvents.Object) : BOOLEAN;
      VAR
	 address: Networks.Address;
   BEGIN
      InetTCP.CreateAddress(address, ipaddr);
      RETURN NamesBootService.Import(address, root, errors)
   END Import;

   PROCEDURE Convert(source: ARRAY OF CHAR;
		     VAR address: Networks.Address;
		     errors: RelatedEvents.Object) : BOOLEAN;
      VAR
	 addr: IPv4Addresses.Address;
	 port: IPv4Addresses.PortNumber;
	 nestlevel: INTEGER;
	 sockaddr: IPv4Addresses.SocketAddress;

      PROCEDURE ^ TryThemAll(source: ARRAY OF CHAR) : BOOLEAN;

      PROCEDURE TryDottedDecimal(source: ARRAY OF CHAR;
                                 VAR dottedDecimal: BOOLEAN) : BOOLEAN;
	 VAR
	    s: Streams.Stream;
	    ch: CHAR;
	    portnum: INTEGER;
      BEGIN
	 dottedDecimal := FALSE;
	 Strings.Open(s, source);
	 IF ~IPv4Addresses.ReadText(s, addr) THEN RETURN FALSE END;
	 dottedDecimal := TRUE;
	 Read.CharS(s, ch);
	 IF (s.count = 0) OR (ch # ":") THEN
	    Error(errors, colonExpected, source);
	    RETURN FALSE
	 END;
	 Read.IntS(s, portnum);
	 IF s.count = 0 THEN
	    Error(errors, portExpected, source);
	    RETURN FALSE
	 END;
	 IF (portnum < 0) OR (portnum >= 10000H) THEN
	    Error(errors, invalidPortNumber, source);
	    RETURN FALSE
	 END;
	 port := SYS.VAL(IPv4Addresses.PortNumber, portnum);
	 RETURN TRUE
      END TryDottedDecimal;

      PROCEDURE TryHostname(source: ARRAY OF CHAR) : BOOLEAN;
	 VAR
	    s: Streams.Stream;
	    hostname: DNSRecords.Name;
	    portnum: INTEGER;
	    onsstring: DNSRecords.Name;
	    portfield: ARRAY 16 OF CHAR;
	    gotport: BOOLEAN;
	    addresses: DNSResolvers.IPv4AddressList;
      BEGIN
	 Strings.Open(s, source);
	 StreamDisciplines.SetFieldSep(s, ":");
	 IF ~Read.FieldS(s, hostname) THEN
	    Error(errors, hostnameExpected, source);
	    RETURN FALSE
	 END;
	 gotport := FALSE;
	 IF Read.FieldS(s, portfield) THEN
	    Strings.Open(s, portfield);
	    Read.IntS(s, portnum);
	    gotport := s.count > 0;
	 END;
	 IF ~gotport THEN
	    (* just a domain name was given *)
	    IF ~DNSResolvers.GetAttribute(DNSResolvers.std,
		  hostname, "ons", onsstring, errors) THEN
	       Error(errors, unableToFindPort, source);
	       RETURN FALSE
	    END;
	    RETURN TryThemAll(onsstring)
	 ELSIF (portnum < 0) OR (portnum >= 10000H) THEN
	    Error(errors, invalidPortNumber, source);
	    RETURN FALSE
	 ELSE
	    port := SYS.VAL(IPv4Addresses.PortNumber, portnum);
	    IF ~DNSResolvers.GetIPv4AddrByHost(DNSResolvers.std,
		  hostname, addresses, errors) THEN
	       RETURN FALSE
	    END;
	    addr := addresses.addr;
	    RETURN TRUE
	 END;
      END TryHostname;

      PROCEDURE TryThemAll(source: ARRAY OF CHAR) : BOOLEAN;
	 VAR
	    dottedDecimal: BOOLEAN;
      BEGIN
	 INC(nestlevel);
	 IF nestlevel > 3 THEN
	    Error(errors, tooManyIndirections, source);
	    RETURN FALSE
	 END;
	 IF TryDottedDecimal(source, dottedDecimal) THEN RETURN TRUE END;
	 IF dottedDecimal THEN
	    (* do not try hostname lookups if it was indeed a
	       dotted-decimal address
	    *)
	    RETURN FALSE
	 END;
	 RETURN TryHostname(source)
      END TryThemAll;

   BEGIN (* Convert *)
      nestlevel := 0;
      IF ~TryThemAll(source) THEN RETURN FALSE END;
      sockaddr.host := addr;
      IPv4Addresses.SetPort(sockaddr, port);
      InetTCP.CreateAddress(address, sockaddr);
      RETURN TRUE
   END Convert;

   PROCEDURE ImportFrom(source: ARRAY OF CHAR;
                        VAR root: Names.Node;
			errors: RelatedEvents.Object) : BOOLEAN;
      VAR
	 address: Networks.Address;
   BEGIN
      IF ~Convert(source, address, errors) THEN RETURN FALSE END;
      RETURN NamesBootService.Import(address, root, errors)
   END ImportFrom;

BEGIN
   InitErrorHandling;
END IPv4NameSystems.
