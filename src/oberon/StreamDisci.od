(* Ulm's Oberon Library
   Copyright (C) 1989-1994 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: StreamDisci.od,v 1.2 1994/07/04 14:49:01 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: StreamDisci.od,v $
   Revision 1.2  1994/07/04  14:49:01  borchert
   parameter for indentation width added

   Revision 1.1  1994/02/22  20:10:30  borchert
   Initial revision

   ----------------------------------------------------------------------------
   AFB 10/91
   ----------------------------------------------------------------------------
*)

DEFINITION StreamDisciplines;

   (* definition of general-purpose disciplines for streams *)

   IMPORT Events, Sets, Streams;

   TYPE
      LineTerminator = ARRAY 4 OF CHAR;

   VAR
      badfieldsepset: Events.EventType;

   PROCEDURE SetLineTerm(s: Streams.Stream; lineterm: LineTerminator);
      (* 0X is defined to be the line terminator if lineterm is empty *)

   PROCEDURE GetLineTerm(s: Streams.Stream; VAR lineterm: LineTerminator);
      (* default line terminator is ASCII.nl *)

   PROCEDURE SetFieldSepSet(s: Streams.Stream; fieldsepset: Sets.CharSet);
      (* cardinality of fieldsepset must be >= 1;
	 else badfieldsepset is raised
      *)

   PROCEDURE GetFieldSepSet(s: Streams.Stream; VAR fieldsepset: Sets.CharSet);
      (* default field separators are ASCII.tab and ASCII.sp *)

   PROCEDURE SetFieldSep(s: Streams.Stream; fieldsep: CHAR);
      (* add fieldsep to the set of field separators and
	 select fieldsep to be the one returned by GetFieldSep
      *)

   PROCEDURE GetFieldSep(s: Streams.Stream; VAR fieldsep: CHAR);
      (* default field separator is ASCII.tab;
	 if a set of field separators has been given via SetFieldSepSet,
	 one of them is returned
      *)

   PROCEDURE GetWhiteSpace(s: Streams.Stream; VAR whitespace: Sets.CharSet);
      (* default: ASCII.tab, ASCII.sp, ASCII.np and ASCII.nl *)

   PROCEDURE SetWhiteSpace(s: Streams.Stream; whitespace: Sets.CharSet);

   PROCEDURE SetIndentationWidth(s: Streams.Stream; indentwidth: INTEGER);
   PROCEDURE GetIndentationWidth(s: Streams.Stream; VAR indentwidth: INTEGER);
   PROCEDURE IncrIndentationWidth(s: Streams.Stream; incr: INTEGER);

END StreamDisciplines.
