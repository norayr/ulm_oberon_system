(* Ulm's Oberon Library
   Copyright (C) 1989-1997 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: IntOperatio.od,v 1.1 1997/04/03 09:38:50 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: IntOperatio.od,v $
   Revision 1.1  1997/04/03  09:38:50  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

DEFINITION IntOperations; (* Frank B.J. Fischer *)

   IMPORT Operations, Streams, Types;

   CONST 
      mod = 5; pow = 6; inc = 7; dec = 8; mmul = 9; mpow = 10;
      odd = 11; shift = 12;

   TYPE 
      Operation = Operations.Operation;  (* Operations.add..mpow *)
      Operand = POINTER TO OperandRec;
      OperandRec = RECORD (Operations.OperandRec) END;

   TYPE
      CapabilitySet = Operations.CapabilitySet; 
	 (* SET of [Operations.add..shift] *)
      IsLargeEnoughForProc = PROCEDURE (op: Operations.Operand; 
					n: LONGINT): BOOLEAN;
      UnsignedProc = PROCEDURE (op: Operations.Operand): BOOLEAN;
      IntToOpProc = PROCEDURE (int32: Types.Int32; VAR op: Operations.Operand);
      OpToIntProc = PROCEDURE (op: Operations.Operand; VAR int32: Types.Int32);
      Log2Proc = PROCEDURE (op: Operations.Operand): LONGINT;
      OddProc = PROCEDURE (op: Operations.Operand): BOOLEAN;
      ShiftProc = PROCEDURE (op: Operations.Operand; 
			     n: INTEGER): Operations.Operand;
      IntOperatorProc = PROCEDURE(op: Operation; 
				  op1, op2, op3: Operations.Operand; 
			          VAR result: Operations.Operand);
      Interface = POINTER TO InterfaceRec;
      InterfaceRec = RECORD
			(Operations.InterfaceRec)
			isLargeEnoughFor: IsLargeEnoughForProc;
			unsigned        : UnsignedProc;
			intToOp         : IntToOpProc;
			opToInt         : OpToIntProc;
			log2            : Log2Proc;
			odd             : OddProc;
			shift           : ShiftProc;
			intOp           : IntOperatorProc;
                     END;


   PROCEDURE Init(op: Operand; if: Interface; caps: CapabilitySet);
   PROCEDURE Capabilities(op: Operand): CapabilitySet;
   PROCEDURE IsLargeEnoughFor(op: Operations.Operand; n: LONGINT): BOOLEAN;
   PROCEDURE Unsigned(op: Operations.Operand): BOOLEAN;

   PROCEDURE IntToOp(int32: Types.Int32; VAR op: Operations.Operand);
      (* converts int32 into operand type an stores result in 
	 already initialized op
      *)
   PROCEDURE OpToInt(op: Operations.Operand; VAR int32: Types.Int32);
      (* converts op into a 32 bit integer and stores result in int32 *)
   PROCEDURE Log2(op: Operations.Operand): LONGINT;
   PROCEDURE Odd(op: Operations.Operand): BOOLEAN;

   PROCEDURE Shift(op1: Operations.Operand; n: INTEGER): Operations.Operand;
   PROCEDURE Shift2(VAR op1: Operations.Operand; n: INTEGER);
   PROCEDURE Shift3(VAR result: Operations.Operand; 
		    op1: Operations.Operand; n: INTEGER);

   PROCEDURE Inc(op1: Operations.Operand): Operations.Operand;
   PROCEDURE Inc2(VAR op1: Operations.Operand);
   PROCEDURE Inc3(VAR result: Operations.Operand; op1: Operations.Operand);

   PROCEDURE Dec(op1: Operations.Operand): Operations.Operand;
   PROCEDURE Dec2(VAR op1: Operations.Operand);
   PROCEDURE Dec3(VAR result: Operations.Operand; op1: Operations.Operand);

   PROCEDURE Mod(op1, op2: Operations.Operand) : Operations.Operand;
   PROCEDURE Mod2(VAR op1: Operations.Operand; op2: Operations.Operand);
   PROCEDURE Mod3(VAR result: Operations.Operand; op1, op2: Operations.Operand);

   PROCEDURE Pow(op1, op2: Operations.Operand): Operations.Operand;
   PROCEDURE Pow2(VAR op1: Operations.Operand; op2: Operations.Operand);
   PROCEDURE Pow3(VAR result: Operations.Operand; op1, op2: Operations.Operand);

   PROCEDURE MMul(op1, op2, op3: Operations.Operand): Operations.Operand;
   PROCEDURE MMul2(VAR op1: Operations.Operand; op2, op3: Operations.Operand);
   PROCEDURE MMul3(VAR result: Operations.Operand; 
		   op1, op2, op3: Operations.Operand);

   PROCEDURE MPow(op1, op2, op3: Operations.Operand): Operations.Operand;
   PROCEDURE MPow2(VAR op1: Operations.Operand; op2, op3: Operations.Operand);
   PROCEDURE MPow3(VAR result: Operations.Operand; 
		   op1, op2, op3: Operations.Operand);

END IntOperations.
