(* Ulm's Oberon Library
   Copyright (C) 1989-2004 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: Plotters.od,v 1.1 2004/04/06 07:43:22 borchert Exp borchert $
   ----------------------------------------------------------------------------
   $Log: Plotters.od,v $
   Revision 1.1  2004/04/06 07:43:22  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

DEFINITION Plotters;

   IMPORT Objects, Services;

   TYPE
      Plotter = POINTER TO PlotterRec;
      PlotterRec = RECORD (Services.ObjectRec) END;

   CONST
      solid = 0;
      dotted = 1;
      dotdashed = 2;
      shortdashed = 3;
      longdashed = 4;
      lineModes = 5;
   TYPE
      LineMode = SHORTINT; (* solid ... *)

   CONST
      setspace = 0;
      erase = 1;
      string = 2;
      linemodes = 3;
      linewidth = 4;
   TYPE
      CapabilitySet = SET; (* OF setspace, erase ... *)

   TYPE
      Description = POINTER TO DescriptionRec;
      DescriptionRec =
	 RECORD
	    (Objects.ObjectRec)
	    xmin, ymin, xmax, ymax: INTEGER; (* maximal supported range *)
	 END;

   TYPE
      GetSpaceProc = PROCEDURE (
	 plotter: Plotter;
	 VAR xmin, ymin, xmax, ymax: INTEGER);
      SetSpaceProc = PROCEDURE (
	 plotter: Plotter;
	 xmin, ymin, xmax, ymax: INTEGER);
      EraseProc = PROCEDURE (plotter: Plotter);
      MoveProc = PROCEDURE (plotter: Plotter; xto, yto: INTEGER);
      LineProc = PROCEDURE (plotter: Plotter; xfrom, yfrom, xto, yto: INTEGER);
      ArcProc = PROCEDURE (
	 plotter: Plotter;
	 xcenter, ycenter, xstart, ystart, xend, yend: INTEGER);
      CircleProc = PROCEDURE (
         plotter: Plotter; xcenter, ycenter, radius: INTEGER);
      StringProc = PROCEDURE (plotter: Plotter; str: ARRAY OF CHAR);
      SetLineModeProc = PROCEDURE (plotter: Plotter; mode: LineMode);
      SetLineWidthProc = PROCEDURE (plotter: Plotter; width: INTEGER);
      CloseProc = PROCEDURE (plotter: Plotter);
   TYPE
      Interface = POINTER TO InterfaceRec;
      InterfaceRec =
	 RECORD
	    (Objects.ObjectRec)
	    setSpace: SetSpaceProc;
	    erase: EraseProc;
	    move: MoveProc;
	    cont: MoveProc;
	    point: MoveProc;
	    line: LineProc;
	    arc: ArcProc;
	    circle: CircleProc;
	    string: StringProc;
	    setLineMode: SetLineModeProc;
	    setLineWidth: SetLineWidthProc;
	    close: CloseProc;
	 END;

   PROCEDURE Init(plotter: Plotter; if: Interface;
		  caps: CapabilitySet; desc: Description);

   PROCEDURE GetCapabilities(plotter: Plotter) : CapabilitySet;

   PROCEDURE GetSpace(plotter: Plotter;
                      VAR xmin, ymin,
		      xmax, ymax: INTEGER);

   PROCEDURE GetMaxSpace(plotter: Plotter;
                         VAR xmin, ymin,
		         xmax, ymax: INTEGER);

   PROCEDURE SetSpace(plotter: Plotter;
                      xmin, ymin,
		      xmax, ymax: INTEGER);
		     
   PROCEDURE Erase(plotter: Plotter);

   PROCEDURE Move(plotter: Plotter; xto, yto: INTEGER);

   PROCEDURE Cont(plotter: Plotter; xto, yto: INTEGER);

   PROCEDURE Point(plotter: Plotter; xpoint, ypoint: INTEGER);

   PROCEDURE Line(plotter: Plotter; xfrom, yfrom, xto, yto: INTEGER);

   PROCEDURE Arc(plotter: Plotter;
                 xcenter, ycenter, xstart, ystart, xend, yend: INTEGER);

   PROCEDURE Circle(plotter: Plotter; xcenter, ycenter, radius: INTEGER);

   PROCEDURE String(plotter: Plotter; str: ARRAY OF CHAR);

   PROCEDURE SetLineMode(plotter: Plotter; mode: LineMode);

   PROCEDURE SetLineWidth(plotter: Plotter; width: INTEGER);

   PROCEDURE Close(plotter: Plotter);

END Plotters.
