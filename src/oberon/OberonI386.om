(* Ulm's Oberon Library
   Copyright (C) 1989-2004 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: OberonI386.om,v 1.2 2004/09/10 11:50:58 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: OberonI386.om,v $
   Revision 1.2  2004/09/10 11:50:58  borchert
   import list minimized

   Revision 1.1  2004/09/07 10:07:04  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

MODULE OberonI386;

   (* installs itself as pass2 of the Oberon compiler for
      the i386 architecture
   *)

   IMPORT Architectures, CompilerErrors, CompilerKeys, CompilerObjects,
      Compilers, ConstStrings, I386CodeGen := I386ObCodeGen,
      I386LinuxBuiltIns := I386LinuxOberonBuiltIns, Iterators,
      Oberon32iAnalyzer, Oberon32iBuiltIns, Oberon32iLittleEndianConversions,
      Oberon32iSymbols, Oberon32iUpdates, OberonCompiler,
      OberonI386Analyzer := I386OberonAnalyzer,
      OberonI386Results := I386OberonResults, ObjectLoader, RelatedEvents,
      Sources := CompilerSources, Streams, Sym := OberonSymbols, Write;

   VAR
      myarch: Architectures.Architecture;

   PROCEDURE Pass2(compiler: Compilers.Compiler; context: Compilers.Context;
                   definition, module: CompilerObjects.Object;
		   arch: Architectures.Architecture;
		   updatesPermitted: BOOLEAN;
		   VAR archdef, code: Compilers.Result;
		   errors: RelatedEvents.Object) : BOOLEAN;
      (* generate an initial architecture-dependent symbol file (in case
	 of definitions) or architecture-dependent code and
	 optional an update of the symbol file (in case of modules);
	 all error events are related to module and should be of
	 type CompilerErrors in case of semantic errors;
	 return TRUE on success
      *)
      VAR
	 defheader, modheader: CompilerObjects.Header;
	 defident, modident: Sym.Ident;
	 updated: BOOLEAN; (* has defident been updated? *)
	 combinedArch: Architectures.Architecture;
	 combinedKey: CompilerKeys.Key;
	 ok: BOOLEAN;
	 abort: BOOLEAN; (* avoid further processing once set to TRUE *)
	 modsrcid: ConstStrings.String;
	 freshdef: BOOLEAN; (* we have just processed definition *)
	 errorObject: RelatedEvents.Object;

      PROCEDURE CreateHeader(VAR header: CompilerObjects.Header;
                             ident: Sym.Ident);
      BEGIN
	 CompilerObjects.CreateHeader(header, ident.name);
	 header.src := NIL; (* TBD *)
	 IF ident.kind IN {Sources.defmod, Sources.module} THEN
	    header.srcid := ident.key.modsrcid;
	 ELSE
	    header.srcid := ident.key.defsrcid;
	 END;
	 header.dependencies := ident.dependencies;
	 header.stage := CompilerObjects.archDependent;
	 header.key := ident.key;
	 header.arch := ident.key.arch;
      END CreateHeader;

      PROCEDURE UpdateDependencies(module: Sym.Ident);
	 VAR
	    it: Iterators.Iterator;
	    key: CompilerKeys.Key;
	    header: CompilerObjects.Header;
	    object: CompilerObjects.Object;
	    es: Streams.Stream;
	    ok: BOOLEAN;
	    combinedKey: CompilerKeys.Key;
      BEGIN
	 CompilerKeys.GetKeys(module.dependencies, it);
	 WHILE Iterators.Get(it, key) DO
	    IF ~ObjectLoader.LoadObject(compiler, context, key.modname,
	                                CompilerObjects.public, arch,
			                header, object, errors) THEN
	       CompilerErrors.Open(es);
	       CompilerErrors.At1(es, module.loc);
		  (* TBD: to be replaced by location in import list *)
	       Write.StringS(es, "unable to load architecture-dependent ");
	       Write.StringS(es, "symbol file of ");
	       ConstStrings.Write(es, key.modname);
	       CompilerErrors.Close(es, errors);
	       abort := TRUE; RETURN
	    END;
	    ok := CompilerKeys.CombineKeys(key, header.key, combinedKey);
	    ASSERT(ok);
	    (* update the key in our list of dependencies *)
	    CompilerKeys.Incl(module.dependencies, combinedKey);
	 END;
      END UpdateDependencies;

      PROCEDURE ProcessModule(module: Sym.Ident);
      BEGIN
	 (* update key of module in context.keys *)
	 CompilerKeys.Incl(context.keys, module.key);
	 (* update all keys in our set of dependencies *)
	 UpdateDependencies(module); IF abort THEN RETURN END;
	 (* update all types with architecture-dependent infos *)
	 Oberon32iLittleEndianConversions.Init(module);
	 Oberon32iAnalyzer.Process(module, errors);
	 (* Calculate offsets for Variables and Parameters *)
	 OberonI386Analyzer.Process (module, errors);
      END ProcessModule;

      PROCEDURE CreateNewModule(VAR module: Sym.Ident);
	 (* create own module ident so that the original module ident
	    remains untouched; this is necessary because module
	    is in our cache which may be used by other compilation runs if
	    it is a public interface
	 *)
	 VAR
	    new: Sym.Ident;
      BEGIN
	 Sym.CreateModuleIdent(new, module.name, module.name,
			       module.kind, module.pcontext, module.loc);
	 new.scope := module.scope;
	 new.export := module.export;
	 CompilerKeys.CreateCopy(new.key, module.key);
	 CompilerKeys.CreateSetCopy(new.dependencies, module.dependencies);
	 new.loc := module.loc;
	 new.body := module.body;
	 module := new;
      END CreateNewModule;

      PROCEDURE ReturnErrors;
	 VAR
	    queue: RelatedEvents.Queue;
      BEGIN
	 RelatedEvents.GetQueue(errors, queue);
	 RelatedEvents.AppendQueue(errorObject, queue);
	 IF updated THEN
	    CompilerObjects.RemoveAttachments(defident);
	    Oberon32iSymbols.RemoveTypeMarks(defident);
	 END;
	 IF modident # NIL THEN
	    CompilerObjects.RemoveAttachments(modident);
	    Oberon32iSymbols.RemoveTypeMarks(modident);
	 END;
      END ReturnErrors;

   BEGIN (* Pass2 *)
      errorObject := errors; NEW(errors); RelatedEvents.QueueEvents(errors);

      ok := Architectures.Compatible(myarch, arch, combinedArch);
      ASSERT(ok);
      arch := combinedArch;
      ASSERT((definition # NIL) & (definition IS Sym.Ident));
      ASSERT((module = NIL) OR (module IS Sym.Ident));
      defident := definition(Sym.Ident);
      IF module = NIL THEN
	 modident := NIL;
      ELSE
	 modident := module(Sym.Ident);
      END;
      archdef := NIL; code := NIL; updated := FALSE; abort := FALSE;
      freshdef := FALSE;

      IF updatesPermitted THEN
	 (* we are invited to operate directly on definition *)
	 IF defident.key.arch = NIL THEN
	    (* definition has not yet been processed by pass 2 *)
	    CreateNewModule(defident);
	    defident.key.arch := arch;
	    CompilerKeys.CreateValue(defident.key.archkey);
	    ProcessModule(defident);
	    updated := TRUE;
	    freshdef := TRUE;
	    IF abort OR RelatedEvents.EventsPending(errors) THEN
	       ReturnErrors; RETURN FALSE
	    END;
	 END;
      ELSE
	 ASSERT(defident.key.arch # NIL);
      END;

      IF modident # NIL THEN
	 CreateNewModule(modident);
	 ok := CompilerKeys.CombineKeys(defident.key, modident.key,
	                                combinedKey);
	 ASSERT(ok);
	 ProcessModule(modident);
	 IF abort OR RelatedEvents.EventsPending(errors) THEN
	    ReturnErrors; RETURN FALSE
	 END;
	 Oberon32iUpdates.CheckForUpdates(defident, modident,
	     updatesPermitted, updated, errors);
	 IF abort OR RelatedEvents.EventsPending(errors) THEN
	    ReturnErrors; RETURN FALSE
	 END;
	 IF updated & ~freshdef THEN
	    CompilerKeys.CreateValue(defident.key.archkey);
	    CompilerKeys.Incl(context.keys, defident.key);
	 END;
	 modsrcid := modident.key.modsrcid; (* save and ... *)
	 CompilerKeys.CreateCopy(modident.key, defident.key);
	 modident.key.modsrcid := modsrcid; (* ... restore modsrcid *)
	 CompilerKeys.Incl(context.keys, modident.key);
      END;

      IF RelatedEvents.EventsPending(errors) THEN
	 ReturnErrors; RETURN FALSE
      END;

      IF updated THEN
	 CreateHeader(defheader, defident);
	 defheader.type := CompilerObjects.public;
	 NEW(archdef);
	 archdef.header := defheader; archdef.object := defident;
      END;

      IF modident # NIL THEN
	 CreateHeader(modheader, modident);
	 modheader.type := CompilerObjects.private;
	 NEW(code);
	 OberonI386Results.Create (code.object);
	 IF ~I386CodeGen.GenModule (code.object(OberonI386Results.Result), modident, errors) THEN
	    code.object := NIL;
	    ReturnErrors;
	    RETURN FALSE;
         END;
	 IF RelatedEvents.EventsPending(errors) THEN
	    code.object := NIL;
	    ReturnErrors; RETURN FALSE
	 END;
	 code.header := modheader;
      END;
      RETURN TRUE
   END Pass2;

   PROCEDURE Init;
      VAR
	 if: Compilers.Pass2Interface;
   BEGIN
      Architectures.Create(myarch, "I386");
      myarch.variant := NIL;
      myarch.model := NIL;
      NEW(if); if.pass2 := Pass2; if.defineArgs := NIL;
      Compilers.Register(OberonCompiler.compiler, myarch, if);
   END Init;

BEGIN
   Init;
END OberonI386.
