(* Ulm's Oberon Library
   Copyright (C) 1989-1994 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: Networks.od,v 1.3 1994/09/21 14:06:20 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: Networks.od,v $
   Revision 1.3  1994/09/21  14:06:20  borchert
   open condition and CreateSomeSocket added

   Revision 1.2  1994/07/04  07:55:36  borchert
   'AcceptCondition renamed to CreateAcceptCondition

   Revision 1.1  1994/02/23  08:03:54  borchert
   Initial revision

   ----------------------------------------------------------------------------
   AFB 1/94
   ----------------------------------------------------------------------------
*)

DEFINITION Networks;

   (* general abstraction for bidirectional network connections *)

   IMPORT Conditions, Disciplines, Events, Iterators, Objects,
      PersistentDisciplines, RelatedEvents, Streams;

   TYPE
      Network = POINTER TO NetworkRec;
      NetworkRec = RECORD (PersistentDisciplines.ObjectRec) END;
      Address = POINTER TO AddressRec;
      AddressRec =
	 RECORD
	    (PersistentDisciplines.ObjectRec)
	    network: Network;
	 END;

      Socket = POINTER TO SocketRec;
      SocketRec = RECORD (Disciplines.ObjectRec) END;

   TYPE
      OpenProc = PROCEDURE (VAR s: Streams.Stream; address: Address;
			    bufmode: Streams.BufMode;
			    errors: RelatedEvents.Object) : BOOLEAN;
      CreateOpenConditionProc = PROCEDURE(VAR condition: Conditions.Condition;
					  address: Address);
      TestAndOpenProc = PROCEDURE (VAR s: Streams.Stream;
				   condition: Conditions.Condition;
				   bufmode: Streams.BufMode;
				   errors: RelatedEvents.Object) : BOOLEAN;
      CreateSomeSocketProc = PROCEDURE (VAR socket: Socket;
					VAR address: Address;
					errors: RelatedEvents.Object) : BOOLEAN;
      ListenProc = PROCEDURE (VAR socket: Socket; address: Address;
			      errors: RelatedEvents.Object) : BOOLEAN;
      ReleaseProc = PROCEDURE (socket: Socket);
      AcceptProc = PROCEDURE (socket: Socket; VAR s: Streams.Stream;
			      bufmode: Streams.BufMode) : BOOLEAN;
      AcceptConditionProc = PROCEDURE (VAR condition: Conditions.Condition;
				       socket: Socket);
      Interface = POINTER TO InterfaceRec;
      InterfaceRec =
	 RECORD
	    (Objects.ObjectRec)
	    open: OpenProc;
	    createOpenCondition: CreateOpenConditionProc;
	    testAndOpen: TestAndOpenProc;
	    createSomeSocket: CreateSomeSocketProc;
	    listen: ListenProc;
	    release: ReleaseProc;
	    accept: AcceptProc;
	    acceptCondition: AcceptConditionProc;
	 END;

   CONST
      unknownNetwork = 0;
      corruptedInput = 1;
      errors = 2;
   TYPE
      ErrorCode = SHORTINT;
      ErrorEvent = POINTER TO ErrorEventRec;
      ErrorEventRec =
	 RECORD
	    (Events.EventRec)
	    errorcode: ErrorCode;
	 END;
   VAR
      error: Events.EventType;
      errormsg: ARRAY errors OF Events.Message;

   PROCEDURE Register(VAR network: Network;
		      name: ARRAY OF CHAR; if: Interface);

   PROCEDURE GetNetwork(name: ARRAY OF CHAR; VAR network: Network;
			VAR errors: RelatedEvents.Object) : BOOLEAN;
   PROCEDURE GetName(network: Network; VAR name: ARRAY OF CHAR);
   PROCEDURE GetNetworks(VAR iterator: Iterators.Iterator);

   PROCEDURE Open(VAR s: Streams.Stream;
		  address: Address;
		  bufmode: Streams.BufMode;
		  errors: RelatedEvents.Object) : BOOLEAN;

   PROCEDURE CreateOpenCondition(VAR condition: Conditions.Condition;
				 address: Address);
   PROCEDURE TestAndOpen(VAR s: Streams.Stream;
			 address: Address;
			 condition: Conditions.Condition;
			 bufmode: Streams.BufMode;
			 errors: RelatedEvents.Object) : BOOLEAN;

   PROCEDURE CreateSomeSocket(VAR socket: Socket;
			      network: Network;
			      VAR address: Address;
			      errors: RelatedEvents.Object) : BOOLEAN;
   PROCEDURE Listen(VAR socket: Socket; address: Address;
		    errors: RelatedEvents.Object) : BOOLEAN;

   PROCEDURE Release(socket: Socket);

   PROCEDURE Accept(socket: Socket;
		    VAR s: Streams.Stream;
		    bufmode: Streams.BufMode) : BOOLEAN;

   PROCEDURE CreateAcceptCondition(VAR condition: Conditions.Condition;
			           socket: Socket);

END Networks.
