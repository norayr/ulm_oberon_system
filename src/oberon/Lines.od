(* Ulm's Oberon Library
   Copyright (C) 1989-1994 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: Lines.od,v 1.2 1996/12/02 14:23:49 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: Lines.od,v $
   Revision 1.2  1996/12/02  14:23:49  borchert
   Scanned added to allow tests whether a stream has been
   scanned yet

   Revision 1.1  1994/07/25  12:19:23  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

DEFINITION Lines;

   IMPORT Events, Objects, Streams;

   TYPE
      Location =
	 RECORD
	    (Objects.ObjectRec)
	    (* location in input stream *)
	    line, pos: Streams.Count; (* both starting from 0 *)
	 END;

   CONST
      streamNotScannedYet = 0;
	 (* Scan must be called before Seek or NumberOfLines *)
      lineNumberOutOfRange = 1;
	 (* a line number was given to Seek which was outside of
	    [0..NumberOfLines(s)-1]
	 *)
      positionOutOfRange = 2;
	 (* a pos (= column) was given to Seek which was outside
	    the range of the associated line
	 *)
      invalidPos = 3;
	 (* returned by GetPos: stream at not yet scanned area 
	    or inside a line terminator
	 *)
      errorcodes = 4;
   TYPE
      ErrorEvent = POINTER TO ErrorEventRec;
      ErrorEventRec =
	 RECORD
	    (Events.EventRec)
	    errorcode: SHORTINT;
	 END;
   VAR
      error: Events.EventType;
      errormsg: ARRAY errorcodes OF Events.Message;

   PROCEDURE Scan(s: Streams.Stream);
      (* scan the entire stream from the curr. pos. and setup the line table *)

   PROCEDURE Scanned(s: Streams.Stream) : BOOLEAN;
      (* has the stream scanned yet by Lines? *)

   PROCEDURE SetPos(s: Streams.Stream; loc: Location);
      (* seek the given location; the first line has the number 0 *)

   PROCEDURE GetPos(s: Streams.Stream; VAR loc: Location);

   PROCEDURE ConvertPos(s: Streams.Stream; pos: Streams.Count;
		        VAR loc: Location);
   PROCEDURE ConvertLoc(s: Streams.Stream; loc: Location;
			VAR pos: Streams.Count);

   PROCEDURE NumberOfLines(s: Streams.Stream) : Streams.Count;
      (* return the number of lines *)

END Lines.
