(* Ulm's Oberon Library
   Copyright (C) 1989-1998 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: StreamPosKe.om,v 1.1 1998/02/21 19:42:16 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: StreamPosKe.om,v $
   Revision 1.1  1998/02/21 19:42:16  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

MODULE StreamPosKeys;

   IMPORT Keys, NetIO, PersistentObjects, Services, Streams;

   TYPE
      Key = POINTER TO KeyRec;
      KeyRec = RECORD (Keys.KeyRec) END;
      Value = POINTER TO ValueRec;
      ValueRec =
	 RECORD
	    (Keys.ValueRec)
	    pos: Streams.Count;
	 END;

   VAR
      key: Keys.Key;
      stypeOfKey: Services.Type;
      stypeOfValue: Services.Type;
      service: Services.Service;

   (* === private procedures ============================================= *)

   PROCEDURE Compare(key: Keys.Key; keyval1, keyval2: Keys.Value) : INTEGER;
   BEGIN
      WITH keyval1: Value DO WITH keyval2: Value DO
	 IF keyval1.pos = keyval2.pos THEN RETURN 0
	 ELSIF keyval1.pos < keyval2.pos THEN RETURN -1
	 ELSE RETURN 1
	 END;
      END; END;
   END Compare;

   PROCEDURE InternalCreateValue(VAR object: PersistentObjects.Object);
      VAR
	 keyval: Value;
   BEGIN
      NEW(keyval);
      PersistentObjects.Init(keyval, stypeOfValue);
      object := keyval;
   END InternalCreateValue;


   PROCEDURE ReadValue(s: Streams.Stream;
		       object: PersistentObjects.Object) : BOOLEAN;
   BEGIN
      WITH object: Value DO
	 RETURN NetIO.ReadLongInt(s, object.pos)
      END;
   END ReadValue;

   PROCEDURE WriteValue(s: Streams.Stream;
		        object: PersistentObjects.Object) : BOOLEAN;
   BEGIN
      WITH object: Value DO
	 RETURN NetIO.WriteLongInt(s, object.pos)
      END;
   END WriteValue;

   PROCEDURE CreateKey(VAR object: PersistentObjects.Object);
      VAR
	 key: Key;
   BEGIN
      NEW(key);
      PersistentObjects.Init(key, stypeOfKey);
      Keys.Init(key, service);
      object := key;
   END CreateKey;

   PROCEDURE Init;
      VAR
	 if: PersistentObjects.Interface;
   BEGIN
      NEW(if);
      if.create := InternalCreateValue; if.createAndRead := NIL;
      if.read := ReadValue; if.write := WriteValue;
      PersistentObjects.RegisterType(stypeOfValue,
	 "StreamPosKeys.Value", "Keys.Value", if);
      NEW(if);
      if.create := CreateKey; if.read := NIL; if.write := NIL;
      if.createAndRead := NIL;
      PersistentObjects.RegisterType(stypeOfKey,
	 "StreamPosKeys.Key", "Keys.Key", if);
      Keys.DefineService("StreamPosKeys", stypeOfValue, Compare, service);
      CreateKey(key);
   END Init;

   (* === exported constructor =========================================== *)

   PROCEDURE CreateValue(VAR keyval: Value);
   BEGIN
      InternalCreateValue(keyval);
   END CreateValue;

BEGIN
   Init;
END StreamPosKeys.
