(* Ulm's Oberon Library
   Copyright (C) 1989-1994 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: Messages.od,v 1.3 1995/12/11 09:30:55 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: Messages.od,v $
   Revision 1.3  1995/12/11  09:30:55  borchert
   target objects of messages no longer need to be extensions
   of PersistentDisciplines.Object but just Disciplines.Object

   Revision 1.2  1994/07/18  14:17:57  borchert
   Messages no longer generates error events itself

   Revision 1.1  1994/02/22  20:08:28  borchert
   Initial revision

   ----------------------------------------------------------------------------
   AFB 6/93
   ----------------------------------------------------------------------------
*)

DEFINITION Messages;

   (* management of messages and associated handlers which
      are attached by Disciplines
   *)

   IMPORT Disciplines, Events, PersistentDisciplines, RelatedEvents;

   TYPE
      Object = Disciplines.Object;
      Message = POINTER TO MessageRec;
      MessageRec =
	 RECORD
	    (PersistentDisciplines.ObjectRec)
	    processed: BOOLEAN;
	    done: BOOLEAN;
	    errors: RelatedEvents.Object;
	       (* only error texts survive persistency (see ForeignEvents) *)
	 END;

      Handler = PROCEDURE (object: Object; VAR message: Message);

   PROCEDURE InstallHandler(object: Object; handler: Handler);
      (* must be called directly or indirectly by a constructor
	 of the object itself or one of its disciplines
      *)

   PROCEDURE Send(object: Object; VAR message: Message);
      (* send message to given object, i.e. all installed handlers
	 will be called with the given message
      *)

   PROCEDURE Init(message: Message); (* doesn't call NEW *)

END Messages.
