(* Ulm's Oberon Library
   Copyright (C) 1989-1998 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: Scopes.od,v 1.1 1998/04/06 14:31:20 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: Scopes.od,v $
   Revision 1.1  1998/04/06 14:31:20  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

DEFINITION Scopes;

   IMPORT CompilerErrors, CompilerObjects, ConstStrings, Events, Iterators,
      Objects, PersistentDisciplines, Streams;

   TYPE
      Identifier = ConstStrings.String;
      Object = CompilerObjects.Object;
      Location = CompilerObjects.Location;

      Scope = POINTER TO ScopeRec;
      ScopeRec = RECORD (CompilerObjects.ObjectRec) END;

   TYPE
      OpenProc = PROCEDURE (scope: Scope; VAR innerScope: Scope);
      CloseProc = PROCEDURE (scope: Scope);
      AddProc = PROCEDURE (scope: Scope; ident: Identifier;
			   loc: Location; object: Object);
      UseProc = PROCEDURE (scope: Scope; ident: Identifier;
			   loc: Location; VAR object: Object);
      LookupProc = PROCEDURE (scope: Scope; ident: Identifier;
                              VAR object: Object) : BOOLEAN;
      LocalLookupProc = PROCEDURE (scope: Scope; ident: Identifier;
                                   VAR object: Object) : BOOLEAN;
      CutProc = PROCEDURE (scope: Scope);
      GetIteratorProc = PROCEDURE (scope: Scope; VAR it: Iterators.Iterator);
      Interface = POINTER TO InterfaceRec;
      InterfaceRec =
	 RECORD
	    (Objects.ObjectRec)
	    open: OpenProc;
	    close: CloseProc;
	    add: AddProc;
	    use: UseProc;
	    lookup: LookupProc;
	    localLookup: LocalLookupProc;
	    cut: CutProc;
	    getIterator: GetIteratorProc;
	 END;

   PROCEDURE Init(scope: Scope; if: Interface);

   PROCEDURE Open(scope: Scope; VAR innerScope: Scope);
   PROCEDURE Close(scope: Scope);

   PROCEDURE Level(scope: Scope) : INTEGER;
      (* returns 0 for the outmost level *)

   PROCEDURE Add(scope: Scope; ident: Identifier;
		 loc: Location; object: Object);
   PROCEDURE Use(scope: Scope; ident: Identifier; loc: Location;
                 VAR object: Object);
      (* lookup the identifier in the given scope and mark it as used *)
   PROCEDURE Lookup(scope: Scope; ident: Identifier;
                    VAR object: Object) : BOOLEAN;
      (* lookup the identifier without marking it *)
   PROCEDURE LocalLookup(scope: Scope; ident: Identifier;
                         VAR object: Object) : BOOLEAN;
      (* lookup the identifier in scope without considering the
         upper scopes without marking it
      *)

   PROCEDURE Cut(scope: Scope);
      (* cut scope from upper levels; note that this does not
	 change Level(scope)
      *)

   PROCEDURE GetIterator(scope: Scope; VAR it: Iterators.Iterator);
      (* returns tuples of type Object; must not be called as long
	 as the given scope is open
      *)

END Scopes.
