(* Ulm's Oberon Library
   Copyright (C) 1989-1994 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: Times.od,v 1.1 1994/02/22 20:11:55 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: Times.od,v $
   Revision 1.1  1994/02/22  20:11:55  borchert
   Initial revision

   ----------------------------------------------------------------------------
   AFB 12/91
   ----------------------------------------------------------------------------
*)

DEFINITION Times;

   IMPORT Objects, Scales;

   CONST
      relative = Scales.relative;
      absolute = Scales.absolute;
   TYPE
      (* the common base type of all time measures *)
      Time = POINTER TO TimeRec;
      TimeRec = RECORD (Scales.MeasureRec) END;

      (* units of the reference implementation:
	 epoch, second and usec
      *)
      TimeValueRec =
	 RECORD
	    (Objects.ObjectRec)
	    (* epoch 0: Jan. 1, 1970 GMT;
	       each epoch has a length of MAX(Scales.Value) + 1 seconds;
	       epoch may be negative:
	       -1 is the epoch just before 1970;
	       relative measures:
	       only the epoch may be negative,
	       second & usec remain non-negative
	    *)
	    epoch: Scales.Value;
	    (* seconds and ... *)
	    second: Scales.Value;
	    (* ... microseconds since the beginning of the epoch *)
	    usec: Scales.Value; 
	 END;

   VAR
      scale: Scales.Scale; (* reference scale *)
      family: Scales.Family; (* family of time scales *)

   PROCEDURE Create(VAR time: Time; type: SHORTINT);
      (* type = absolute or relative *)
   PROCEDURE CreateAndSet(VAR time: Time; type: SHORTINT;
			  epoch, second, usec: Scales.Value);

   PROCEDURE SetValue(time: Time; value: TimeValueRec);
   PROCEDURE GetValue(time: Time; VAR value: TimeValueRec);

END Times.
