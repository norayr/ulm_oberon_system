(* Ulm's Oberon Library
   Copyright (C) 1989-1994 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: SysModules.om,v 1.4 2004/05/21 09:43:56 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: SysModules.om,v $
   Revision 1.4  2004/05/21 09:43:56  borchert
   $O- added to Name in module (was previously
   only specified in DEFINITION)

   Revision 1.3  2001/07/27 21:04:14  borchert
   $O- added to BlockList and Module in MODULE (was previously
   only specified in DEFINITION)

   Revision 1.2  2001/07/27 21:01:30  borchert
   name component added to BlockListRec

   Revision 1.1  1994/02/23  07:49:43  borchert
   Initial revision

   ----------------------------------------------------------------------------
   AFB 8/92
   ----------------------------------------------------------------------------
*)

MODULE SysModules;

   IMPORT Types, SYS := SYSTEM;

   TYPE
      (* $P- don't trace any pointers *)
      (* names are read-only and 0X-terminated *)
      Name = (* $O- *) POINTER TO ARRAY 1024 OF CHAR (* $O= *);
      Address = Types.Address;

      BlockList = (* $O- *) POINTER TO BlockListRec (* $O= *);
      BlockListRec =
	 RECORD
	    next: BlockList; (* in memory order *)
	    begin, end: Address; (* of program text *)
	    tag: Address; (* pointer list only *)
	    name: Name; (* name of procedure (or module) *)
	 END;

      Module = (* $O- *) POINTER TO ModuleRec (* $O= *);
      ModuleRec =
	 RECORD
	    next: Module; (* in linkage order *)
	    name: Name;
	    init: PROCEDURE;
	    begin, end: Address; (* of program text *)
	    vars: Address; (* global variables *)
	    blocks: BlockList; (* procedures and module body *)
	    nofblocks: INTEGER; (* number of blocks *)
	 END;
      (* $P= *)

   VAR
      modules: Module;
      tm : Module;
      tb : BlockList;

   PROCEDURE ReverseModuleList;
      (* initially, the list of modules is constructed in reversed order *)
      VAR
	 module, next: Module;
   BEGIN
      module := modules;
      modules := NIL;
      WHILE module # NIL DO
	 next := module.next;
	 module.next := modules;
	 modules := module;
	 module := next;
      END;
   END ReverseModuleList;

BEGIN
   (* Check Compiler assumtions about offsets *)
   tm := NIL; tb := NIL;
   ASSERT (SYS.ADR (tm.next) = 0);
   ASSERT (SYS.ADR (tm.name) = 4);
   ASSERT (SYS.ADR (tm.init) = 8);
   ASSERT (SYS.ADR (tm.begin) = 12);
   ASSERT (SYS.ADR (tm.end) = 16);
   ASSERT (SYS.ADR (tm.vars) = 20);
   ASSERT (SYS.ADR (tm.blocks) = 24);
   ASSERT (SYS.ADR (tm.nofblocks) = 28);
   ASSERT (SYS.ADR (tb.next) = 0);
   ASSERT (SYS.ADR (tb.begin) = 4);
   ASSERT (SYS.ADR (tb.end) = 8);
   ASSERT (SYS.ADR (tb.tag) = 12);
   ASSERT (SYS.ADR (tb.name) = 16);
   ReverseModuleList;
END SysModules.
