(* Ulm's Oberon Library
   Copyright (C) 1989-2005 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id$
   ----------------------------------------------------------------------------
   $Log$
   ----------------------------------------------------------------------------
*)

DEFINITION SubContainers;

   IMPORT Containers, Events, RelatedEvents, Transactions;

   CONST
      noSubContainer = 0;
      invalidTransaction = 1;
      transactionAborted = 2;
      dbFailure = 3;
      noSuchIdent = 4; 
      noAnchorDefined = 5;
      errors = 6;
   TYPE
      ErrorCode = SHORTINT; (* noSubContainer... *)
      ErrorEvent = POINTER TO ErrorEventRec;
      ErrorEventRec =
	 RECORD
	    (Events.EventRec)
	    errorcode: ErrorCode;
	    container: Containers.Container;
	 END;
   VAR
      errormsg: ARRAY errors OF Events.Message;
      error: Events.EventType;

   PROCEDURE Open(VAR container: Containers.Container;
		  trans: Transactions.Transaction;
                  host: Containers.Container;
		  id: Containers.Ident;
		  errors: RelatedEvents.Object) : BOOLEAN;

   PROCEDURE Create(VAR container: Containers.Container;
                    trans: Transactions.Transaction;
                    host: Containers.Container;
		    VAR id: Containers.Ident;
		    errors: RelatedEvents.Object) : BOOLEAN;

   PROCEDURE Dispose(container: Containers.Container;
		     trans: Transactions.Transaction) : BOOLEAN;

END SubContainers.
