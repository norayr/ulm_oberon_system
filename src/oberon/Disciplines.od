(* Ulm's Oberon Library
   Copyright (C) 1989-1994 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: Disciplines.od,v 1.1 1994/02/22 20:06:59 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: Disciplines.od,v $
   Revision 1.1  1994/02/22  20:06:59  borchert
   Initial revision

   ----------------------------------------------------------------------------
   AFB 5/91
   ----------------------------------------------------------------------------
*)

DEFINITION Disciplines;

   (* Disciplines allows to attach additional data structures to
      abstract datatypes like Streams;
      these added data structures permit to parametrize operations
      which are provided by other modules (e.g. Read or Write for Streams)
   *)

   IMPORT Objects;

   TYPE
      Identifier = LONGINT;

      Discipline = POINTER TO DisciplineRec;
      DisciplineRec =
	 RECORD
	    (Objects.ObjectRec)
	    id: Identifier; (* should be unique for all types of disciplines *)
	 END;

      Object = POINTER TO ObjectRec;
      ObjectRec =
	 RECORD
	    (Objects.ObjectRec)
	    (* contains set of disciplines *)
	 END;

   PROCEDURE Unique() : Identifier;
      (* returns a unique identifier;
	 this procedure should be called during initialization by
	 all modules defining a discipline type
      *)

   PROCEDURE Add(object: Object; discipline: Discipline);
      (* adds a new discipline to the given object;
	 if already a discipline with the same identifier exist
	 it is deleted first
      *)

   PROCEDURE Remove(object: Object; id: Identifier);
      (* remove the discipline with the given id from object, if it exists *)

   PROCEDURE Seek(object: Object; id: Identifier;
		  VAR discipline: Discipline) : BOOLEAN;
      (* returns TRUE if a discipline with the given id is found *)

END Disciplines.
