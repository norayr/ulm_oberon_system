(* PLEASE DO NOT EDIT:
   Generated by instantiate_template on Wed Apr  4 18:08:52 MEST 2001
   from templates/Oberon%%Con.om
*)

(* Ulm's Oberon Library
   Copyright (C) 1989-2001 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id$
   ----------------------------------------------------------------------------
   $Log$
   ----------------------------------------------------------------------------
*)

MODULE Oberon32Conversions;

   IMPORT Disciplines, Oberon32, Objects, Sym := OberonSymbols;

   TYPE
      SetToIntegerProc = PROCEDURE (set: Oberon32.Set;
				    VAR integer: Oberon32.Integer) : BOOLEAN;
      IntegerToSetProc = PROCEDURE (integer: Oberon32.Integer;
				    VAR set: Oberon32.Set) : BOOLEAN;
      Interface = POINTER TO InterfaceRec;
      InterfaceRec =
	 RECORD
	    (Objects.ObjectRec)
	    setToInteger: SetToIntegerProc;
	    integerToSet: IntegerToSetProc;
	 END;

   TYPE
      ModuleDiscipline = POINTER TO ModuleDisciplineRec;
      ModuleDisciplineRec =
	 RECORD
	    (Disciplines.DisciplineRec)
	    if: Interface;
	 END;
   VAR
      mdiscid: Disciplines.Identifier;

   PROCEDURE Init(module: Sym.Ident; if: Interface);
      CONST
	 testcase = {0, 9, 20, 27, 31};
      VAR
	 mdisc: ModuleDiscipline;
	 testint: Oberon32.Integer; testset: Oberon32.Set; ok: BOOLEAN;
   BEGIN
      ASSERT((if # NIL) & (if.setToInteger # NIL) & (if.integerToSet # NIL));
      (* as this conversion depends on both, the source and
	 the target architecture, it may be wise to include
	 a little test:
      *)
      testset := testcase;
      ok := if.setToInteger(testset, testint); ASSERT(ok);
      ok := if.integerToSet(testint, testset); ASSERT(ok);
      ASSERT(testset = testcase);
      NEW(mdisc); mdisc.id := mdiscid; mdisc.if := if;
      Disciplines.Add(module, mdisc);
   END Init;

   PROCEDURE SetToInteger(module: Sym.Ident;
			  set: Oberon32.Set;
			  VAR integer: Oberon32.Integer) : BOOLEAN;
      VAR
	 mdisc: ModuleDiscipline;
	 ok: BOOLEAN;
   BEGIN
      ok := Disciplines.Seek(module, mdiscid, mdisc); ASSERT(ok);
      RETURN mdisc.if.setToInteger(set, integer);
   END SetToInteger;

   PROCEDURE IntegerToSet(module: Sym.Ident;
			  integer: Oberon32.Integer;
			  VAR set: Oberon32.Set) : BOOLEAN;
      VAR
	 mdisc: ModuleDiscipline;
	 ok: BOOLEAN;
   BEGIN
      ok := Disciplines.Seek(module, mdiscid, mdisc); ASSERT(ok);
      RETURN mdisc.if.integerToSet(integer, set);
   END IntegerToSet;

BEGIN
   mdiscid := Disciplines.Unique();
END Oberon32Conversions.
