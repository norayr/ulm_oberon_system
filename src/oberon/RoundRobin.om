(* Ulm's Oberon Library
   Copyright (C) 1989-1994 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: RoundRobin.om,v 1.1 1994/02/23 08:04:21 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: RoundRobin.om,v $
   Revision 1.1  1994/02/23  08:04:21  borchert
   Initial revision

   ----------------------------------------------------------------------------
   AFB 12/91
   ----------------------------------------------------------------------------
*)

MODULE RoundRobin;

   (* round robin task scheduler *)

   IMPORT Schedulers, Tasks;

   TYPE
      TaskGroup = POINTER TO TaskGroupRec;
      Task = POINTER TO TaskRec;
      TaskGroupRec =
	 RECORD
	    (Schedulers.TaskGroupRec)
	    current: Task;
	 END;
      TaskRec =
	 RECORD
	    (Schedulers.TaskRec)
	    next, prev: Task;
	 END;

   VAR
      if: Schedulers.Interface;

   PROCEDURE CreateTaskGroup(VAR tg: Tasks.TaskGroup);
      (* create round robin scheduler for Schedulers *)
      VAR
	 newtg: TaskGroup;
   BEGIN
      NEW(newtg); Schedulers.InitGroup(newtg, if); newtg.current := NIL;
      tg := newtg;
   END CreateTaskGroup;

   (* ====== interface procedures =========================== *)

   PROCEDURE Dispatch(tg: Schedulers.TaskGroup; VAR task: Schedulers.Task);
      VAR
	 t: Task;
   BEGIN
      WITH tg: TaskGroup DO
	 t := tg.current.next;
	 WHILE ~Schedulers.Ready(t) DO
	    t := t.next;
	 END;
	 tg.current := t;
      END;
      task := t;
   END Dispatch;

   PROCEDURE Create(tg: Schedulers.TaskGroup; VAR task: Schedulers.Task);
      VAR
	 newtask: Task;
   BEGIN
      WITH tg: TaskGroup DO
	 NEW(newtask);
	 IF tg.current = NIL THEN
	    newtask.prev := newtask;
	    newtask.next := newtask;
	    tg.current := newtask;
	 ELSE
	    newtask.prev := tg.current;
	    newtask.next := tg.current.next;
	    newtask.prev.next := newtask;
	    newtask.next.prev := newtask;
	 END;
	 task := newtask;
      END;
   END Create;

   PROCEDURE Remove(tg: Schedulers.TaskGroup; task: Schedulers.Task);
   BEGIN
      WITH tg: TaskGroup DO WITH task: Task DO
	 IF task.prev = task THEN
	    tg.current := NIL;
	 ELSE
	    IF tg.current = task THEN
	       tg.current := task.next;
	    END;
	    task.prev.next := task.next;
	    task.next.prev := task.prev;
	 END;
      END; END;
   END Remove;

   PROCEDURE InitInterface;
   BEGIN
      NEW(if);
      if.dispatch := Dispatch; if.create := Create; if.remove := Remove;
   END InitInterface;

BEGIN
   InitInterface;
END RoundRobin.
