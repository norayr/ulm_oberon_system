(* Ulm's Oberon Library
   Copyright (C) 1989-1998 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: CompilerLog.od,v 1.1 1998/04/14 18:03:18 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: CompilerLog.od,v $
   Revision 1.1  1998/04/14 18:03:18  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

DEFINITION CompilerLogs;

   (* provide, if requested, some detailed information about the
      loading and compilation process
   *)

   IMPORT Disciplines, Streams;

   TYPE
      Log = POINTER TO LogRec;
      LogRec = RECORD (Disciplines.ObjectRec) END;

   PROCEDURE Create(VAR log: Log; s: Streams.Stream);

   PROCEDURE Open(log: Log; loglevel: INTEGER;
                  VAR s: Streams.Stream) : BOOLEAN;
      (* opens a stream for passing log msgs with the given log level;
	 Open returns FALSE and do not open a stream if the msg
	 is to be surpressed (see below);
	 note that multiple open log msgs are not supported
      *)

   PROCEDURE SetLogLevel(log: Log; maxlevel: INTEGER);
      (* suppress all log msgs with a level > maxlevel;
         default is 0
      *)

   PROCEDURE SetMaximalNestLevel(log: Log; maxnestlevel: INTEGER);
      (* suppress all log msgs coming from a nesting level > maxnestlevel;
         -1 means that there are no restrictions regarding the nest level;
	 default is -1
      *)

   PROCEDURE Flatten(log: Log);
      (* ignore nest levels entirely and do not intend the output
	 according to them (is useful for very low log levels only)
      *)

   PROCEDURE EnterLevel(log: Log; VAR key: INTEGER);
      (* increase the current nesting level;
         the returned key must be given to LeaveLevel later
	 (CompilerLogs uses key to check proper balancing)
      *)

   PROCEDURE LeaveLevel(log: Log; key: INTEGER);
      (* decrease the current nesting level *)

   PROCEDURE LogLevel(log: Log) : INTEGER;
      (* return the current log level, that is the amount of detail
	 that is requested; the minimal level is 0 (no log at all
	 is to be given); the larger the more detailed informations
	 may be provided; -1 means that all informations are to
	 be given without restrictions
      *)

   PROCEDURE NestLevel(log: Log) : INTEGER;
      (* return the current nesting level; 0 means we are the outmost level *)

END CompilerLogs.
