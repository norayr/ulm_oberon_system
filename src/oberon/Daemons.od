(* Ulm's Oberon Library
   Copyright (C) 1989-2000 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: Daemons.od,v 1.2 2000/06/20 08:27:52 lutz Exp borchert $
   ----------------------------------------------------------------------------
   $Log: Daemons.od,v $
   Revision 1.2  2000/06/20 08:27:52  lutz
   exportierte Prozedur Create hinzugefuegt.

   Revision 1.1  2000/06/20  07:32:49  lutz
   Initial revision

   ----------------------------------------------------------------------------
   (* Sven Lutz, April 1999 *)
   ----------------------------------------------------------------------------
*)
DEFINITION Daemons;
   (* Daemons.Daemon is a datastructure which - together with a
      Task - listens to a port other parties may connect to (typically
      via telnet). For each party which connects to the port a job (of
      type ServiceForChannel) is started.
   *)

   IMPORT Events, Networks, RelatedEvents, Services, Streams;

   TYPE
      Daemon = POINTER TO DaemonRec;
      (* One structure for each daemon group. May be expanded by the
         client for additional information shared by all parties.
	 Supports Resources!
      *)
      DaemonRec =
         RECORD
            (Services.ObjectRec)
         END;

      ServiceForChannel = PROCEDURE (daemon: Daemon;
            inOut: Streams.Stream);
      (* For communication with the connected party.
         daemon may carry additional information common to all parties.
         The procedure must terminate when daemon terminates.
      *)

   PROCEDURE Start(daemon: Daemon; plugin: Networks.Address;
         serviceForChannel: ServiceForChannel): BOOLEAN;
      (* Starts a daemon that runs in a newly created task and listens to
         port plugin. Note that daemon is to be created by the caller.
         For each connected party serviceForChannel is started as job.
      *)

   PROCEDURE Create(VAR daemon: Daemon; plugin: Networks.Address;
         serviceForChannel: ServiceForChannel;
	 errors: RelatedEvents.Object): BOOLEAN;
      (* Starts a daemon that runs in a newly created task and listens to
         port plugin.
         For each connected party serviceForChannel is started as job.
      *)

END Daemons.
