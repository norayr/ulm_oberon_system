(* Ulm's Oberon Library
   Copyright (C) 1989-1994 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: Coroutines.om,v 1.2 1994/07/05 12:55:40 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: Coroutines.om,v $
   Revision 1.2  1994/07/05  12:55:40  borchert
   Coroutines.main points now to static storage

   Revision 1.1  1994/02/23  07:48:20  borchert
   Initial revision

   ----------------------------------------------------------------------------
   AFB 2/90
   ----------------------------------------------------------------------------
*)

MODULE Coroutines;

   (* run time interface to coroutines *)

   IMPORT SYS := SYSTEM;

   TYPE
      Coroutine = SYS.COROUTINE;

      (* $P- $O- *)
      CoroutineTag = POINTER TO CoroutineTagRec;
      CoroutineTagRec =
	 RECORD
	    size: LONGINT;
	    module: LONGINT;
	    typeno: INTEGER;
	    hierlen: INTEGER;
	    sentinel: LONGINT;
	 END;
      (* $P= $O= *)

      CoroutineRec =
	 RECORD
	    (* see GenExpr.m2 *)
	    interrupts: LONGINT;
	    started: LONGINT;
	    ucontext: ARRAY 24 OF BYTE; (* ucontext_t *)
	 END;
      CoroutinePtr = POINTER TO CoroutineRec;

   VAR
      defaultsize: LONGINT;
	 (* default stack size of a coroutine,
	    the size of the activation record of the procedure
	    calling CRSPAWN is added to default;
	    the default is taken if the second parameter of CRSPAWN
	    is omitted
	 *)
      tag: CoroutineTag; (* used for all coroutines *)
      tagrec: ARRAY SYS.SIZE(CoroutineTagRec) OF BYTE;
	 (* use static storage to assure a constant pointer *)

      main: Coroutine;
	 (* is allocated during initialisation of this module
	    and points to the main coroutine
	 *)

     tc : CoroutinePtr;
     tt : CoroutineTag;

   VAR
      mainrec: (* see GenExpr.m2 *)
	 ARRAY
	    SYS.SIZE(CoroutineTag) +
	    SYS.SIZE(CoroutineRec)
	 OF BYTE;

      source: Coroutine;
	 (* the last CRSWITCH operation was executed by this coroutine *)

      current: Coroutine;
	 (* coroutine currently active *)

      (* private components *)
      tagloc: LONGINT;

BEGIN
   (* Check Compiler Assertions *)
   tc := NIL; tt := NIL;
   ASSERT (SYS.ADR (tc.interrupts) = 0);
   ASSERT (SYS.ADR (tc.started) = 4);
   ASSERT (SYS.ADR (tc.ucontext[0]) = 8);
   ASSERT (SYS.ADR (tt.size) = 0);
   ASSERT (SYS.ADR (tt.module) = 4);
   ASSERT (SYS.ADR (tt.typeno) = 8);
   ASSERT (SYS.ADR (tt.hierlen) = 12);
   ASSERT (SYS.ADR (tt.sentinel) = 16);
   tag := SYS.VAL(CoroutineTag, SYS.ADR(tagrec));
   tag.size := SYS.SIZE(CoroutineRec);
   ASSERT (tag.size = 32);  (* 32 is hardcoded in the compiler. *)
   tag.module := SYS.VAL(LONGINT, 0);
   tag.typeno := 0; tag.hierlen := 0; tag.sentinel := MIN(LONGINT);

   (* coroutines prefer coroutine records to be static *)
   main := SYS.VAL(Coroutine,
      SYS.VAL (LONGINT, SYS.ADR(mainrec)) + SYS.SIZE(CoroutineTag));
   (* patch tag field of main *)
   tagloc := SYS.VAL(LONGINT, main) - SYS.SIZE(CoroutineTag);
   SYS.PUT(tagloc, SYS.VAL(LONGINT, tag));
   current := main;

   defaultsize := 8192;
END Coroutines.
