(* Ulm's Oberon Library
   Copyright (C) 1989-1994 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: UntaggedSto.om,v 1.3 1995/11/17 13:09:29 naegele Exp $
   ----------------------------------------------------------------------------
   $Log: UntaggedSto.om,v $
   Revision 1.3  1995/11/17  13:09:29  naegele
   interface procedure SetChunkSize (size: Size) : BOOLEAN
   changed to          ChunkSize (size: Size) : Size

   Revision 1.2  1994/07/19  12:09:34  naegele
   only a few text changes

   Revision 1.1  1994/04/05  12:04:34  naegele
   Initial revision

   ----------------------------------------------------------------------------
*)

MODULE UntaggedStorage;

   (* allocating interface for memory not affected by garbage collection *)

   IMPORT Objects, Process, SYSTEM, Types;

   TYPE
      Address = Types.UntracedAddress;
      Size = Types.Size;

   CONST
      Nil = SYSTEM.VAL(Address, NIL);

   TYPE
      Status = POINTER TO StatusRec;
      StatusRec = RECORD
         (Objects.ObjectRec)
         allocated: Size;
            (* total number of bytes which are currently under
               control of New and Dispose
            *)
         consumed: Size;
            (* total number of bytes which are currently in use
               (<= allocated)
            *)
         chunksize: Size;
            (* size of new memory chunks which will be allocated from the
               operating system when more memory is needed
            *)
      END;

   TYPE
      NewProc = PROCEDURE (size: Size) : Address;
      DisposeProc = PROCEDURE (ptr: Address);
      UseProc = PROCEDURE (ptr: Address; size: Size);
      GetStatusProc = PROCEDURE (VAR status: Status);
      ChunkSizeProc = PROCEDURE (size: Size) : Size;

      Interface =
         RECORD
            new: NewProc;
            dispose: DisposeProc;
            use: UseProc;
            getStatus: GetStatusProc;
            chunkSize: ChunkSizeProc;
         END;

   VAR
      (* private *)
      sif: Interface;
      sifDefined: BOOLEAN;

   (* === private procedures ============================================== *)

   PROCEDURE Exit;
      (* to be called if we have no interface defined yet *)
   BEGIN
      Process.Exit(255)
   END Exit;

   (* === public procedures =============================================== *)

   PROCEDURE New(size: Size) : Address;
      (* tries to allocate size bytes of memory
         on success, a ptr to that area - otherwise Nil - is returned
         note: objects created by New are untagged (!)
         pointer types pointing onto such objects have to be declared
         while compiler options P and/or O are switched off;
         this assures:
         type tests are rejected
         garbage collector is not aware of this objects
      *)
   BEGIN
      IF ~sifDefined THEN Exit END;
      RETURN sif.new(size);
   END New;

   PROCEDURE Dispose(ptr: Address);
      (* releases a memory area which has been allocated by New *)
   BEGIN
      IF ~sifDefined THEN Exit END;
      sif.dispose(ptr);
   END Dispose;

   PROCEDURE Use(ptr: Address; size: Size);
      (* puts the memory interval [ptr, ptr+size) into the free list of
         New; this interval must not be allocated earlier by using New
         or MODULE Storage (via NEW or SYSTEM.NEW), but it can be any
         piece of memory which the garbage collector is not aware of)
      *)
   BEGIN
      IF ~sifDefined THEN Exit END;
      sif.use(ptr, size);
   END Use;

   PROCEDURE GetStatus(VAR status: Status);
      (* return status information *)
   BEGIN
      IF ~sifDefined THEN Exit END;
      sif.getStatus(status);
   END GetStatus;

   PROCEDURE ChunkSize(size: Size) : Size;
      (* set/get the current chunk size
         the chunk size is the size of new memory chunks allocated from
         the operating system when more memory is needed
	 size # 0  rounds size to the next possible value (>= size) which
                   can be used as chunk size
                   the new value is returned
	 size = 0  no change, just return the current value
      *)
   BEGIN
      IF ~sifDefined THEN Exit END;
      RETURN sif.chunkSize(size);
   END ChunkSize;

   PROCEDURE Init(if: Interface);
      (* may be called only once during startup *)
   BEGIN
      IF ~sifDefined THEN
         sif := if; sifDefined := TRUE;
      END;
   END Init;

BEGIN
   sifDefined := FALSE;
END UntaggedStorage.
