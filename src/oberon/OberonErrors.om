(* Ulm's Oberon Library
   Copyright (C) 1989-1998 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: OberonError.om,v 1.1 1998/03/18 09:58:30 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: OberonError.om,v $
   Revision 1.1  1998/03/18 09:58:30  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

MODULE OberonErrors;

   IMPORT ASCII, CompilerErrors, ConstStrings, Disciplines, RelatedEvents,
      Sources := CompilerSources, Streams, Sym := OberonSymbols, Write;

   PROCEDURE Open(VAR es: Streams.Stream; at: Sym.Attribute);
   BEGIN
      ASSERT((at.loc # NIL) & (at.loc.src # NIL));
      CompilerErrors.Open(es);
      CompilerErrors.AtObject1(es, at);
      RelatedEvents.Forward(es, at.loc.src);
   END Open;

   PROCEDURE At2(es: Streams.Stream; at: Sym.Attribute);
   BEGIN
      ASSERT(at.loc # NIL);
      CompilerErrors.AtObject2(es, at);
   END At2;

   PROCEDURE Ref(es: Streams.Stream; ident: Sym.Ident);
   BEGIN
      IF ident.loc # NIL THEN
	 CompilerErrors.RefObject(es, ident);
      END;
   END Ref;

   PROCEDURE WriteString(es: Streams.Stream; string: ConstStrings.String);
   BEGIN
      Write.CharS(es, ASCII.quote);
      ConstStrings.Write(es, string);
      Write.CharS(es, ASCII.quote);
   END WriteString;

   PROCEDURE Close(es: Streams.Stream);
   BEGIN
      CompilerErrors.Close(es, es);
   END Close;

   PROCEDURE Error(at: Sym.Attribute; msg: ARRAY OF CHAR);
      VAR
	 es: Streams.Stream;
   BEGIN
      Open(es, at); Write.StringS(es, msg); Close(es);
   END Error;

END OberonErrors.
