(* Ulm's Oberon Library
   Copyright (C) 1989-1994 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: RemoteObjec.od,v 1.12 2005/02/09 10:01:51 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: RemoteObjec.od,v $
   Revision 1.12  2005/02/09 10:01:51  borchert
   privateObject error code added

   Revision 1.11  1998/03/24 23:04:55  borchert
   initProxy if procedure added

   Revision 1.10  1996/01/04  14:05:03  borchert
   - interface for recovery mechanisms added: InstallRecoverHandler and
     ReImport
   - CreateRegistrationCondition added to allow blocking until
     the registration is finished

   Revision 1.9  1995/12/13  17:20:00  borchert
   optional Register interface procedure added (was needed for Shadows)

   Revision 1.8  1995/12/11  16:05:07  borchert
   - exported objects no longer need to be extensions of
     PersistentDisciplines.Object -- Services.Object is sufficient
   - ExportMode added (standalone was useful for RemoteIterators)
   - RemoteObjects is now a service

   Revision 1.7  1994/10/28  09:05:37  borchert
   Drop removed because RemoteObjects supports now Resources;
   address parameter added to AddPort to allow reopens of broken channels

   Revision 1.6  1994/09/12  16:03:36  borchert
   old Export & Import which based on RemoteObjects.Address removed
   ExportAndWrite & ReadAndImport renamed to Export & Import

   Revision 1.5  1994/09/08  11:52:15  borchert
   Drop parameter type changed to PersistentDisciplines.Object

   Revision 1.4  1994/09/08  11:02:04  borchert
   the definition of ObjectID was accidently left

   Revision 1.3  1994/09/08  10:29:31  borchert
   ExportAndWrite & ReadAndImport added
   Export returns an address instead of an object id
   CreateAddress & GetPorts removed

   Revision 1.2  1994/08/29  09:37:43  borchert
   parallel access mode added

   Revision 1.1  1994/02/23  08:04:04  borchert
   Initial revision

   ----------------------------------------------------------------------------
   AFB 2/94
   ----------------------------------------------------------------------------
*)

DEFINITION RemoteObjects;

   (* interface to remote objects *)

   IMPORT Conditions, Events, Messages, Networks, Objects, PersistentObjects,
      RelatedEvents, Services, Streams;

   CONST
      serial = 0; parallel = 1;
	 (* exported objects may be either exported for serial or
	    parallel accesses
	 *)
      standalone = 0; linked = 1;
	 (* this mode is returned by the getparams if procedure, if present,
	    and defaults to linked:

	    standalone:		just some informations (i.e. params) are
				carried to the other side; no active
				connection is maintained; this is only
				useful in some marginal cases
	    linked:		the standard case where the proxy object
				remains linked to the original object
	 *)
   TYPE
      AccessMode = SHORTINT; (* serial or parallel *)
      ExportMode = SHORTINT; (* standalone or linked *)

   CONST
      serviceName = "RemoteObjects";
   TYPE
      GetParamsProc = PROCEDURE (object: Services.Object;
				 VAR params: PersistentObjects.Object;
				 VAR mode: ExportMode);
	 (* called for original object; may return NIL;
	    returned params are later passed to createProxy;
	    this if procedure is called only once even in case
	    of multiple exports
	 *)
      CreateProxyProc = PROCEDURE (VAR object: Services.Object;
				   params: PersistentObjects.Object);
	 (* create proxy object which converts operations into messages;
	    params may be NIL
	 *)
      InitProxyProc = PROCEDURE (object: Services.Object;
                                 params: PersistentObjects.Object);
	 (* like CreateProxy but for an existing object *)
      RegisterProc = PROCEDURE (object: Services.Object);
	 (* is called shortly after CreateProxy (if provided)
	    and may invoke some operations on that operation
	    (this must not be done by CreateProxy)
	 *)
      Interface = POINTER TO InterfaceRec;
      InterfaceRec =
	 RECORD
	    (Objects.ObjectRec)
	    getParams: GetParamsProc; (* may be NIL *)
	    createProxy: CreateProxyProc;
	    initProxy: InitProxyProc; (* may be NIL *)
	    register: RegisterProc; (* may be NIL *)
	    msgHandler: Messages.Handler;
	       (* converts messages into operations *)
	 END;

   CONST
      accessFailed = 0; (* access to remote object failed *)
      invalidMessage = 1; (* invalid message received from partner *)
      sendFailed = 2; (* cannot send message to remote object *)
      receiveFailed = 3; (* cannot receive message from remote object *)
      connectionBroken = 4; (* channel was alive and is now broken *)
      invalidPartner = 5; (* partner doesn't follow RemoteObjects protocol *)
      unknownObject = 6; (* object not known on the other side *)
      droppedObject = 7; (* connection to remote object is closed *)
      closedConnection = 8; (* connection has been closed by partner *)
      objectWithdrawn = 9; (* remote object has been withdrawn *)
      listenerKilled = 10; (* channel listener has been shut down *)
      unexportableObject = 11; (* given object cannot be exported *)
      unknownType = 12; (* imported object is of unknown type *)
      unsupportedType = 13; (* ``RemoteObjects'' service not supported *)
      typeGuardFailure = 14; (* guard of GuardedRead failed *)
      suspendedObject = 15; (* object is currently suspended *)
      privateObject = 16; (* object has no public ports *)
      errors = 17;
   TYPE
      ErrorCode = SHORTINT;
      ErrorEvent = POINTER TO ErrorEventRec;
      ErrorEventRec =
	 RECORD
	    (Events.EventRec)
	    errorcode: ErrorCode;
	 END;
   VAR
      error: Events.EventType;
      errormsg: ARRAY errors OF Events.Message;

   TYPE
      RecoverProc = PROCEDURE (object: Services.Object; errorCode: ErrorCode);
	 (* may be passed via InstallRecoverHandler;
	    has either to terminate or to successfully(!) re-import
	    the given object;
	    this procedure may block the current task for longer
	    time periods and is also free to try re-imports many times
	 *)

   (* ==== registration of RemoteXXX modules ===================== *)

   PROCEDURE Register(type: Services.Type; if: Interface; access: AccessMode);
      (* offer ``RemoteObjects'' service for the given type *)

   (* ==== client side =========================================== *)

   PROCEDURE Import(s: Streams.Stream;
		    VAR object: Services.Object) : BOOLEAN;

   PROCEDURE GuardedImport(s: Streams.Stream; guard: Services.Type;
			   VAR object: Services.Object) : BOOLEAN;

   PROCEDURE InstallRecoverHandler(object: Services.Object;
				   recover: RecoverProc);
      (* installation of a recovery procedure on the client side
	 which gets called in case of broken connections;
	 multiple or invalid calls are silently ignored
      *)

   PROCEDURE ReImport(s: Streams.Stream; proxy: Services.Object) : BOOLEAN;
      (* may be called by recovery procedures only *)

   PROCEDURE CreateRegistrationCondition(VAR condition: Conditions.Condition;
				         proxy: Services.Object);
      (* returns NIL if the object does not need to be registered,
	 if registration is already finished, or if proxy
	 is not a proxy object
      *)

   (* ==== server side =========================================== *)

   PROCEDURE Exportable(object: Services.Object) : BOOLEAN;

   PROCEDURE Export(s: Streams.Stream; object: Services.Object) : BOOLEAN;

   PROCEDURE Withdraw(object: Services.Object);

   PROCEDURE AddPort(port: Networks.Socket;
		     address: Networks.Address;
		     errors: RelatedEvents.Object) : BOOLEAN;

   PROCEDURE RemoveAllPorts;

   PROCEDURE CloseAllConnections;

END RemoteObjects.
