(* Ulm's Oberon Compiler
   Copyright (C) 1989-2005 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   This file is part of Ulm's Oberon Compiler.

   Ulm's Oberon Compiler is free software; you can redistribute it
   and/or modify it under the terms of the GNU General Public License
   as published by the Free Software Foundation; either version 1, or
   (at your option) any later version.

   Ulm's Oberon Compiler is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with Ulm's Compiler Toolkit; see the file COPYING.  If not,
   write to the Free Software Foundation, 675 Mass Ave, Cambridge, MA
   02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: OberonCheck.om,v 1.2 2005/02/05 17:53:42 borchert Exp borchert $
   ----------------------------------------------------------------------------
   $Log: OberonCheck.om,v $
   Revision 1.2  2005/02/05 17:53:42  borchert
   language parameter removed

   Revision 1.1  2004/06/02 16:31:26  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

MODULE OberonCheckIn;

   IMPORT Args, BoolArgs, CDB, CDBNames, Clocks, CompilerDatabases,
      CompilerObjects, CompilerPragmas, Compilers, Conclusions, ConstStrings,
      Errors, Events, InetTCP, Iterators, Jobs, Names, Networks,
      OberonCompiler, OberonPragmas, Paths, PersistentEvents,
      PersistentObjects, PersistentTexts, PrivateShards, Process,
      RelatedEvents, RemoteCDBNames, RemoteEvents, RemoteIterators,
      RemoteNames, RemoteObjects, RemoteStreams, Resources, Services,
      Shadows, Shards, Sources := CompilerSources, StdCDBNames, Storage,
      Streams, StringArgs, Strings, StrListArgs, UnixCommandLine,
      UnixEnvironment, UnixFiles, UnixMappedFiles, UnixNames,
      UnixOberonBuiltIns, UnixOberonSources, Write;

   VAR
      intensity: INTEGER;
      lidType: Services.Type;
      errors: RelatedEvents.Object;
      auth: Shards.Lid;
      basedir: ARRAY 512 OF CHAR;
      db: CompilerDatabases.Database;
      src: Sources.Source;
      args, sourceArgs: Args.Arguments;
      filename, authfile: ARRAY 512 OF CHAR;
      strlist: StrListArgs.Value;
      member: StrListArgs.Member;

   PROCEDURE DoTermination(job: Jobs.Job);
   BEGIN
      Process.Exit(Process.indicateFailure);
   END DoTermination;

   PROCEDURE TerminationHandler(event: Events.Event);
      VAR
	 job: Jobs.Job;
   BEGIN
      IF event IS Resources.Event THEN
	 IF event(Resources.Event).change # Resources.terminated THEN
	    RETURN
	 END;
      END;
      NEW(job); Jobs.Submit(job, DoTermination);
   END TerminationHandler;

   PROCEDURE DieOnTerminationOf(object: Resources.Resource);
      VAR
	 eventType: Events.EventType;
   BEGIN
      Resources.TakeInterest(object, eventType);
      Events.Handler(eventType, TerminationHandler);
   END DieOnTerminationOf;

   PROCEDURE CreateLid(VAR lid: Shards.Lid; filename: ARRAY OF CHAR);
      VAR
	 s: Streams.Stream;
   BEGIN
      IF ~UnixFiles.Open(s, filename, UnixFiles.read, Streams.onebuf,
			 errors) THEN
	 Conclusions.Conclude(errors, Errors.fatal, "");
      END;
      RelatedEvents.Forward(s, errors);
      IF ~PersistentObjects.GuardedRead(s, lidType, lid) THEN
	 Conclusions.Conclude(errors, Errors.fatal, filename);
      END;
   END CreateLid;

   PROCEDURE FetchString(name, default, envparam: ARRAY OF CHAR;
                         VAR string: ARRAY OF CHAR);
      VAR
	 arg: StringArgs.Value;
   BEGIN
      Args.GetValue(args, name, arg);
      IF arg = NIL THEN
	 IF ~UnixEnvironment.String(envparam, string) THEN
	    COPY(default, string);
	 END;
      ELSE
	 ConstStrings.Extract(string, arg.string);
      END;
   END FetchString;

   PROCEDURE Flag(flagname: ARRAY OF CHAR) : BOOLEAN;
      VAR
	 flag: BoolArgs.Value;
   BEGIN
      Args.GetValue(args, flagname, flag);
      RETURN (flag # NIL) & flag.bool
   END Flag;

   PROCEDURE UsageLine;
   BEGIN
      Write.StringS(Streams.stderr, "Usage: ");
      Write.StringS(Streams.stderr, Process.name);
      Write.LineS(Streams.stderr, " [options] source file...");
   END UsageLine;

   PROCEDURE Usage;
   BEGIN
      UsageLine;
      Write.LineS(Streams.stderr, "For more infos try ``-help''");
      Process.Exit(Process.indicateFailure);
   END Usage;

   PROCEDURE ProcessArgs(VAR args: Args.Arguments);
      VAR
	 pcontext: CompilerPragmas.PragmaContext;
   BEGIN (* ProcessArgs *)
      Args.Create(args);
      RelatedEvents.QueueEvents(args);
      Args.Define(args, "auth",     "a", StringArgs.type, "auth for CDB");
      Args.Define(args, "basedir",  "b", StringArgs.type, "base path of CDB");
      Args.Define(args, "touch",    "t", BoolArgs.type, "update time stamp");
      Args.Define(args, "args",     0X,  StrListArgs.type, "source file...");
      Compilers.DefineArgs(OberonCompiler.compiler, args);
      CompilerPragmas.DefineArgs(args);
      Args.Scan(args, Args.systemScanners);

      (* check pragma specification errors at this early stage,
	 otherwise they will be later noticed by OberonParse
      *)
      OberonPragmas.Create(pcontext);
      RelatedEvents.Forward(pcontext, args);
      IF ~CompilerPragmas.ProcessArgs(pcontext, args) THEN
	 UsageLine;
	 Conclusions.Conclude(args, Errors.fatal, "");
      END;

      IF RelatedEvents.EventsPending(args) THEN
	 UsageLine;
	 Conclusions.Conclude(args, Errors.fatal, "");
      END;
   END ProcessArgs;

   PROCEDURE ExtractSourceArgs(VAR sourceArgs: Args.Arguments;
                               args: Args.Arguments);
      (* remove unneeded arguments to save the space required
	 for the source arguments in persistent storage
      *)
   BEGIN
      Args.CreateCopyOf(sourceArgs, args);
      Args.SetValue(sourceArgs, "auth", NIL);
      Args.SetValue(sourceArgs, "args", NIL);
      Args.SetValue(sourceArgs, "basedir", NIL);
      Args.SetValue(sourceArgs, "touch", NIL);
   END ExtractSourceArgs;

BEGIN
   intensity := Storage.Intensity(4);
   NEW(errors); RelatedEvents.QueueEvents(errors);
   Services.SeekType("Shards.Lid", lidType);

   ProcessArgs(args);
   FetchString("basedir", "/pub/cdb/oberon", "CDB_BASEDIR", basedir);
   FetchString("auth", "", "CDB_AUTH", authfile);
   IF authfile = "" THEN
      auth := NIL;
   ELSE
      CreateLid(auth, authfile);
   END;
   Args.GetValue(args, "args", strlist);
   IF strlist = NIL THEN
      Usage;
   END;
   ExtractSourceArgs(sourceArgs, args);

   IF ~CDB.Open(db, basedir, auth, errors) THEN
      Conclusions.Conclude(errors, Errors.fatal, "");
   END;
   RelatedEvents.Forward(db, errors);

   member := strlist.head;
   WHILE member # NIL DO
      ConstStrings.Extract(filename, member.string);
      IF ~UnixOberonSources.Create(src, filename, sourceArgs, errors) THEN
	 Conclusions.Conclude(errors, Errors.fatal, filename);
      END;
      IF Flag("touch") THEN
	 Clocks.GetTime(Clocks.system, src.header.date);
      END;
      RelatedEvents.Forward(src, errors);
      IF ~CompilerDatabases.StoreSrc(db, src, errors) THEN
	 Conclusions.Conclude(errors, Errors.fatal, filename);
      END;
      Resources.Notify(src, Resources.terminated);
      member := member.next;
   END;

   Process.Exit(Process.indicateSuccess);
END OberonCheckIn.
