(* Ulm's Oberon Library
   Copyright (C) 1989-2004 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id$
   ----------------------------------------------------------------------------
   $Log$
   ----------------------------------------------------------------------------
*)

DEFINITION TwoPlayerAbstractStrategyGames;

   (* two-person board games with perfect information and no chance *)

   IMPORT ChessClocks, Events, Objects, PersistentObjects;

   CONST
      undefined = 0; player1 = 1; player2 = 2;
   TYPE
      Player = SHORTINT; (* undefined, player1, player 2 *)

   TYPE
      Move = RECORD (PersistentObjects.ObjectRec) END;
      Board = RECORD (PersistentObjects.ObjectRec) END;
      Game = RECORD (PersistentObjects.ObjectRec) END;

   TYPE
      Event = POINTER TO EventRec;
      EventRec =
	 RECORD
	    (Events.EventRec)
	    game: Game;
	    moveNumber: INTEGER; (* counting from 0 *)
	    move: Move;
	    board: Board; (* after move *)
	 END;

   TYPE
      Interface =
	 RECORD
	    (Objects.ObjectRec)
	 END;
   TYPE
      Description =
	 RECORD
	    (Objects.ObjectRec)
	    names: ARRAY 2 OF ARRAY 64 OF CHAR;
	    chessClock: ChessClocks.ChessClock;
	 END;

   PROCEDURE Init(game: Game; if: Interface; desc: Description);

   PROCEDURE GetName(game: Game; player: Player; VAR name: ARRAY OF CHAR);
   PROCEDURE GetChessClock(game: Game;
                           VAR chessClock: ChessClocks.ChessClock);
   PROCEDURE TakeInterest(game: Game; VAR eventType: Events.EventType);
   PROCEDURE IterateMoves(game: Game; VAR it: Iterators.Iterator);
   PROCEDURE GetBoard(game: Game; VAR board: Board);

   PROCEDURE CreateInitialBoard(game: Game; VAR board: Board);
   PROCEDURE CreateNewBoardFrom(game: Game; VAR board: Board; orig: Board);

   PROCEDURE Finished(board: Board) : BOOLEAN;
   PROCEDURE Winner(board: Board) : Player;
   PROCEDURE OnTurn(board: Board) : Player;
   PROCEDURE Opponent(player: Player) : Player;

   PROCEDURE ValidMove(board: Board; move: Move) : BOOLEAN;
   PROCEDURE PerformMove(board: Board; move: Move);
   PROCEDURE GetAllMoves(VAR it: Iterators.Iterator; board: Board);

END TwoPlayerAbstractStrategyGames.
