(* Ulm's Oberon Library
   Copyright (C) 1989-1994 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: UnixDirecto.om,v 1.3 2001/04/30 14:52:09 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: UnixDirecto.om,v $
   Revision 1.3  2001/04/30 14:52:09  borchert
   adapted to Solaris 2.x

   Revision 1.2  1995/01/04  16:59:18  borchert
   - assertions of Assertions replaced by real assertions
   - support of Services added

   Revision 1.1  1994/02/23  07:27:02  borchert
   Initial revision

   ----------------------------------------------------------------------------
   AFB 9/89
   ----------------------------------------------------------------------------
*)

MODULE UnixDirectories;

   IMPORT Events, Priorities, RelatedEvents, Services, Streams, Strings, Sys,
      SYS := SYSTEM, SysConversions, SysErrors, SysIO, SysStat, Types;

   CONST
      dirsize = 255;		(* maximal file name length in directory *)
      namelength = dirsize+1;	(* inclusive 0X *)

   TYPE
      FileName = ARRAY namelength OF CHAR;
      Inode = LONGINT;		(* 0..65535 *)
      Entry =
	 RECORD
	    inode: Inode;
	    padd: LONGINT;  (* Padding enforced by SysConversions. *)
	    name: FileName;
	 END;

   CONST
      (* conversion of struct dirent to Entry *)
      direntFormat = "lL=d_fileno/l-=padd/-l=d_off/-S=d_reclen/256:cc=d_name";
      diroffFormat = "-L=d_fileno/-l=d_off/lS=d_reclen";
   VAR
      direntFmt: SysConversions.Format;
      diroffFmt: SysConversions.Format;

   CONST
      maxbufsize = MAX(INTEGER) DIV 2; (* we never allocate that much... *)
   TYPE
      Buffer = ARRAY SYS.SIZE(Entry) OF BYTE;
      InputBuffer = POINTER TO ARRAY maxbufsize OF BYTE;
      Stream = POINTER TO StreamRec;
      StreamRec =
	 RECORD
	    (Streams.StreamRec)
	    file: SysIO.File;
	    buf: Buffer;
	    pos: Streams.Count;
	    inbuf: InputBuffer;
	    inbufpos: Streams.Count;
	    inbuflen: Streams.Count;
	    blocksize: Streams.Count;
	    empty: BOOLEAN; (* buf empty? *)
	 END;

   VAR
      dirif: Streams.Interface;
      dircaps: Streams.CapabilitySet;
      dirtype: Services.Type; (* UnixDirectories.Stream *)

   PROCEDURE Fill(s: Streams.Stream) : BOOLEAN;
      VAR
	 d0, d1: INTEGER;
	 offset: SysIO.Count;
	 addr: Types.Address;
   BEGIN
      WITH s: Stream DO
	 IF s.inbufpos >= s.inbuflen THEN
	    IF ~SYS.UNIXCALL(Sys.getdents, d0, d1, s.file,
			     s.inbuf, s.blocksize) THEN
	       SysErrors.Raise(s, d0, Sys.getdents, "");
	       RETURN FALSE
	    END;
	    IF d0 = 0 THEN
	       RETURN FALSE (* end of file *)
	    END;
	    s.inbuflen := d0;
	    s.inbufpos := 0;
	 END;
	 addr := SYS.ADR(s.inbuf[s.inbufpos]);
	 SysConversions.ByFmtAndAddrFromC(addr, SYS.ADR(s.buf), direntFmt);
	 SysConversions.ByFmtAndAddrFromC(addr, SYS.ADR(offset), diroffFmt);
	 INC(s.inbufpos, offset);
	 s.pos := 0; s.empty := FALSE;
      END;
      RETURN TRUE
   END Fill;

   PROCEDURE Read(s: Streams.Stream; VAR byte: BYTE) : BOOLEAN;
   BEGIN
      WITH s: Stream DO
	 IF (s.empty OR (s.pos >= SYS.SIZE(Buffer))) & ~Fill(s) THEN
	    RETURN FALSE
	 END;
	 byte := s.buf[s.pos]; INC(s.pos);
      END;
      RETURN TRUE
   END Read;

   PROCEDURE ReadRec(s: Streams.Stream;
		     VAR rec: ARRAY OF BYTE;
		     off, cnt: Streams.Count) : Streams.Count;
      VAR
	 count: Streams.Count;
	 index: LONGINT;
   BEGIN
      WITH s: Stream DO
	 IF (s.empty OR (s.pos >= SYS.SIZE(Buffer))) & ~Fill(s) THEN
	    RETURN 0
	 END;
	 count := 0; index := off;
	 WHILE (index < LEN(rec)) &
	       (count < cnt) & (s.pos < SYS.SIZE(Entry)) DO
	    rec[index] := s.buf[s.pos];
	    INC(s.pos); INC(count); INC(index);
	 END;
	 RETURN count
      END;
   END ReadRec;

   PROCEDURE Seek(s: Streams.Stream;
		  pos: Streams.Count; whence: Streams.Whence) : BOOLEAN;
   BEGIN
      WITH s: Stream DO
	 CASE whence OF
	 | Streams.fromStart: s.empty := TRUE;
			      RETURN SysIO.Seek(s.file, pos, SysIO.fromStart, s)
	 | Streams.fromPos:   IF ~s.empty & (s.pos + pos >= 0) &
				 (s.pos + pos < SYS.SIZE(Buffer)) THEN
				 INC(s.pos, pos);
				 RETURN TRUE
			      ELSE
				 RETURN FALSE
			      END;
	 | Streams.fromEnd:   IF pos = 0 THEN
				 s.empty := TRUE;
				 RETURN SysIO.Seek(s.file, 0, SysIO.fromEnd, s)
			      ELSE
				 RETURN FALSE
			      END;
	 END;
      END;
   END Seek;

   PROCEDURE Tell(s: Streams.Stream; VAR pos: Streams.Count) : BOOLEAN;
   BEGIN
      WITH s: Stream DO
	 IF s.empty OR (s.pos >= SYS.SIZE(Buffer)) OR (s.pos = 0) THEN
	    RETURN SysIO.Tell(s.file, pos, s)
	 ELSE
	    RETURN FALSE
	 END;
      END;
   END Tell;

   PROCEDURE Close(s: Streams.Stream) : BOOLEAN;
      VAR
	 interrupted: BOOLEAN;
   BEGIN
      WITH s: Stream DO
	 RETURN SysIO.Close(s.file, s, TRUE, interrupted)
      END;
   END Close;

   PROCEDURE Open(VAR dir: Streams.Stream; dirname: ARRAY OF CHAR;
		  errors: RelatedEvents.Object) : BOOLEAN;
      (* open directory `dirname' for reading;
	 `dirname' must be 0X-terminated;
	 `dir' becomes an unbuffered stream;
	 positions in the sense of Streams.Seek and Streams.Tell 
	 are not necessarily byte positions;
	 Open returns FALSE if `dirname' cannot be opened
      *)
      VAR
	 file: SysIO.File;
	 newdir: Stream;
	 interrupted: BOOLEAN;
	 statbuf: SysStat.StatRec;
   BEGIN
      IF SysIO.Open(file, dirname, SysIO.rdonly, errors, TRUE, interrupted) &
	    SysStat.Fstat(file, statbuf, errors) THEN
	 NEW(newdir);
	 Services.Init(newdir, dirtype);
	 Streams.Init(newdir, dirif, dircaps, Streams.nobuf);
	 newdir.file := file;
	 newdir.empty := TRUE;
	 newdir.blocksize := statbuf.blksize;
	 SYS.NEW(newdir.inbuf, newdir.blocksize);
	 RelatedEvents.QueueEvents(newdir);
	 dir := newdir;
	 RETURN TRUE
      ELSE
	 RETURN FALSE
      END;
   END Open;

   PROCEDURE Init;

   BEGIN
      dircaps := {Streams.read, Streams.bufio,
		  Streams.seek, Streams.tell, Streams.close};
      NEW(dirif);
      dirif.read := Read;
      dirif.bufread := ReadRec;
      dirif.seek := Seek;
      dirif.tell := Tell;
      dirif.close := Close;

      Services.CreateType(dirtype, "UnixDirectories.Stream", "Streams.Stream");

      (* These Assertions aren't true because OberonSize rounds up
       * to the next multiple of 8 Bytes. *)
      (* 
      ASSERT(SysConversions.OberonSize(direntFormat) = SYS.SIZE(Entry));
      *)
      SysConversions.Compile(direntFmt, direntFormat);

      (*
      ASSERT(SysConversions.OberonSize(diroffFormat) = SYS.SIZE(SysIO.Count));
      *)
      SysConversions.Compile(diroffFmt, diroffFormat);
   END Init;

BEGIN
   Init;
END UnixDirectories.
