(* Ulm's Oberon Library
   Copyright (C) 1989-1997 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: OneWayHashe.od,v 1.3 1998/04/04 18:28:38 martin Exp $
   ----------------------------------------------------------------------------
   $Log: OneWayHashe.od,v $
   Revision 1.3  1998/04/04  18:28:38  martin
   major revision: values are now proper objects,
   ExtractValue renamed CreateStream, Equal and Generator added

   Revision 1.2  1998/03/24  22:49:00  borchert
   module name fixed

   Revision 1.1  1997/04/02  13:54:54  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

DEFINITION OneWayHashes; (* Frank B.J. Fischer / rev.: mh *)

   IMPORT Objects, PersistentDisciplines, Services, Streams;

   TYPE
      Hash = POINTER TO HashRec;
      HashRec = RECORD (Services.ObjectRec) END;

      Value = POINTER TO ValueRec;
      ValueRec = RECORD (PersistentDisciplines.ObjectRec) END;

      GenerateProc     = PROCEDURE (hash: Hash; message: Streams.Stream;
				    VAR value: Value);
      BitlengthProc    = PROCEDURE (hash: Hash): LONGINT;

      Interface = POINTER TO InterfaceRec;
      InterfaceRec =
	 RECORD
	    (Objects.ObjectRec)
	    generate:	   GenerateProc;
	    bitlength:	   BitlengthProc;
	 END;

      GeneratorProc    = PROCEDURE (value: Value): Hash;
      EqualProc        = PROCEDURE (value1, value2: Value): BOOLEAN;
      CreateStreamProc = PROCEDURE (value: Value; VAR stream: Streams.Stream);

      ValueInterface = POINTER TO ValueInterfaceRec;
      ValueInterfaceRec =
	 RECORD
	    (Objects.ObjectRec)
	    generator:	   GeneratorProc;
	    equal:	   EqualProc;
	    createStream:  CreateStreamProc;
	 END;

   PROCEDURE Init(hash: Hash; if: Interface);

   PROCEDURE InitValue(value: Value; if: ValueInterface);

   PROCEDURE Generate(hash: Hash; message: Streams.Stream; VAR value: Value);
      (* generate hash value from all remaining bytes in message *)

   PROCEDURE Bitlength(hash: Hash): LONGINT;
      (* return fixed number of bits per hash value *)

   PROCEDURE Generator(value: Value): Hash;
      (* get hash that generated this value *)

   PROCEDURE Equal(value1, value2: Value): BOOLEAN;
      (* test whether two values generated by same hash are equal *)

   PROCEDURE CreateStream(value: Value; VAR stream: Streams.Stream);
      (* convert value to a stream, opened for reading *)

END OneWayHashes.
