(* Ulm's Oberon Library
   Copyright (C) 1989-1994 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: UnixDomainS.od,v 1.2 1994/09/21 13:50:37 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: UnixDomainS.od,v $
   Revision 1.2  1994/09/21  13:50:37  borchert
   - shares now common parts with Internet in UnixSockets
   - open condition added
   - AcceptCondition renamed to CreateAcceptCondition

   Revision 1.1  1994/02/23  07:27:10  borchert
   Initial revision

   ----------------------------------------------------------------------------
   AFB 1/92
   ----------------------------------------------------------------------------
*)

DEFINITION UnixDomainSockets;

   IMPORT Conditions, Disciplines, Networks, RelatedEvents, Streams,
      UnixSockets;

   TYPE
      Socket = POINTER TO SocketRec;
      SocketRec = RECORD (UnixSockets.SocketRec) END;

   PROCEDURE Open(VAR s: Streams.Stream; pathname: ARRAY OF CHAR;
		  bufmode: Streams.BufMode;
		  errors: RelatedEvents.Object) : BOOLEAN;

   PROCEDURE CreateOpenCondition(VAR condition: Conditions.Condition;
				 pathname: ARRAY OF CHAR);
   PROCEDURE TestAndOpen(VAR s: Streams.Stream;
			 condition: Conditions.Condition;
			 bufmode: Streams.BufMode;
			 errors: RelatedEvents.Object) : BOOLEAN;

   PROCEDURE CreateSomeSocket(VAR socket: Socket;
			      VAR pathname: ARRAY OF CHAR;
			      errors: RelatedEvents.Object) : BOOLEAN;
   PROCEDURE Listen(VAR socket: Socket; pathname: ARRAY OF CHAR;
		    errors: RelatedEvents.Object) : BOOLEAN;
   PROCEDURE Accept(socket: Socket;
		    VAR s: Streams.Stream; bufmode: Streams.BufMode) : BOOLEAN;
   PROCEDURE Remove(socket: Socket) : BOOLEAN;

   PROCEDURE CreateAcceptCondition(VAR condition: Conditions.Condition;
			           socket: Socket);

   PROCEDURE CreateAddress(VAR address: Networks.Address; path: ARRAY OF CHAR);
   PROCEDURE ConvertAddress(address: Networks.Address; VAR path: ARRAY OF CHAR);
   PROCEDURE SetAddress(address: Networks.Address; path: ARRAY OF CHAR);

END UnixDomainSockets.
