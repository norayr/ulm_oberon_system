(* Ulm's Oberon Library
   Copyright (C) 1989-2004 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: TermKeys.od,v 1.1 2004/06/11 12:11:26 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: TermKeys.od,v $
   Revision 1.1  2004/06/11 12:11:26  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

DEFINITION TermKeys; (* Ralf Beck *)

   (* Module TermKeys provides an interface for reading functionkeys   *)
   (* from a terminal. Clients should set the terminal's mode to       *)
   (* raw since most terminal drivers convert some byte sequences sent *)
   (* by functionkeys while in cooked mode.                            *)
   (* Keys are created as PersistentObjects                            *)

   IMPORT Disciplines, Events, Objects, PersistentObjects, Services, Sets, Streams;

   CONST
      (* function keys *)
      f0 = 0;
      f1 = 1;
      f2 = 2;
      f3 = 3;
      f4 = 4;
      f5 = 5;
      f6 = 6;
      f7 = 7;
      f8 = 8;
      f9 = 9;
      f10 = 10;
      f11 = 11;
      f12 = 12;
      f13 = 13;
      f14 = 14;
      f15 = 15;
      f16 = 16;
      f17 = 17;
      f18 = 18;
      f19 = 19;
      f20 = 20;

      cursorup = 21;
      cursordown = 22;
      cursorleft = 23;
      cursorright = 24;

      insert = 25;
      delete = 26;
      home = 27;
      end = 28;
      previous = 29;
      next = 30;

      functionkeys = 31;

   TYPE
      FunctionKeySet = ARRAY functionkeys+1 DIV Sets.setsize OF SET;

      Key = POINTER TO KeyRec; (* general abstraction of a terminalkey *)
      KeyRec =
         RECORD
            (PersistentObjects.ObjectRec)
         END;

      SimpleKey = POINTER TO SimpleKeyRec; (* ASCII characters, which are not  *)
      SimpleKeyRec =                       (* functionkeys                     *)
         RECORD
            (KeyRec)
            char: CHAR;
         END;

      FunctionKey = POINTER TO FunctionKeyRec; (* above functionkeys  *) 
      FunctionKeyRec =
         RECORD
            (KeyRec)
            code: INTEGER;
         END;

      (* interface procedures *)
      ReadProc = PROCEDURE(s: Streams.Stream; VAR key: Key): BOOLEAN;

      Interface = POINTER TO InterfaceRec;
      InterfaceRec =
         RECORD
            (Objects.ObjectRec)
            read: ReadProc;
         END;

   PROCEDURE CreateSimpleKey(VAR key: PersistentObjects.Object);
   PROCEDURE CreateFunctionKey(VAR key: PersistentObjects.Object);

   PROCEDURE Init(s: Streams.Stream; available: FunctionKeySet; if: Interface);
   (* initialize TermKeys discipline           *)
   (* available: set of available functionkeys *)
   (* if: Interface                            *)

   PROCEDURE Read(s: Streams.Stream; VAR key: Key): BOOLEAN;
   (* read key from terminal                           *)

   PROCEDURE Available(s: Streams.Stream; VAR keys: FunctionKeySet);
   (* return available functionkeys *)

END TermKeys.
