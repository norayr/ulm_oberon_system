DEFINITION InetHTTPDaemon;

   IMPORT
      Disciplines, Events, Networks, RelatedEvents, WebHandlers;
      
   TYPE
      HTTPD = POINTER TO HTTPDRec;
      HTTPDRec =
         RECORD
            (Disciplines.ObjectRec)
         END;
         
   CONST
      cantWriteTexts = 0; (* Can't write to a memory-object (Texts) *)
      cantTruncTexts = 1; (* Can't trunc a Texts-stream *)
      cantSeekOnTexts = 2; (* Can't seek on Texts-stream *)
      errorcodes = 3;
               
   TYPE
      ErrorCode = SHORTINT;

      ErrorEvent = POINTER TO ErrorEventRec;
      ErrorEventRec =
         RECORD
            (Events.EventRec)
            errorcode: ErrorCode;
         END;   
   
   VAR
      errorMessages: ARRAY errorcodes OF Events.Message;
      error: Events.EventType;
      
   PROCEDURE Start(httpD: HTTPD): BOOLEAN;
      (* Starts a new Daemon waiting for Requests on 'httpD.port'. Each Request
         is processed by 'httpD.handler'. 'Start' will return FALSE if
         'httpD.port' is already in use.
      *)
   
   PROCEDURE Terminate(httpD: HTTPD);
      (* Terminates a running daemon *)
      
   PROCEDURE Create(VAR httpD: HTTPD; port: Networks.Address; 
                    handler: WebHandlers.Handler);
      (* Creates an new Daemon. If the daemon is started it is waiting for
         Requests on 'port'. Incomming requests are handled by 'handler'.
      *)
   
END InetHTTPDaemon.
