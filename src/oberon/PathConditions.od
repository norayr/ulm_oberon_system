(* Ulm's Oberon Library
   Copyright (C) 1989-1995 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: PathConditi.od,v 1.2 2005/09/02 15:28:25 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: PathConditi.od,v $
   Revision 1.2  2005/09/02 15:28:25  borchert
   termination error added

   Revision 1.1  1995/12/29 10:54:28  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

DEFINITION PathConditions;

   IMPORT Conditions, ConstStrings, Events, Names, RelatedEvents, Shards;

   TYPE
      Condition = POINTER TO ConditionRec;
      ConditionRec = RECORD (Conditions.ConditionRec) END;

   CONST
      noRoot = 0; invalidPath = 1; serverFailure = 2; accessFailed = 3;
      termination = 4;
      errors = 5;
   TYPE
      ErrorCode = SHORTINT;
      ErrorEvent = POINTER TO ErrorEventRec;
      ErrorEventRec =
	 RECORD
	    (Events.EventRec)
	    errorcode: ErrorCode;
	 END;
   VAR
      error: Events.EventType;
      errormsg: ARRAY errors OF Events.Message;

   PROCEDURE Create(VAR cond: Condition; path: ARRAY OF CHAR;
		    root: Names.Node; auth: Shards.Lid);

   PROCEDURE CreateCS(VAR cond: Condition; path: ConstStrings.String;
		      root: Names.Node; auth: Shards.Lid);

   PROCEDURE GetNode(cond: Condition; VAR node: Names.Node;
		     errors: RelatedEvents.Object) : BOOLEAN;

END PathConditions.
