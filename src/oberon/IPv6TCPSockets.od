(* Ulm's Oberon Library
   Copyright (C) 1989-2006 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: IPv6TCPSock.od,v 1.1 2006/08/09 08:51:48 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: IPv6TCPSock.od,v $
   Revision 1.1  2006/08/09 08:51:48  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

DEFINITION IPv6TCPSockets;

   IMPORT Conditions, Events, IPv6Addresses, RelatedEvents, Streams,
      UnixSockets;

   TYPE
      Socket = UnixSockets.Socket;
      Address = IPv6Addresses.Address;
      SocketAddress = IPv6Addresses.SocketAddress;

   CONST
      openFailed = 0;
      listenFailed = 1;
      errors = 2;
   TYPE
      ErrorCode = SHORTINT; (* openFailed .. *)
      ErrorEvent = POINTER TO ErrorEventRec;
      ErrorEventRec =
	 RECORD
	    (Events.EventRec)
	    address: SocketAddress;
	    errorcode: ErrorCode;
	 END;
   VAR
      error: Events.EventType;
      errormsg: ARRAY errors OF Events.Message;

   PROCEDURE Open(VAR s: Streams.Stream; address: SocketAddress;
		  bufmode: Streams.BufMode;
		  errors: RelatedEvents.Object) : BOOLEAN;
   PROCEDURE OpenAs(VAR s: Streams.Stream; address, bindto: SocketAddress;
		    bufmode: Streams.BufMode;
		    errors: RelatedEvents.Object) : BOOLEAN;

   PROCEDURE CreateOpenCondition(VAR condition: Conditions.Condition;
				 address: SocketAddress);
   PROCEDURE CreateOpenConditionAs(VAR condition: Conditions.Condition;
				   address, bindto: SocketAddress);
   PROCEDURE TestAndOpen(VAR s: Streams.Stream;
			 condition: Conditions.Condition;
			 bufmode: Streams.BufMode;
			 errors: RelatedEvents.Object) : BOOLEAN;
   PROCEDURE Drop(condition: Conditions.Condition);

   PROCEDURE CreateSomeSocket(VAR socket: Socket;
			      VAR address: SocketAddress;
			      errors: RelatedEvents.Object) : BOOLEAN;
   PROCEDURE CreateSomeSocketOn(VAR socket: Socket;
			        VAR address: SocketAddress;
			        errors: RelatedEvents.Object) : BOOLEAN;
   PROCEDURE Listen(VAR socket: Socket; portnum: INTEGER;
		    errors: RelatedEvents.Object) : BOOLEAN;
   PROCEDURE ListenOn(VAR socket: Socket; address: SocketAddress;
		      errors: RelatedEvents.Object) : BOOLEAN;
   PROCEDURE Accept(socket: Socket;
		    VAR s: Streams.Stream; bufmode: Streams.BufMode;
		    VAR peer: SocketAddress) : BOOLEAN;
   PROCEDURE Release(socket: Socket);

   PROCEDURE CreateAcceptCondition(VAR condition: Conditions.Condition;
			           socket: Socket);

   PROCEDURE GetName(socket: Socket; VAR address: SocketAddress;
		     errors: RelatedEvents.Object) : BOOLEAN;

END IPv6TCPSockets.
