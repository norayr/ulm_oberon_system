(* Ulm's Oberon Library
   Copyright (C) 1989-2005 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id$
   ----------------------------------------------------------------------------
   $Log$
   ----------------------------------------------------------------------------
*)

DEFINITION ContainerSets;

   IMPORT Containers, Iterators, RelatedEvents, Services, Shards,
      Transactions;

   TYPE
      Set = POINTER TO SetRec;
      SetRec = RECORD (Services.ObjectRec) END;

   PROCEDURE Create(VAR set: Set; container: Containers.Container;
		    trans: Transactions.Transaction;
                    errors: RelatedEvents.Object) : BOOLEAN;
   PROCEDURE Open(VAR set: Set; container: Containers.Container;
		  trans: Transactions.Transaction;
                  errors: RelatedEvents.Object) : BOOLEAN;

   PROCEDURE SetAnchor(set: Set;
		       trans: Transactions.Transaction;
                       VAR id: Containers.Ident) : BOOLEAN;
   PROCEDURE GetAnchor(set: Set; VAR id: Containers.Ident) : BOOLEAN;

   PROCEDURE CreateSubContainer(set: Set;
		                trans: Transactions.Transaction;
                                VAR id: Containers.Ident;
				VAR container: Containers.Container) : BOOLEAN;
   PROCEDURE OpenSubContainer(set: Set; id: Containers.Ident;
		              trans: Transactions.Transaction;
                              VAR container: Containers.Container) : BOOLEAN;
   PROCEDURE DeleteSubContainer(set: Set; id: Containers.Ident;
		                trans: Transactions.Transaction) : BOOLEAN;

   PROCEDURE GetSubContainers(set: Set; VAR it: Iterators.Iterator);

END ContainerSets.
