(* Ulm's Oberon Library
   Copyright (C) 1989-1996 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: Containers.od,v 1.2 1996/11/21 19:15:57 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: Containers.od,v $
   Revision 1.2  1996/11/21  19:15:57  borchert
   - extended error handling
   - Transaction is no longer merely a Services.Object
   - some identifiers renamed
   - source code reformatted

   Revision 1.1  1996/11/21  15:09:32  borchert
   Initial revision

   ----------------------------------------------------------------------------
   original version is due to Werner Stanglow
   ----------------------------------------------------------------------------
*)

DEFINITION Containers;

   IMPORT Events, Objects, PersistentDisciplines, Services, Transactions;

   TYPE
      Container = POINTER TO ContainerRec;
      ContainerRec = RECORD (Services.ObjectRec) END;

   TYPE
      Transaction = Transactions.Transaction;
      Ident = LONGINT;
      Object = PersistentDisciplines.Object;

   CONST
      first = 0; last = 1; this = 2; pred = 3; succ = 4;
   TYPE
      SearchDir = SHORTINT; (* first..succ *)

   TYPE
      InsertProc = PROCEDURE (cont: Container; trans: Transaction;
                              VAR id: Ident; object: Object) : BOOLEAN;
      DeleteProc = PROCEDURE (cont: Container; trans: Transaction;
                              id: Ident) : BOOLEAN;
      ReplaceProc = PROCEDURE (cont: Container; trans: Transaction;
                               id: Ident; object: Object) : BOOLEAN;
      ObtainProc = PROCEDURE (cont: Container; trans: Transaction;
                              id: Ident; VAR object: Object) : BOOLEAN;
      ElementsProc = PROCEDURE (cont: Container; trans: Transaction;
                                VAR nelems: LONGINT) : BOOLEAN;
      GetAnchorProc = PROCEDURE (cont: Container; trans: Transaction;
                                 VAR id: Ident) : BOOLEAN;
      SetAnchorProc = PROCEDURE (cont: Container; trans: Transaction;
                                 id: Ident) : BOOLEAN;
      FindProc = PROCEDURE (cont: Container; trans: Transaction;
                            dir: SearchDir; VAR id: Ident) : BOOLEAN;
      ReorganizeProc = PROCEDURE (cont: Container;
                                  trans: Transaction) : BOOLEAN;
      CloseProc = PROCEDURE (cont: Container) : BOOLEAN;

      Interface = POINTER TO InterfaceRec;
      InterfaceRec =
         RECORD
            (Objects.ObjectRec)
            insert: InsertProc;
            delete: DeleteProc;
            replace: ReplaceProc;
            obtain: ObtainProc;
            elements: ElementsProc;
            find: FindProc;
            reorganize: ReorganizeProc;
            setAnchor: SetAnchorProc;
            getAnchor: GetAnchorProc;
            close: CloseProc;
         END;

   CONST
      insert = 0; delete = 1; replace = 2; obtain = 3;
      elements = 4; find = 5; reorganize = 6;
      setAnchor = 7; getAnchor = 8; close = 9;
   TYPE
      Capability = SHORTINT; (* insert..close *)
      Operation = SHORTINT;  (* insert..close *)
      CapabilitySet = SET;   (* OF Capability *)

   CONST
      notSupported = 0;    (* not supported by underlying implementation *)
      badParams = 1;       (* invalid parameter for Find *)
      alreadyClosed = 2;   (* all operations are invalid after Close *)
      operationFailed = 3; (* underlying implementation returned FALSE *)
      errors = 4;
   TYPE
      ErrorCode = SHORTINT; (* notSupported..operationFailed *)
      ErrorEvent = POINTER TO ErrorEventRec;
      ErrorEventRec =
         RECORD
            (Events.EventRec)
            errcode: ErrorCode;
	    operation: Operation;
	    trans: Transaction;
         END;
   VAR
      error: Events.EventType;
      errormsg: ARRAY errors OF Events.Message;

   PROCEDURE Init(cont: Container; if: Interface);
   PROCEDURE Close(cont: Container) : BOOLEAN;
   PROCEDURE Capabilities(cont: Container) : CapabilitySet;

   PROCEDURE Insert(cont: Container; trans: Transaction;
                    VAR id: Ident; object: Object) : BOOLEAN;
   PROCEDURE Delete(cont: Container; trans: Transaction;
                    id: Ident) : BOOLEAN;
   PROCEDURE Replace(cont: Container; trans: Transaction;
                     id: Ident; object: Object) : BOOLEAN;
   PROCEDURE Obtain(cont: Container; trans: Transaction;
                    id: Ident; VAR object: Object) : BOOLEAN;

   PROCEDURE Elements(cont: Container; trans: Transaction;
                      VAR nelems: LONGINT) : BOOLEAN;
   PROCEDURE Find(cont: Container; trans: Transaction; dir: SearchDir;
                  VAR id: Ident) : BOOLEAN;

   PROCEDURE Reorganize(cont: Container; trans: Transaction) : BOOLEAN;

   PROCEDURE SetAnchor(cont: Container; trans: Transaction;
                       id: Ident) : BOOLEAN;
   PROCEDURE GetAnchor(cont: Container; trans: Transaction;
                       VAR id: Ident) : BOOLEAN;

   PROCEDURE Exchange(cont: Container; trans: Transaction; id: Ident;
                      new: Object; VAR old: Object) : BOOLEAN;
   PROCEDURE Remove(cont: Container; trans: Transaction;
                    id: Ident; VAR object: Object) : BOOLEAN;

END Containers.
