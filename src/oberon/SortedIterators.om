(* Ulm's Oberon Library
   Copyright (C) 1989-2000 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: SortedItera.om,v 1.1 2000/04/01 19:34:47 borchert Exp borchert $
   ----------------------------------------------------------------------------
   $Log: SortedItera.om,v $
   Revision 1.1  2000/04/01 19:34:47  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

MODULE SortedIterators;

   IMPORT Iterators, Keys, Objects, Services, SortedBags;

   CONST
      ascending = 0;  (* in ascending order *)
      descending = 1; (* in descending order *)
   
   TYPE
      Order = Iterators.Mode;    (* ascending, descending *)

   TYPE
      Status = POINTER TO StatusRec;
      StatusRec =
	 RECORD
	    (Objects.ObjectRec)
	    unsortedIt: Iterators.Iterator;
	    key: Keys.Key;
	 END;

   PROCEDURE IterateObjects(it: Iterators.Iterator;
                            ref: Iterators.Reference;
			    mode: Iterators.Mode);
      VAR
	 object: Services.Object;
	 bag: SortedBags.Bag;
	 sortedIt: Iterators.Iterator;
   BEGIN
      WITH ref: Status DO
	 SortedBags.Create(bag, ref.key);
	 WHILE Iterators.Get(ref.unsortedIt, object) DO
	    SortedBags.Add(bag, object);
	 END;
	 SortedBags.GetEntries(bag, mode, NIL, NIL, sortedIt);
	 WHILE Iterators.Get(sortedIt, object) DO
	    Iterators.Yield(it, object);
	 END;
      END;
   END IterateObjects;

   PROCEDURE Create(VAR sortedIt: Iterators.Iterator;
		    unsortedIt: Iterators.Iterator;
		    key: Keys.Key; order: Order);
      (* collections objects from unsortedIt and return them
	 via sortedIt in a order defined by key and order
      *)
      VAR
	 status: Status;
   BEGIN
      ASSERT(unsortedIt # NIL);
      ASSERT(key # NIL);
      ASSERT((order = ascending) OR (order = descending));
      NEW(status);
      status.unsortedIt := unsortedIt; status.key := key;
      Iterators.CreateQuickIterator(sortedIt, IterateObjects, status, order);
   END Create;

END SortedIterators.
