(* Ulm's Oberon Library
   Copyright (C) 1989-1994 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: TimeConditi.od,v 1.2 2004/02/19 15:22:39 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: TimeConditi.od,v $
   Revision 1.2  2004/02/19 15:22:39  borchert
   Init added to support extensions of TimeConditions.Condition

   Revision 1.1  1994/02/22 20:11:14  borchert
   Initial revision

   ----------------------------------------------------------------------------
   AFB 1/92
   ----------------------------------------------------------------------------
*)

DEFINITION TimeConditions;

   IMPORT Clocks, Conditions, Times;

   TYPE
      Condition = POINTER TO ConditionRec;
      ConditionRec = RECORD (Conditions.ConditionRec) END;

   PROCEDURE Create(VAR condition: Conditions.Condition;
		    clock: Clocks.Clock; time: Times.Time);
      (* create and initialize a time condition:
	 is the current time of the clock greater than or
	 equal to `time';
	 if time is relative then it is taken relative to the current time
      *)

   PROCEDURE Init(condition: Condition; clock: Clocks.Clock; time: Times.Time);
      (* like Create but without NEW *)

END TimeConditions.
