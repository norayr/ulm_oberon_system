(* Ulm's Oberon Library
   Copyright (C) 1989-1994 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: NamedObject.od,v 1.1 1995/12/22 15:08:58 martin Exp $
   ----------------------------------------------------------------------------
   $Log: NamedObject.od,v $
   Revision 1.1  1995/12/22  15:08:58  martin
   Initial revision

   ----------------------------------------------------------------------------
   Martin Hasch, Sep 1994
   ----------------------------------------------------------------------------
*)

DEFINITION NamedObjects;

   IMPORT Events, Names, Services, RelatedEvents;

   TYPE
      Object = Services.Object;

   CONST
      noObject = 0;	    (* node is not representing a named object *)
      objectNamed = 1;	    (* object is already represented by another node *)
      typeGuardFailure = 2; (* GuardedGet failed due to type guard violation *)
      errorcodes = 3;

   TYPE
      ErrorEvent = POINTER TO ErrorEventRec;
      ErrorEventRec =
	 RECORD
	    (Events.EventRec)
	    errorcode: SHORTINT;
	 END;

   VAR
      errormsg: ARRAY errorcodes OF Events.Message;
      error: Events.EventType;

   PROCEDURE Create(VAR node: Names.Node; object: Object);
      (* create a node representing object *)
      (* messages sent to node will reach object, too *)
      (* if object = NIL node will represent itself *)

   PROCEDURE Destroy(node: Names.Node): BOOLEAN;
      (* destroy a node created by create *)
      (* implicit authorization ensures that node belongs to us *)

   PROCEDURE Get(node: Names.Node; VAR object: Object;
			errors: RelatedEvents.Object): BOOLEAN;
      (* assign object the object which is represented by node *)

   PROCEDURE GuardedGet(node: Names.Node; guard: Services.Type;
			VAR object: Object;
			errors: RelatedEvents.Object): BOOLEAN;
      (* assign object the object which is represented by node, *)
      (* but only if its type is an extension of guard *)

END NamedObjects.
