(* Ulm's Oberon Library
   Copyright (C) 1989-1994 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: UnixPipes.od,v 1.3 2001/04/30 08:10:30 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: UnixPipes.od,v $
   Revision 1.3  2001/04/30 08:10:30  borchert
   Open and Spawn extended with bufmode parameter

   Revision 1.2  2001/02/06 07:30:43  borchert
   Spawn added

   Revision 1.1  1994/02/23  07:27:57  borchert
   Initial revision

   ----------------------------------------------------------------------------
   AFB 9/89
   ----------------------------------------------------------------------------
*)

DEFINITION UnixPipes;

   IMPORT RelatedEvents, Streams, SysArgs, SysIO, SysProcess, UnixFiles;

   CONST
      read = UnixFiles.read;
      write = UnixFiles.write;

   TYPE
      Mode = UnixFiles.Mode;
      Pipe = POINTER TO PipeRec;
      PipeRec = 
	 RECORD
	    (Streams.StreamRec)
	    (* read-only components *)
	    pid: SysProcess.ProcessId; (* process id of shell *)
	    status: SysProcess.Status; (* set after close *)
	    interrupted: BOOLEAN; (* EINTR occured? *)
	    (* read/write component *)
	    retry: BOOLEAN; (* retry on interrupts? *)
	 END;

   PROCEDURE Open(VAR pipe: Streams.Stream;
		  command: ARRAY OF CHAR; mode: Mode; bufmode: Streams.BufMode;
		  errors: RelatedEvents.Object) : BOOLEAN;
      (* open pipe (for reading xor writing) to/from `command';
	 `command' is interpreted by the shell
	    (either value of SHELL in the environment or /bin/sh by default)
	 `command' must be 0X-terminated
      *)

   PROCEDURE Spawn(VAR pipe: Streams.Stream;
		   readfd, writefd, childfd: SysIO.File;
		   pathname: ARRAY OF CHAR;
		   argv: SysArgs.Arguments;
		   mode: Mode; bufmode: Streams.BufMode;
		   errors: RelatedEvents.Object) : BOOLEAN;
      (* like Open but with an already opened pipe *)

END UnixPipes.
