(* Ulm's Oberon Library
   Copyright (C) 1989-2001 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: OberonPragm.om,v 1.1 2001/02/19 10:01:41 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: OberonPragm.om,v $
   Revision 1.1  2001/02/19 10:01:41  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

MODULE OberonPragmas;

   IMPORT Args, BoolArgs, CompilerPragmas, RelatedEvents;

   CONST
      checkAssertions = "check_assertions";
      checkConversions = "check_conversions";
      maskTypeTags = "mask_type_tags";
      tagPointerTypes = "tag_pointer_types";
      tracePointerTypes = "trace_pointer_types";
      checkArrayIndices = "check_array_indices";

   VAR
      pragmas: Args.Arguments;

   PROCEDURE Define(name: ARRAY OF CHAR; shortname: CHAR;
		    type: Args.Type; description: ARRAY OF CHAR;
		    default: Args.Value);
   BEGIN
      Args.Define(pragmas, name, shortname, type, description);
      Args.SetValue(pragmas, name, default);
   END Define;

   PROCEDURE DefineFlag(name: ARRAY OF CHAR; shortname: CHAR;
			description: ARRAY OF CHAR;
			defaultval: BOOLEAN);
      VAR
	 value: Args.Value;
   BEGIN
      BoolArgs.Create(value, defaultval);
      Define(name, shortname, BoolArgs.type, description, value);
   END DefineFlag;

   PROCEDURE Create(VAR pcontext: CompilerPragmas.PragmaContext);
      VAR
	 copy: Args.Arguments;
   BEGIN
      Args.CreateCopyOf(copy, pragmas);
      CompilerPragmas.Create(pcontext, copy);
      RelatedEvents.Forward(copy, pcontext);
   END Create;

   PROCEDURE Init;
   BEGIN
      DefineFlag(checkAssertions, "A", "generate code for ASSERT", TRUE);
      DefineFlag(checkConversions, "C", "generate conversion checks", TRUE);
      DefineFlag(maskTypeTags, "M", "mask all type tags on access", TRUE);
      DefineFlag(tagPointerTypes, "O", "tag pointer types", TRUE);
      DefineFlag(tracePointerTypes, "P", "trace pointer types", TRUE);
      DefineFlag(checkArrayIndices, "T", "check array indices", TRUE);
   END Init;

BEGIN
   Args.Create(pragmas);
   Init;
END OberonPragmas.
