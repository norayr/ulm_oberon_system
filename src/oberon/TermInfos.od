(* Ulm's Oberon Library
   Copyright (C) 1989-2004 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: TermInfos.od,v 1.1 2004/06/11 12:11:02 borchert Exp borchert $
   ----------------------------------------------------------------------------
   $Log: TermInfos.od,v $
   Revision 1.1  2004/06/11 12:11:02  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

DEFINITION TermInfos; (* Ralf Beck *)

   (* interface for Unix System V terminfo *)

   IMPORT Events, Disciplines, Objects, RelatedEvents, Streams;


   CONST 
      stringlen = 128;
      maxParameters = 9;

      (* errorcodes *)
      notSupported = 0;
      badFormatString = 1;
      invalidParameterList = 2;
      stackUnderflow = 3;
      stackOverflow = 4;
      endOfStream = 5;
      invalidTerminfo = 6;
      errorcodes = 7;


   CONST
      (* booleans *)
      autoLeftMargin = 0;
      autoRightMargin = 1;
      noEscCtlc = 2;
      ceolStandoutGlitch = 3;
      eatNewlineGlitch = 4;
      eraseOverstrike = 5;
      genericType = 6;
      hardCopy = 7;
      hasMetaKey = 8;
      hasStatusLine = 9;
      insertNullGlitch = 10;
      memoryAbove = 11;
      memoryBelow = 12;
      moveInsertMode = 13;
      moveStandoutMode = 14;
      overStrike = 15;
      statusLineEscOk = 16;
      destTabsMagicSmso = 17;
      tildeGlitch = 18;
      transparentUnderline = 19;
      xonXoff = 20;
      needsXonXoff = 21;
      prtrSilent = 22;
      hardCursor = 23;
      nonRevRmcup = 24;
      noPadChar = 25;
      nonDestScrollRegion = 26;
      canChange = 27;
      backColorErase = 28;
      hueLightnessSaturation = 29;
      colAddrGlitch = 30;
      crCancelsMicroMode = 31;
      hasPrintWheel = 32;
      rowAddrGlitch = 33;
      semiAutoRightMargin = 34;
      cpiChangesRes = 35;
      lpiChangesRes = 36;

      (* numbers *)
      columns = 0;
      initTabs = 1;
      lines = 2;
      linesOfMemory = 3;
      magicCookieGlitch = 4;
      paddingBaudRate = 5;
      virtualTerminal = 6;
      widthStatusLine = 7;
      numLabels = 8;
      lablHeight = 9;
      lablWidth = 10;
      maxAttributes = 11;
      maximumWindows = 12;
      maxColors = 13;
      maxPairs = 14;
      noColorVideo = 15;
      bufferCapacity = 16;
      dotVertSpacing = 17;
      dotHorzSpacing = 18;
      maxMicroAddress = 19;
      maxMicroJump = 20;
      microCharSize = 21;
      microLineSize = 22;
      numberOfPins = 23;
      outputResChar = 24;
      outputResLine = 25;
      outputResHorzInch = 26;
      outputResVertInch = 27;
      printRate = 28;
      wideCharSize = 29;
      buttons = 30;
      bitImageEntwining = 31;
      bitImageType = 32;

      (* strings *)
      backTab = 0;
      bell = 1;
      carriageReturn = 2;
      changeScrollRegion = 3;
      clearAllTabs = 4;
      clearScreen = 5;
      clrEol = 6;
      clrEos = 7;
      columnAddress = 8;
      commandCharacter = 9;
      cursorAddress = 10;
      cursorDown = 11;
      cursorHome = 12;
      cursorInvisible = 13;
      cursorLeft = 14;
      cursorMemoryAddress = 15;
      cursorNormal = 16;
      cursorRight = 17;
      cursorToLl = 18;
      cursorUp = 19;
      cursorVisible = 20;
      deleteCharacter = 21;
      deleteLine = 22;
      disStatusLine = 23;
      downHalfLine = 24;
      enterAltCharsetMode = 25;
      enterBlinkMode = 26;
      enterBoldMode = 27;
      enterCaMode = 28;
      enterDeleteMode = 29;
      enterDimMode = 30;
      enterInsertMode = 31;
      enterSecureMode = 32;
      enterProtectedMode = 33;
      enterReverseMode = 34;
      enterStandoutMode = 35;
      enterUnderlineMode = 36;
      eraseChars = 37;
      exitAltCharsetMode = 38;
      exitAttributeMode = 39;
      exitCaMode = 40;
      exitDeleteMode = 41;
      exitInsertMode = 42;
      exitStandoutMode = 43;
      exitUnderlineMode = 44;
      flashScreen = 45;
      formFeed = 46;
      fromStatusLine = 47;
      init1string = 48;
      init2string = 49;
      init3string = 50;
      initFile = 51;
      insertCharacter = 52;
      insertLine = 53;
      insertPadding = 54;
      keyBackspace = 55;
      keyCatab = 56;
      keyClear = 57;
      keyCtab = 58;
      keyDc = 59;
      keyDl = 60;
      keyDown = 61;
      keyEic = 62;
      keyEol = 63;
      keyEos = 64;
      keyF0 = 65;
      keyF1 = 66;
      keyF10 = 67;
      keyF2 = 68;
      keyF3 = 69;
      keyF4 = 70;
      keyF5 = 71;
      keyF6 = 72;
      keyF7 = 73;
      keyF8 = 74;
      keyF9 = 75;
      keyHome = 76;
      keyIc = 77;
      keyIl = 78;
      keyLeft = 79;
      keyLl = 80;
      keyNpage = 81;
      keyPpage = 82;
      keyRight = 83;
      keySf = 84;
      keySr = 85;
      keyStab = 86;
      keyUp = 87;
      keypadLocal = 88;
      keypadXmit = 89;
      labF0 = 90;
      labF1 = 91;
      labF10 = 92;
      labF2 = 93;
      labF3 = 94;
      labF4 = 95;
      labF5 = 96;
      labF6 = 97;
      labF7 = 98;
      labF8 = 99;
      labF9 = 100;
      metaOff = 101;
      metaOn = 102;
      newline = 103;
      padChar = 104;
      parmDch = 105;
      parmDeleteLine = 106;
      parmDownCursor = 107;
      parmIch = 108;
      parmIndex = 109;
      parmInsertLine = 110;
      parmLeftCursor = 111;
      parmRightCursor = 112;
      parmRindex = 113;
      parmUpCursor = 114;
      pkeyKey = 115;
      pkeyLocal = 116;
      pkeyXmit = 117;
      printScreen = 118;
      prtrOff = 119;
      prtrOn = 120;
      repeatChar = 121;
      reset1string = 122;
      reset2string = 123;
      reset3string = 124;
      resetFile = 125;
      restoreCursor = 126;
      rowAddress = 127;
      saveCursor = 128;
      scrollForward = 129;
      scrollReverse = 130;
      setAttributes = 131;
      setTab = 132;
      setWindow = 133;
      tab = 134;
      toStatusLine = 135;
      underlineChar = 136;
      upHalfLine = 137;
      initProg = 138;
      keyA1 = 139;
      keyA3 = 140;
      keyB2 = 141;
      keyC1 = 142;
      keyC3 = 143;
      prtrNon = 144;
      charPadding = 145;
      acsChars = 146;
      plabNorm = 147;
      keyBtab = 148;
      enterXonMode = 149;
      exitXonMode = 150;
      enterAmMode = 151;
      exitAmMode = 152;
      xonCharacter = 153;
      xoffCharacter = 154;
      enaAcs = 155;
      lablOn = 156;
      lablOff = 157;
      keyBeg = 158;
      keyCancel = 159;
      keyClose = 160;
      keyCommand = 161;
      keyCopy = 162;
      keyCreate = 163;
      keyEnd = 164;
      keyEnter = 165;
      keyExit = 166;
      keyFind = 167;
      keyHelp = 168;
      keyMark = 169;
      keyMessage = 170;
      keyMove = 171;
      keyNext = 172;
      keyOpen = 173;
      keyOptions = 174;
      keyPrevious = 175;
      keyPrint = 176;
      keyRedo = 177;
      keyReference = 178;
      keyRefresh = 179;
      keyReplace = 180;
      keyRestart = 181;
      keyResume = 182;
      keySave = 183;
      keySuspend = 184;
      keyUndo = 185;
      keySbeg = 186;
      keyScancel = 187;
      keyScommand = 188;
      keyScopy = 189;
      keyScreate = 190;
      keySdc = 191;
      keySdl = 192;
      keySelect = 193;
      keySend = 194;
      keySeol = 195;
      keySexit = 196;
      keySfind = 197;
      keyShelp = 198;
      keyShome = 199;
      keySic = 200;
      keySleft = 201;
      keySmessage = 202;
      keySmove = 203;
      keySnext = 204;
      keySoptions = 205;
      keySprevious = 206;
      keySprint = 207;
      keySredo = 208;
      keySreplace = 209;
      keySright = 210;
      keySrsume = 211;
      keySsave = 212;
      keySsuspend = 213;
      keySundo = 214;
      reqForInput = 215;
      keyF11 = 216;
      keyF12 = 217;
      keyF13 = 218;
      keyF14 = 219;
      keyF15 = 220;
      keyF16 = 221;
      keyF17 = 222;
      keyF18 = 223;
      keyF19 = 224;
      keyF20 = 225;
      keyF21 = 226;
      keyF22 = 227;
      keyF23 = 228;
      keyF24 = 229;
      keyF25 = 230;
      keyF26 = 231;
      keyF27 = 232;
      keyF28 = 233;
      keyF29 = 234;
      keyF30 = 235;
      keyF31 = 236;
      keyF32 = 237;
      keyF33 = 238;
      keyF34 = 239;
      keyF35 = 240;
      keyF36 = 241;
      keyF37 = 242;
      keyF38 = 243;
      keyF39 = 244;
      keyF40 = 245;
      keyF41 = 246;
      keyF42 = 247;
      keyF43 = 248;
      keyF44 = 249;
      keyF45 = 250;
      keyF46 = 251;
      keyF47 = 252;
      keyF48 = 253;
      keyF49 = 254;
      keyF50 = 255;
      keyF51 = 256;
      keyF52 = 257;
      keyF53 = 258;
      keyF54 = 259;
      keyF55 = 260;
      keyF56 = 261;
      keyF57 = 262;
      keyF58 = 263;
      keyF59 = 264;
      keyF60 = 265;
      keyF61 = 266;
      keyF62 = 267;
      keyF63 = 268;
      clrBol = 269;
      clearMargins = 270;
      setLeftMargin = 271;
      setRightMargin = 272;
      lablFormat = 273;
      setClock = 274;
      displayClock = 275;
      removeClock = 276;
      createWindow = 277;
      gotoWindow = 278;
      hangup = 279;
      dialPhone = 280;
      quickDial = 281;
      tone = 282;
      pulse = 283;
      flashHook = 284;
      fixedPause = 285;
      waitTone = 286;
      user0 = 287;
      user1 = 288;
      user2 = 289;
      user3 = 290;
      user4 = 291;
      user5 = 292;
      user6 = 293;
      user7 = 294;
      user8 = 295;
      user9 = 296;
      origPair = 297;
      origColors = 298;
      initializeColor = 299;
      initializePair = 300;
      setColorPair = 301;
      setForeground = 302;
      setBackground = 303;
      changeCharPitch = 304;
      changeLinePitch = 305;
      changeResHorz = 306;
      changeResVert = 307;
      defineChar = 308;
      enterDoublewideMode = 309;
      enterDraftQuality = 310;
      enterItalicsMode = 311;
      enterLeftwardMode = 312;
      enterMicroMode = 313;
      enterNearLetterQuality = 314;
      enterNormalQuality = 315;
      enterShadowMode = 316;
      enterSubscriptMode = 317;
      enterSuperscriptMode = 318;
      enterUpwardMode = 319;
      exitDoublewideMode = 320;
      exitItalicsMode = 321;
      exitLeftwardMode = 322;
      exitMicroMode = 323;
      exitShadowMode = 324;
      exitSubscriptMode = 325;
      exitSuperscriptMode = 326;
      exitUpwardMode = 327;
      microColumnAddress = 328;
      microDown = 329;
      microLeft = 330;
      microRight = 331;
      microRowAddress = 332;
      microUp = 333;
      orderOfPins = 334;
      parmDownMicro = 335;
      parmLeftMicro = 336;
      parmRightMicro = 337;
      parmUpMicro = 338;
      selectCharSet = 339;
      setBottomMargin = 340;
      setBottomMarginParm = 341;
      setLeftMarginParm = 342;
      setRightMarginParm = 343;
      setTopMargin = 344;
      setTopMarginParm = 345;
      startBitImage = 346;
      startCharSetDef = 347;
      stopBitImage = 348;
      stopCharSetDef = 349;
      subscriptCharacters = 350;
      superscriptCharacters = 351;
      theseCauseCr = 352;
      zeroMotion = 353;
      charSetNames = 354;
      keyMouse = 355;
      mouseInfo = 356;
      reqMousePos = 357;
      getMouse = 358;
      setAForeground = 359;
      setABackground = 360;
      pkeyPlab = 361;
      deviceType = 362;
      codeSetInit = 363;
      set0DesSeq = 364;
      set1DesSeq = 365;
      set2DesSeq = 366;
      set3DesSeq = 367;
      setLrMargin = 368;
      setTbMargin = 369;
      bitImageRepeat = 370;
      bitImageNewline = 371;
      bitImageCarriageReturn = 372;
      colorNames = 373;
      defineBitImageRegion = 374;
      endBitImageRegion = 375;
      setColorBand = 376;
      setPageLength = 377;
      displayPcChar = 378;
      enterPcCharsetMode = 379;
      exitPcCharsetMode = 380;
      enterScancodeMode = 381;
      exitScancodeMode = 382;
      pcTermOptions = 383;
      scancodeEscape = 384;
      altScancodeEsc = 385;
      enterHorizontalHlMode = 386;
      enterLeftHlMode = 387;
      enterLowHlMode = 388;
      enterRightHlMode = 389;
      enterTopHlMode = 390;
      enterVerticalHlMode = 391;
      setAAttributes = 392;
      setPglenInch = 393;

   CONST
      (* aliases *)
      exitAltCharSet = exitAltCharsetMode;
      enterAltCharSet = enterAltCharsetMode;

   TYPE 
      String = ARRAY stringlen OF CHAR;
	 (* terminfo string *)

      Parameter = POINTER TO ParameterRec;
	 (* general abstraction for terminfo parameters *)
      ParameterRec = RECORD END;

      BoolPara = POINTER TO BoolParaRec;
	 (* boolean terminfo parameter *)
      BoolParaRec =
	 RECORD
	    (ParameterRec)
	    bool: BOOLEAN;
         END;

      IntPara = POINTER TO IntParaRec;
	 (* numeric terminfo parameter *)
      IntParaRec =
	 RECORD
	    (ParameterRec)
	    int: INTEGER;
         END;

      StringPara = POINTER TO StringParaRec;
	 (* terminfo string parameter *) 
      StringParaRec =
	 RECORD
	    (ParameterRec)
	    string: String;
         END;

     
      ParameterList = POINTER TO ParameterListRec;
	 (* parameter list containing up to 9 parameters
	    as specified by terminfo(5)
	 *)
      ParameterListRec =
         RECORD
            (Objects.ObjectRec)
            para: ARRAY maxParameters OF Parameter;
         END;

      ErrorEvent = POINTER TO ErrorEventRec;
      ErrorEventRec =
	 RECORD
	    (Events.EventRec)
	    errorcode: SHORTINT;
         END;

      TermInfo = POINTER TO TermInfoRec;
	 (* structure containing a terminal's terminfo information *)
      TermInfoRec = RECORD (Disciplines.ObjectRec) END;

      Capability = INTEGER; (* index into capability tables *)

   VAR
      error: Events.EventType;
      errormsg: ARRAY errorcodes OF Events.Message;

   PROCEDURE Open(termname: ARRAY OF CHAR; VAR terminfo: TermInfo;
		  errors: RelatedEvents.Object): BOOLEAN;
      (* opens terminfo file 'termname' and reads contents into *)
      (* 'terminfo'.                                            *)

   PROCEDURE GetBoolean(terminfo: TermInfo; cap: Capability): BOOLEAN;
      (* return the boolean value specified by 'cap' *)

   PROCEDURE GetNumber(terminfo: TermInfo; cap: Capability): INTEGER;
      (* return the numeric value specified by 'cap' *)

   PROCEDURE CapStringOk(terminfo: TermInfo; cap: Capability): BOOLEAN;
      (* check if string 'cap' is supported by 'terminfo' *)

   PROCEDURE GetCapString(terminfo: TermInfo; cap: Capability;
                          VAR string: String);
      (* return the string value specified by 'cap' *)

   PROCEDURE PutCapString(terminfo: TermInfo; cap: Capability;
                          plist: ParameterList; speed: INTEGER;
			  affcount: INTEGER; stream: Streams.Stream);
      (* process terminfo string 'cap' using parameters of
	 'plist'. 'speed' and affcnt are used for determining padding. result
	 is output to stream 'stream'
      *)

END TermInfos.
