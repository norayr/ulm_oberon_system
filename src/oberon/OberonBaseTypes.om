(* Ulm's Oberon Library
   Copyright (C) 1989-1998 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: OberonBaseT.om,v 1.1 1998/03/24 08:18:24 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: OberonBaseT.om,v $
   Revision 1.1  1998/03/24 08:18:24  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

MODULE OberonBaseTypes;

   (* predefined base types of Oberon;
      note that these types are not necessarily visible by their names --
      this depends of the compilation options
   *)

   IMPORT CompilerObjects, ConstStrings, Sym := OberonSymbols;

   TYPE
      Type = Sym.Type;

   VAR
      boolean: Type;
      char: Type;
      set: Type;
      byte: Type;

      shortint, integer, longint: Type;
      int8, int16, int32, int64: Type;
      genericInteger: Type;
      shortcard, cardinal, longcard: Type;
      card8, card16, card32, card64: Type;
      genericCardinal: Type;
      shortreal, real, longreal: Type;
      real32, real64, real128: Type;
      genericReal: Type;

      address: Type; (* traced *)
      untracedAddress: Type;

      coroutine: Type;

      nil: Type; (* type of NIL *)

   PROCEDURE CreateSimpleType(VAR type: Type;
                              name: ARRAY OF CHAR;
			      form: Sym.Form);
      VAR
	 cstring: ConstStrings.String;
	 ident: Sym.Ident;
   BEGIN
      Sym.CreateBaseType(type, form);
      CompilerObjects.InitBuiltInObject(type);
      ConstStrings.Create(cstring, name);
      Sym.CreateTypeIdent(ident, cstring, type, NIL);
      CompilerObjects.InitBuiltInObject(ident);
      type.ident := ident;
   END CreateSimpleType;

   PROCEDURE CreateNumType(VAR type: Type;
                           name: ARRAY OF CHAR;
			   form: Sym.Form;
			   stdlength: Sym.StdLength);
   BEGIN
      CreateSimpleType(type, name, form);
      type.spec := Sym.standard;
      type.stdlength := stdlength;
   END CreateNumType;

   PROCEDURE CreateSpecNumType(VAR type: Type;
                               name: ARRAY OF CHAR;
			       form: Sym.Form;
			       bits: INTEGER);
   BEGIN
      CreateSimpleType(type, name, form);
      type.spec := Sym.explicit;
      type.bits := bits;
   END CreateSpecNumType;

   PROCEDURE Init;
   BEGIN
      CreateSimpleType(boolean,  "BOOLEAN",  Sym.boolean);
      CreateSimpleType(char,     "CHAR",     Sym.char);
      CreateSimpleType(set,      "SET",      Sym.set);
      CreateSimpleType(byte,     "BYTE",     Sym.byte);

      Sym.CreateBaseType(genericInteger, Sym.integer);
      CompilerObjects.InitBuiltInObject(genericInteger);
      Sym.CreateBaseType(genericCardinal, Sym.cardinal);
      CompilerObjects.InitBuiltInObject(genericCardinal);
      Sym.CreateBaseType(genericReal, Sym.real);
      CompilerObjects.InitBuiltInObject(genericReal);

      CreateNumType(shortint, "SHORTINT", Sym.integer, Sym.short);
      CreateNumType(integer, "INTEGER", Sym.integer, Sym.medium);
      CreateNumType(longint, "LONGINT", Sym.integer, Sym.long);

      CreateNumType(shortcard, "SHORTCARD", Sym.cardinal, Sym.short);
      CreateNumType(cardinal, "CARDINAL", Sym.cardinal, Sym.medium);
      CreateNumType(longcard, "LONGCARD", Sym.cardinal, Sym.long);

      CreateNumType(shortreal, "SHORTREAL", Sym.real, Sym.short);
      CreateNumType(real, "REAL", Sym.real, Sym.medium);
      CreateNumType(longreal, "LONGREAL", Sym.real, Sym.long);

      CreateSpecNumType(int8, "INT8", Sym.integer, 8);
      CreateSpecNumType(int16, "INT16", Sym.integer, 16);
      CreateSpecNumType(int32, "INT32", Sym.integer, 32);
      CreateSpecNumType(int64, "INT64", Sym.integer, 64);

      CreateSpecNumType(card8, "CARD8", Sym.cardinal, 8);
      CreateSpecNumType(card16, "CARD16", Sym.cardinal, 16);
      CreateSpecNumType(card32, "CARD32", Sym.cardinal, 32);
      CreateSpecNumType(card64, "CARD64", Sym.cardinal, 64);

      CreateSimpleType(address, "ADDRESS", Sym.address);
      address.traced := TRUE;
      CreateSimpleType(untracedAddress, "UNTRACEDADDRESS", Sym.address);
      untracedAddress.traced := FALSE;

      CreateSimpleType(coroutine, "COROUTINE", Sym.coroutine);

      Sym.CreatePointerTo(nil, NIL, (* tagged = *) TRUE, NIL);
      CompilerObjects.InitBuiltInObject(nil);
   END Init;

BEGIN
   Init;
END OberonBaseTypes.
