(* Ulm's Oberon Library
   Copyright (C) 1989-1998 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: OberonTypes.od,v 1.1 2000/11/04 07:47:06 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: OberonTypes.od,v $
   Revision 1.1  2000/11/04 07:47:06  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

DEFINITION OberonTypes;

   (* collection of common semantic type checks *)

   IMPORT CompilerObjects, Lex := OberonLex, Streams, Sym := OberonSymbols;

   TYPE
      Attribute = Sym.Attribute;
      Type = Sym.Type;

   PROCEDURE GetConstType(constval: Sym.ConstantValue; VAR type: Type);
      (* set type of a constant represented by constval *)

   PROCEDURE WriteForm(s: Streams.Stream; form: Sym.Form);
   PROCEDURE WriteFormSet(s: Streams.Stream; forms: Sym.FormSet);

   (* tests that do not generate error events *)

   PROCEDURE BaseType(t1, t2: Type; VAR base: Type) : BOOLEAN;
   PROCEDURE IsTypeOfNIL(type: Type) : BOOLEAN;
   PROCEDURE IsStringType(t: Type) : BOOLEAN;
   PROCEDURE ProcedureComp(t1, t2: Type) : BOOLEAN;
   PROCEDURE Identical(t1, t2: Type) : BOOLEAN;
   PROCEDURE Compatible(t1, t2: Type) : BOOLEAN;
   PROCEDURE Includes(t1, t2: Type) : BOOLEAN;
      (* return TRUE if t1 includes t2,
         i.e. a value of type t2 may be assigned to t1;
	 t1 and t2 must be well-defined numeric types
      *)
   PROCEDURE IsAssignmentCompatibleToByte(type: Type) : BOOLEAN;
   PROCEDURE AssignComp(left, right: Type; const: BOOLEAN) : BOOLEAN;
      (* check compatibility for left := right;
	 const is TRUE if right is a constant
      *)
   PROCEDURE ArithmeticType(t1, t2: Type) : Type;

   PROCEDURE IsConst(at: Attribute) : BOOLEAN;
   PROCEDURE IsChar(at: Attribute) : BOOLEAN;
      (* at and at.type must be # NIL;
         returns TRUE if at.type.form = char or
	              if it is character constant
      *)
   PROCEDURE IsString(at: Attribute) : BOOLEAN;
      (* at and at.type must be # NIL;
         returns TRUE if at is a string or char constant or
	 an array with CHAR as element type
      *)

   (* checks that generate error events in case of errors *)

   PROCEDURE CheckAtType(at: Attribute; forms: Sym.FormSet);
      (* at # NIL and at.type # NIL;
         check that at.type.form IN forms and
	 raise error event if not
      *)

   PROCEDURE CheckSetMember(at: Attribute);
      (* check that at may be given as set member *)

   PROCEDURE ProcedureDiff(t1, t2: Type; loc: CompilerObjects.Location);
      (* generate error events (as additional comments!)
         regarding the differences between t1 and t2 for the given location;
	 both types must be # NIL
      *)

   PROCEDURE CheckAgainstExportedType(deftype, modtype: Type;
                                      loc: CompilerObjects.Location;
				      genevents: BOOLEAN) : BOOLEAN;
      (* check re-declaration of a type inside a module (modtype)
         against the exported type declaration (deftype);
	 modtype may be modified in case of record types to distinguish
	 between public and private fields;
	 generate explaining error events (if requested)
	 and return TRUE in case of errors
      *)

   PROCEDURE CheckCall(procat, params: Attribute; VAR restype: Type);

   PROCEDURE CheckGuard(at, guard: Attribute) : BOOLEAN;

   PROCEDURE CheckUnaryOp(opsy: Lex.Symbol; at: Attribute;
			  VAR restype: Type);

   PROCEDURE CheckBinaryOp(opsy: Lex.Symbol;
                           left, right: Attribute;
			   VAR restype: Type);

END OberonTypes.
