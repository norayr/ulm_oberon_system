(* Ulm's Oberon Library
   Copyright (C) 1989-1998 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: OberonBuilt.od,v 1.1 1998/03/08 11:01:39 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: OberonBuilt.od,v $
   Revision 1.1  1998/03/08 11:01:39  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

DEFINITION OberonBuiltIns;

   IMPORT Args, ConstStrings, Events, Objects, Scopes, Sym := OberonSymbols;

   TYPE
      DefArgsProc = PROCEDURE (args: Args.Arguments);
      AddProc = PROCEDURE (scope: Scopes.Scope; args: Args.Arguments);
      Interface = POINTER TO InterfaceRec;
      InterfaceRec =
	 RECORD
	    (Objects.ObjectRec)
	    defArgs: DefArgsProc; (* optional *)
	    add: AddProc;
	 END;

   CONST
      unknownSet = 0;
      nameClash = 1;
      errors = 2;
   TYPE
      ErrorCode = SHORTINT; (* unknownSet .. nameClash *)
      ErrorEvent = POINTER TO ErrorEventRec;
      ErrorEventRec =
	 RECORD
	    (Events.EventRec)
	    errorcode: ErrorCode;
	    setname, name: ConstStrings.String;
	 END;
   VAR
      error: Events.EventType;
      errormsg: ARRAY errors OF Events.Message;

   (* === interface for built-in modules =================================== *)

   PROCEDURE RegisterSet(name: ARRAY OF CHAR; if: Interface);
      (* register a set of built-ins under the given name *)

   PROCEDURE AddIdent(scope: Scopes.Scope; ident: Sym.Ident;
                      args: Args.Arguments; setname: ARRAY OF CHAR);
      (* adds ident to scope and handles name clashes according to args *)

   (* === client interface ================================================= *)

   PROCEDURE DefArgs(args: Args.Arguments);

   PROCEDURE AddBuiltInModules(scope: Scopes.Scope; args: Args.Arguments);
      (* add all built-in modules like SYSTEM to scope *)

   PROCEDURE AddStd(scope: Scopes.Scope; args: Args.Arguments);
      (* add all standard constants, types, procedures and functions
	 to scope in dependence of args
      *)

END OberonBuiltIns.
