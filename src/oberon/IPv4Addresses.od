(* Ulm's Oberon Library
   Copyright (C) 1989-2004 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: IPv4Address.od,v 1.1 2004/03/04 14:25:14 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: IPv4Address.od,v $
   Revision 1.1  2004/03/04 14:25:14  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

DEFINITION IPv4Addresses;

   IMPORT Objects, Streams, Types;

   TYPE
      PortNumber = Types.Int16;    (* 2-byte-integer *)
      Address = Types.Int32;       (* 4-byte-integer *)
      SocketAddress =
	 RECORD
	    (Objects.ObjectRec)
	    (* in network order *)
	    host: Address;
	    portnum: PortNumber;
	 END;

   CONST
      addrlen = 16; (* size of struct sockaddr in <sys/socket.h> *)
   TYPE
      SysAddress = ARRAY addrlen OF BYTE;

   PROCEDURE GetPort(address: SocketAddress) : INTEGER;
   PROCEDURE SetPort(VAR address: SocketAddress; portnum: INTEGER);
      (* takes care of conversions from and to network order *)

   PROCEDURE ConvertToSys(address: SocketAddress; VAR sysaddr: SysAddress);
   PROCEDURE ConvertFromSys(sysaddr: SysAddress; VAR address: SocketAddress);

   PROCEDURE ReadText(s: Streams.Stream; VAR ipaddr: Address) : BOOLEAN;
   PROCEDURE WriteText(s: Streams.Stream; ipaddr: Address);
   PROCEDURE CreateAddress(VAR ipaddr: Address; dotteddec: ARRAY OF CHAR);

END IPv4Addresses.
