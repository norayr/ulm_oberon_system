(* Ulm's Oberon Library
   Copyright (C) 1989-2004 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: IPv4NameSys.od,v 1.2 2004/09/22 21:18:57 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: IPv4NameSys.od,v $
   Revision 1.2  2004/09/22 21:18:57  borchert
   Convert and error handling added

   Revision 1.1  2004/03/30 06:12:24  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

DEFINITION IPv4NameSystems;

   (* import name systems using IPv4 addresses *)

   IMPORT Events, IPv4Addresses, Names, Networks, RelatedEvents;

   CONST
      errors = 6;
      colonExpected = 0;
      portExpected = 1;
      invalidPortNumber = 2;
      hostnameExpected = 3;
      unableToFindPort = 4;
      tooManyIndirections = 5;
   TYPE
      ErrorCode = SHORTINT; (* colonExpected.. *)
      ErrorEvent = POINTER TO ErrorEventRec;
      ErrorEventRec =
	 RECORD
	    (Events.EventRec)
	    errorcode: ErrorCode;
	    source: ARRAY 128 OF CHAR;
	 END;
   VAR
      error: Events.EventType;
      errormsg: ARRAY errors OF Events.Message;

   PROCEDURE Import(ipaddr: IPv4Addresses.SocketAddress;
                    VAR root: Names.Node;
		    errors: RelatedEvents.Object) : BOOLEAN;
   PROCEDURE ImportFrom(source: ARRAY OF CHAR;
                        VAR root: Names.Node;
			errors: RelatedEvents.Object) : BOOLEAN;

   PROCEDURE Convert(source: ARRAY OF CHAR;
		     VAR address: Networks.Address;
		     errors: RelatedEvents.Object) : BOOLEAN;

END IPv4NameSystems.
