(* Ulm's Oberon Library
   Copyright (C) 1989-2005 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: UnixSockets.od,v 1.4 2005/02/09 10:02:40 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: UnixSockets.od,v $
   Revision 1.4  2005/02/09 10:02:40  borchert
   Drop added

   Revision 1.3  2004/03/09 21:11:40  borchert
   UnixSockets is no longer restricted to SysSockets.stream;
   instead a type parameter has been added where necessary

   Revision 1.2  2001/04/30 08:38:44  borchert
   Open, OpenL, CreateOpenCondition, and CreateOpenConditionL extended
   with optional specification of a non-default address the socket
   is to be bound to locally
   (useful for services on virtual IP addresses)

   Revision 1.1  1996/01/05 12:05:12  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

DEFINITION UnixSockets;

   (* common parts of Internet, UnixDomainSockets and other socket types *)

   IMPORT Conditions, Networks, RelatedEvents, Streams, SysTypes;

   TYPE
      Socket = POINTER TO SocketRec;
      SocketRec = RECORD (Networks.SocketRec) END;

   PROCEDURE Open(VAR s: Streams.Stream;
		  addressFamily: INTEGER;
		  type: INTEGER;
		  address: ARRAY OF BYTE;
		  bind: BOOLEAN; bindto: ARRAY OF BYTE;
		  bufmode: Streams.BufMode;
		  errors: RelatedEvents.Object) : BOOLEAN;
   PROCEDURE OpenL(VAR s: Streams.Stream;
		   addressFamily: INTEGER;
		   type: INTEGER;
		   address: ARRAY OF BYTE;
		   len: SysTypes.Size;
		   bind: BOOLEAN; bindto: ARRAY OF BYTE;
		   bindtolen: SysTypes.Size;
		   bufmode: Streams.BufMode;
		   errors: RelatedEvents.Object) : BOOLEAN;

   PROCEDURE CreateOpenCondition(VAR condition: Conditions.Condition;
				 addressFamily: INTEGER;
				 type: INTEGER;
				 address: ARRAY OF BYTE;
		                 bind: BOOLEAN; bindto: ARRAY OF BYTE);
   PROCEDURE CreateOpenConditionL(VAR condition: Conditions.Condition;
				  addressFamily: INTEGER;
				  type: INTEGER;
				  address: ARRAY OF BYTE;
				  len: SysTypes.Size;
		                  bind: BOOLEAN; bindto: ARRAY OF BYTE;
		                  bindtolen: SysTypes.Size);
   PROCEDURE TestAndOpen(VAR s: Streams.Stream;
			 condition: Conditions.Condition;
			 bufmode: Streams.BufMode;
			 errors: RelatedEvents.Object) : BOOLEAN;
   PROCEDURE Drop(condition: Conditions.Condition);

   PROCEDURE Listen(VAR socket: Socket;
		    addressFamily: INTEGER;
		    type: INTEGER;
		    port: ARRAY OF BYTE;
		    errors: RelatedEvents.Object) : BOOLEAN;
   PROCEDURE ListenL(VAR socket: Socket;
		     addressFamily: INTEGER;
		     type: INTEGER;
		     port: ARRAY OF BYTE;
		     len: SysTypes.Size;
		     errors: RelatedEvents.Object) : BOOLEAN;
   PROCEDURE Accept(socket: Socket;
		    VAR s: Streams.Stream; bufmode: Streams.BufMode;
		    VAR peer: ARRAY OF BYTE) : BOOLEAN;
   PROCEDURE Release(socket: Socket);

   PROCEDURE CreateAcceptCondition(VAR condition: Conditions.Condition;
			           socket: Socket);

   PROCEDURE GetName(socket: Socket; VAR address: ARRAY OF BYTE;
		     errors: RelatedEvents.Object) : BOOLEAN;

END UnixSockets.
