(* Ulm's Oberon Library
   Copyright (C) 1989-1998 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: CDBSources.om,v 1.4 2005/01/30 07:39:13 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: CDBSources.om,v $
   Revision 1.4  2005/01/30 07:39:13  borchert
   bug fix: GetNode crashed if path was known in case of source.node = NIL

   Revision 1.3  2004/09/10 21:24:57  borchert
   fixed NIL parameter to Error in GetNode

   Revision 1.2  2004/09/10 17:33:58  borchert
   bug fixes in GetNode: the directory node was lost in case of
      multiple retrievals within one directory and error events
      were lost
   language parameter removed
   improved error messages

   Revision 1.1  2001/02/19 13:02:46  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

MODULE CDBSources;

   IMPORT CDBNames, CompilerObjects, ConstStrings, Errors, Events, Iterators,
      Names, NetIO, Paths, PersistentObjects, PersistentTexts, Priorities,
      RelatedEvents, Services, Shards, Sources := CompilerSources, Streams,
      Strings, Times, Write;

   TYPE
      Source = POINTER TO SourceRec;
      SourceRec =
	 RECORD
	    (Sources.SourceRec)
	    basedir, path: ConstStrings.String;
	    auth: Shards.Lid;
	    (* non-persistent components *)
	    kind: Sources.SourceKind;
	    modname: ConstStrings.String;
	    node: CDBNames.Node;
	    text: PersistentTexts.Text;
	 END;
   VAR
      sourceType: Services.Type;
      if: Sources.Interface;
      lidType: Services.Type; (* that of Shards.Lid *)

   CONST
      noRoot = 0;
      notFound = 1;
      noMembers = 2;
      accessFailed = 3;
      noMatch = 4;
      errors = 5;
   TYPE
      ErrorCode = SHORTINT;
      ErrorEvent = POINTER TO ErrorEventRec;
      ErrorEventRec =
	 RECORD
	    (Events.EventRec)
	    object: RelatedEvents.Object;
	    code: ErrorCode;
	    name: ConstStrings.String;
	 END;
   VAR
      error: Events.EventType;
      errormsg: ARRAY errors OF Events.Message;

   (* === error handling =================================================== *)

   PROCEDURE WriteError(s: Streams.Stream; event: Events.Event);
   BEGIN
      WITH event: ErrorEvent DO
	 IF event.name # NIL THEN
	    ConstStrings.Write(s, event.name);
	    Write.StringS(s, ": ");
	 END;
	 Write.StringS(s, errormsg[event.code]);
      END;
   END WriteError;

   PROCEDURE InitErrorHandling;
   BEGIN
      Events.Define(error);
      Events.SetPriority(error, Priorities.liberrors);
      errormsg[noRoot] := "unable to access CDB root";
      errormsg[notFound] := "source in CDB not found";
      errormsg[noMembers] := "unable to list members";
      errormsg[accessFailed] := "unable to access CDB node";
      errormsg[noMatch] := "requested source type not found";
      Errors.AssignWriteProcedure(error, WriteError);
   END InitErrorHandling;

   PROCEDURE Error(object: RelatedEvents.Object; code: ErrorCode;
		   name: ConstStrings.String);
      VAR
	 event: ErrorEvent;
   BEGIN
      NEW(event);
      event.type := error;
      event.message := errormsg[code];
      event.object := object;
      event.code := code;
      event.name := name;
      RelatedEvents.Raise(object, event);
   END Error;

   (* === PersistentObjects if procedures ================================== *)

   PROCEDURE ReadConstString(s: Streams.Stream;
			     VAR string: ConstStrings.String) : BOOLEAN;
      VAR
	 isNIL: BOOLEAN;
   BEGIN
      IF ~NetIO.ReadBoolean(s, isNIL) THEN RETURN FALSE END;
      IF isNIL THEN
	 string := NIL; RETURN TRUE
      ELSE
	 RETURN NetIO.ReadConstString(s, string)
      END;
   END ReadConstString;

   PROCEDURE WriteConstString(s: Streams.Stream;
			      VAR string: ConstStrings.String) : BOOLEAN;
   BEGIN
      IF ~NetIO.WriteBoolean(s, string = NIL) THEN RETURN FALSE END;
      IF string = NIL THEN
	 RETURN TRUE
      ELSE
	 RETURN NetIO.WriteConstString(s, string)
      END;
   END WriteConstString;

   PROCEDURE CreateSource(VAR object: PersistentObjects.Object);
      VAR
	 source: Source;
   BEGIN
      NEW(source); PersistentObjects.Init(source, sourceType);
      Sources.Init(source, if);
      source.node := NIL; source.text := NIL;
      object := source;
   END CreateSource;

   PROCEDURE ReadSource(s: Streams.Stream;
                        object: PersistentObjects.Object) : BOOLEAN;
   BEGIN
      WITH object: Source DO
	 RETURN ReadConstString(s, object.basedir) &
		ReadConstString(s, object.path) &
		PersistentObjects.GuardedReadObjectOrNIL(s, lidType,
		                                         object.auth)
      END;
   END ReadSource;

   PROCEDURE WriteSource(s: Streams.Stream;
                         object: PersistentObjects.Object) : BOOLEAN;
   BEGIN
      WITH object: Source DO
	 RETURN WriteConstString(s, object.basedir) &
		WriteConstString(s, object.path) &
		PersistentObjects.WriteObjectOrNIL(s, object.auth)
      END;
   END WriteSource;

   (* === Sources interface ================================================ *)

   PROCEDURE GetNode(source: Source; VAR node: CDBNames.Node) : BOOLEAN;
      VAR
	 path: ARRAY 1024 OF CHAR;
	 s: Streams.Stream;
	 root, subnode, srcnode: Names.Node;
	 it: Iterators.Iterator;
	 dirpath, rootpath: ConstStrings.String;
	 srcid: ConstStrings.String;
   BEGIN
      IF source.node = NIL THEN
	 path[0] := 0X; Strings.Open(s, path);
	 ConstStrings.Write(s, source.basedir);
	 Write.CharS(s, Paths.separator);
	 Write.StringS(s, "modules");
	 Streams.Release(s);
	 IF ~Paths.GetNode(path, source.auth, source, root) OR
	       ~(root IS CDBNames.Node) THEN
	    ConstStrings.Create(rootpath, path);
	    Error(source, noRoot, rootpath);
	    RETURN FALSE
	 END;
	 IF source.path # NIL THEN
	    ConstStrings.Extract(path, source.path);
	    IF ~Paths.GetNodeN(root, path, source.auth, source, srcnode) OR
		  ~(srcnode IS CDBNames.Node) THEN
	       Error(source, notFound, source.path);
	       RETURN FALSE
	    END;
	 ELSE
	    (* path name not yet known *)
	    path[0] := 0X; Strings.Open(s, path);
	    ConstStrings.Write(s, source.modname);
	    Write.CharS(s, Paths.separator);
	    Write.StringS(s, "src");
	    Write.CharS(s, Paths.separator);
	    CASE source.kind OF
	    | Sources.definition: Write.StringS(s, "def");
	    | Sources.module,
	      Sources.defmod:     Write.StringS(s, "mod");
	    END;
	    IF ~Paths.GetNodeN(root, path, source.auth, source, subnode) OR
		  ~(subnode IS CDBNames.Node) THEN
	       ConstStrings.Create(dirpath, path);
	       Error(source, notFound, dirpath);
	       RETURN FALSE
	    END;
	    RelatedEvents.Save(subnode);
	    RelatedEvents.Forward(subnode, source);
	    IF ~Names.GetMembers(subnode, source.auth, it) THEN
	       ConstStrings.Create(dirpath, path);
	       Error(source, noMembers, dirpath);
	       RelatedEvents.Restore(subnode);
	       RETURN FALSE
	    END;
	    LOOP
	       IF ~Iterators.Get(it, srcid) THEN
		  ConstStrings.Create(dirpath, path);
		  Error(source, noMatch, dirpath);
		  RelatedEvents.Restore(subnode);
		  RETURN FALSE
	       END;
	       IF ~Names.GetNode(subnode, srcid, source.auth, srcnode) OR
		     ~(srcnode IS CDBNames.Node) THEN
		  Error(source, accessFailed, srcid);
		  RelatedEvents.Restore(subnode);
		  RETURN FALSE
	       END;
	       RelatedEvents.Save(srcnode);
	       RelatedEvents.Forward(srcnode, source);
	       IF ~CDBNames.GetSourceHeader(srcnode(CDBNames.Node),
					    source.auth, source.header) THEN
		  Error(source, accessFailed, srcid);
		  RelatedEvents.Restore(subnode);
		  RelatedEvents.Restore(srcnode);
		  RETURN FALSE
	       END;
	       RelatedEvents.Restore(srcnode);
	       IF source.header.kind = source.kind THEN EXIT END;
	    END;
	    RelatedEvents.Restore(subnode);
	    (* once we have a path name we keep it even if
	       newer versions of this source come into existence
	    *)
	    Write.CharS(s, Paths.separator);
	    ConstStrings.Write(s, srcid);
	    Streams.Release(s);
	    ConstStrings.Create(source.path, path);
	 END;
	 source.node := srcnode(CDBNames.Node);
      END;
      node := source.node; RETURN TRUE
   END GetNode;

   PROCEDURE Open(source: Sources.Source;
                  VAR s: Streams.Stream) : BOOLEAN;
      VAR
	 node: CDBNames.Node;
	 text: PersistentTexts.Text;
	 ok: BOOLEAN;
   BEGIN
      WITH source: Source DO
	 IF source.text = NIL THEN
	    IF ~GetNode(source, node) THEN
	       RETURN FALSE
	    END;
	    RelatedEvents.Save(node); RelatedEvents.Forward(node, source);
	    ok := CDBNames.GetText(node, source.auth, text);
	    RelatedEvents.Restore(node);
	    IF ~ok THEN RETURN FALSE END;
	    source.text := text;
	 END;
	 RETURN PersistentTexts.Open(s, source.text, source)
      END;
   END Open;

   (* === initialization =================================================== *)

   PROCEDURE Init;
      VAR
	 persif: PersistentObjects.Interface;
   BEGIN
      InitErrorHandling;
      NEW(persif);
      persif.create := CreateSource;
      persif.read := ReadSource;
      persif.write := WriteSource;
      persif.createAndRead := NIL;
      PersistentObjects.RegisterType(sourceType,
         "CDBSources.Source", "CompilerSources.Source", persif);
      Services.SeekType("Shards.Lid", lidType); ASSERT(lidType # NIL);

      NEW(if); if.open := Open;
   END Init;

   (* === exported constructors ============================================ *)

   PROCEDURE Create(VAR source: Sources.Source;
                    basedir, modname: ARRAY OF CHAR;
		    kind: Sources.SourceKind;
		    auth: Shards.Lid;
		    errors: RelatedEvents.Object) : BOOLEAN;
      VAR
	 src: Source;
	 ok: BOOLEAN;
	 node: CDBNames.Node;
   BEGIN
      ASSERT((basedir[0] # 0X) & (modname[0] # 0X));
      CreateSource(src);
      ConstStrings.Create(src.basedir, basedir);
      ConstStrings.Create(src.modname, modname);
      src.path := NIL;
      src.auth := auth;
      src.kind := kind;
      Sources.Init(src, if);

      RelatedEvents.Save(src);
      RelatedEvents.Forward(src, errors);
      ok := GetNode(src, node);
      RelatedEvents.Restore(src);
      IF ok THEN
	 source := src;
	 RETURN TRUE
      ELSE
	 source := NIL;
	 RETURN FALSE
      END;
      source := src;
      RETURN TRUE
   END Create;

   PROCEDURE CreateP(VAR source: Sources.Source;
                     basedir, path: ARRAY OF CHAR;
		     auth: Shards.Lid;
		     errors: RelatedEvents.Object) : BOOLEAN;
      VAR
	 src: Source;
	 ok: BOOLEAN;
	 node: CDBNames.Node;
   BEGIN
      ASSERT((basedir[0] # 0X) & (path[0] # 0X));
      CreateSource(src);
      ConstStrings.Create(src.basedir, basedir);
      ConstStrings.Create(src.path, path);
      src.auth := auth;

      RelatedEvents.Save(src);
      RelatedEvents.Forward(src, errors);
      ok := GetNode(src, node);
      RelatedEvents.Restore(src);
      IF ok THEN
	 source := src;
	 RETURN TRUE
      ELSE
	 source := NIL;
	 RETURN FALSE
      END;
   END CreateP;

BEGIN
   Init;
END CDBSources.
