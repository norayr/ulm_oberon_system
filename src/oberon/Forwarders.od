(* Ulm's Oberon Library
   Copyright (C) 1989-1995 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: Forwarders.od,v 1.1 1996/01/04 16:40:55 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: Forwarders.od,v $
   Revision 1.1  1996/01/04  16:40:55  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

DEFINITION Forwarders; (* AFB 3/95 *)

   IMPORT Services;

   TYPE
      Object = Services.Object;
      ForwardProc = PROCEDURE (from, to: Object);

   PROCEDURE Register(for: ARRAY OF CHAR; forward: ForwardProc);
      (* register a forwarder which is to be called for all
	 forward operations which affects extensions of `for';
	 "" may be given for Services.Object
      *)

   PROCEDURE RegisterObject(object: Object; forward: ForwardProc);
      (* to be called instead of Register if specific objects
	 are supported only and not all extensions of a type
      *)

   PROCEDURE Update(object: Object; forward: ForwardProc);
      (* is to be called by one of the registered forwarders if
	 an interface for object has been newly installed or changed
	 in a way which needs `forward' to be called again for each of
	 the filter objects which delegate to `object'
      *)

   PROCEDURE Forward(from, to: Object);
      (* forward (as far as supported) all operations from `from' to `to' *)

END Forwarders.
