(* Ulm's Oberon Library
   Copyright (C) 1989-2004 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: ChessClocks.od,v 1.1 2004/04/23 06:10:11 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: ChessClocks.od,v $
   Revision 1.1  2004/04/23 06:10:11  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

DEFINITION ChessClocks;

   IMPORT Clocks, Objects, Services, Shards, Times;

   TYPE
      ChessClock = POINTER TO ChessClockRec;
      ChessClockRec = RECORD (Services.ObjectRec) END;
      Player = SHORTINT; (* player number, starting from 0 *)

   TYPE
      StartProc = PROCEDURE (chessclock: ChessClock;
                             auth: Shards.Lid) : BOOLEAN;
      StopProc = PROCEDURE (chessclock: ChessClock;
                            auth: Shards.Lid) : BOOLEAN;
      SwitchProc = PROCEDURE (chessclock: ChessClock;
	                      auth: Shards.Lid; player: Player) : BOOLEAN;

      RunningProc = PROCEDURE (chessclock: ChessClock) : BOOLEAN;
      CurrentPlayerProc = PROCEDURE (chessclock: ChessClock) : Player;
      GetClockProc = PROCEDURE (chessclock: ChessClock; player: Player;
	                        VAR clock: Clocks.Clock);

      Interface = POINTER TO InterfaceRec;
      InterfaceRec =
	 RECORD
	    (Objects.ObjectRec)
	    start: StartProc;
	    stop: StopProc;
	    switch: SwitchProc;
	    running: RunningProc;
	    currentPlayer: CurrentPlayerProc;
	    getClock: GetClockProc;
	 END;

   PROCEDURE Init(chessclock: ChessClock; if: Interface;
                  numberOfPlayers: SHORTINT;
		  timelimit: Times.Time);

   PROCEDURE Start(chessclock: ChessClock; auth: Shards.Lid) : BOOLEAN;
   PROCEDURE Stop(chessclock: ChessClock; auth: Shards.Lid) : BOOLEAN;
   PROCEDURE Switch(chessclock: ChessClock;
                    auth: Shards.Lid; player: Player) : BOOLEAN;

   PROCEDURE Running(chessclock: ChessClock) : BOOLEAN;
   PROCEDURE CurrentPlayer(chessclock: ChessClock) : Player;
   PROCEDURE GetClock(chessclock: ChessClock; player: Player;
                      VAR clock: Clocks.Clock);

   PROCEDURE NumberOfPlayers(chessclock: ChessClock) : SHORTINT;
   PROCEDURE GetTimeLimit(chessclock: ChessClock;
                          VAR timelimit: Times.Time);
   PROCEDURE TimeLeft(chessclock: ChessClock; player: Player;
                      VAR time: Times.Time);

END ChessClocks.
