(* Ulm's Oberon Library
   Copyright (C) 1989-2007 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: XDisplays.od,v 1.1 2005/04/10 17:33:20 borchert Exp borchert $
   ----------------------------------------------------------------------------
   $Log: XDisplays.od,v $
   Revision 1.1  2005/04/10 17:33:20  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

DEFINITION XDisplays;

   IMPORT Disciplines, Events, Objects, RelatedEvents, Streams, Types;

   TYPE
      Display = POINTER TO DisplayRec;
      DisplayRec = RECORD (Disciplines.ObjectRec) END;

   TYPE
      WindowID = Types.Int32;
      PixmapID = Types.Int32;
      DrawableID = Types.Int32;
      ResourceID = Types.Int32;
      AtomID = Types.Int32;
      ColormapID = Types.Int32;
      VisualID = Types.Int32;
      FontID = Types.Int32;
      FontableID = Types.Int32;
      GContextID = Types.Int32;
      Pixel = Types.Int32;
      Keysym = Types.Int32;
      Keycode = INTEGER;

   CONST
      gravityForget = 0;
      gravityUnmap = 0;
      gravityNorthWest = 1;
      gravityNorth = 2;
      gravityNorthEast = 3;
      gravityWest = 4;
      gravityCenter = 5;
      gravityEast = 6;
      gravitySouthWest = 7;
      gravitySouth = 8;
      gravitySouthEast = 9;
      gravityStatic = 10;
   TYPE
      Gravity = INTEGER;

   CONST
      shiftKey = 0;
      lockKey = 1;
      controlKey = 2;
      mod1Key = 3;
      mod2Key = 4;
      mod3Key = 5;
      mod4Key = 6;
      mod5Key = 7;
      button1Key = 8;
      button2Key = 9;
      button3Key = 10;
      button4Key = 11;
      button5Key = 12;
      specialKeys = 13;
   TYPE
      Key = SHORTINT; (* shiftKey .. button5Key *)
      KeySet = SET; (* OF Key *)
      KeyName = ARRAY 16 OF CHAR;
   VAR
      keyName: ARRAY specialKeys OF KeyName;

   CONST
      keys = 256;
      setlen = keys DIV (MAX(SET) + 1);
   TYPE
      KeymapStateSet = ARRAY setlen OF SET;

   CONST
      (* event types *)
      keyPress = 0;
      keyRelease = 1;
      buttonPress = 2;
      buttonRelease = 3;
      enterWindow = 4;
      leaveWindow = 5;
      pointerMotion = 6;
      pointerMotionHint = 7;
      button1Motion = 8;
      button2Motion = 9;
      button3Motion = 10;
      button4Motion = 11;
      button5Motion = 12;
      buttonMotion = 13;
      keymapState = 14;
      exposure = 15;
      visibilityChange = 16;
      structureNotify = 17;
      resizeRedirect = 18;
      substructureNotify = 19;
      substructureRedirect = 20;
      focusChange = 21;
      propertyChange = 22;
      colormapChange = 23;
      ownerGrabButton = 24;
      eventTypes = 25;
   TYPE
      EventType = SHORTINT; (* keyPress .. eventTypes *)
      EventTypeSet = SET; (* OF EventType *)
      EventTypeName = ARRAY 32 OF CHAR;
   VAR
      eventTypeName: ARRAY eventTypes OF EventTypeName;

   CONST
      (* visibility *)
      unobscured = 0;
      partiallyObscured = 1;
      fullyObscured = 2;
   TYPE
      VisibilityState = INTEGER; (* unObscured .. fullyObscured *)

   CONST
      (* X event codes used by server generated packets;
         note that codes 0 and 1 are reserved for errors and replies
      *)
      keyPressEvent = 2;
      keyReleaseEvent = 3;
      buttonPressEvent = 4;
      motionNotifyEvent = 6;
      enterNotifyEvent = 7;
      leaveNotifyEvent = 8;
      focusInEvent = 9;
      focusOutEvent = 10;
      keymapNotifyEvent = 11;
      exposeEvent = 12;
      graphicsExposeEvent = 13;
      noExposeEvent = 14;
      visibilityNotifyEvent = 15;
      createNotifyEvent = 16;
      destroyNotifyEvent = 17;
      unmapNotifyEvent = 18;
      mapNotifyEvent = 19;
      mapRequestEvent = 20;
      reparentNotifyEvent = 21;
      configureNotifyEvent = 22;
      configureRequestEvent = 23;
      gravityNotifyEvent = 24;
      resizeRequestEvent = 25;
      circulateNotifyEvent = 26;
      circulateRequestEvent = 27;
      propertyNotifyEvent = 28;
      selectionClearEvent = 29;
      selectionRequestEvent = 30;
      selectionNotifyEvent = 31;
      colormapNotifyEvent = 32;
      clientMessageEvent = 33;
      mappingNotifyEvent = 34;
      events = 35;
   TYPE
      XEventCode = INTEGER; (* keyPressEvent .. mappingNotifyEvent *)
      XEventName = ARRAY 32 OF CHAR;
   VAR
      xeventName: ARRAY events OF XEventName;
   TYPE
      XEvent = POINTER TO XEventRec;
      XEventRec =
	 RECORD
	    (Events.EventRec)
	    code: XEventCode;
	    sequenceNumber: INTEGER;
	    display: Display;
	 END;
      ButtonPressEvent = POINTER TO ButtonPressEventRec;
      ButtonPressEventRec =
	 RECORD
	    (XEventRec)
	    button: INTEGER;
	    timestamp: Types.Int32;
	    root, event, child: WindowID;
	    rootx, rooty, eventx, eventy: INTEGER;
	    state: KeySet;
	    sameScreen: BOOLEAN;
	 END;
      CirculateNotifyEvent = POINTER TO CirculateNotifyEventRec;
      CirculateNotifyEventRec =
	 RECORD
	    (XEventRec)
	    event, window: WindowID;
	    place: INTEGER; (* top = 0, bottom = 1 *)
	 END;
      CirculateRequestEvent = POINTER TO CirculateRequestEventRec;
      CirculateRequestEventRec =
	 RECORD
	    (XEventRec)
	    parent, window: WindowID;
	    place: INTEGER; (* top = 0, bottom = 1 *)
	 END;
      ClientMessageEvent = POINTER TO ClientMessageEventRec;
      ClientMessageEventRec =
	 RECORD
	    (XEventRec)
	    format: INTEGER; (* 8, 16, or 32 *)
	    window: WindowID;
	    msgtype: AtomID;
	    data: Streams.Stream;
	 END;
      ColormapNotifyEvent = POINTER TO ColormapNotifyEventRec;
      ColormapNotifyEventRec =
	 RECORD
	    (XEventRec)
	    window: WindowID;
	    colormap: ColormapID;
	    new: BOOLEAN;
	    state: INTEGER;
	 END;
      ConfigureNotifyEvent = POINTER TO ConfigureNotifyEventRec;
      ConfigureNotifyEventRec =
	 RECORD
	    (XEventRec)
	    event, window, aboveSibling: WindowID;
	    x, y: INTEGER;
	    width, height: INTEGER;
	    borderWidth: INTEGER;
	    overrideRedirect: BOOLEAN;
	 END;
      ConfigureRequestEvent = POINTER TO ConfigureRequestEventRec;
      ConfigureRequestEventRec =
	 RECORD
	    (XEventRec)
	    stackMode: INTEGER;
	       (*
		  0: Above
		  1: Below
		  2: TopIf
		  3: BottomIf
		  4: Opposite
	       *)
	    parent, window, sibling: WindowID;
	    x, y: INTEGER;
	    width, height: INTEGER;
	    borderWidth: INTEGER;
	    valueMask: SET;
	       (*
		  0: x
		  1: y
		  2: width
		  3: height
		  4: borderWidth
		  5: sibling
		  6: stackMode
	       *)
	 END;
      CreateNotifyEvent = POINTER TO CreateNotifyEventRec;
      CreateNotifyEventRec =
	 RECORD
	    (XEventRec)
	    parent, window: WindowID;
	    x, y: INTEGER;
	    width, height: INTEGER;
	    borderWidth: INTEGER;
	    overrideRedirect: BOOLEAN;
	 END;
      DestroyNotifyEvent = POINTER TO DestroyNotifyEventRec;
      DestroyNotifyEventRec =
	 RECORD
	    (XEventRec)
	    event, window: WindowID;
	 END;
      EnterOrLeaveNotifyEvent = POINTER TO EnterOrLeaveNotifyEventRec;
      EnterOrLeaveNotifyEventRec =
	 RECORD
	    (XEventRec)
	    detail: INTEGER;
	       (*
		  0: Ancestor
		  1: Virtual
		  2: Inferior
		  3: Nonlinear
		  4: NonlinearVirtual
	       *)
	    time: Types.Int32;
	    root, event, child: WindowID;
	    rootx, rooty: INTEGER;
	    eventx, eventy: INTEGER;
	    state: KeySet;
	    mode: INTEGER;
	       (*
		  0: Normal
		  1: Grab
		  2: Ungrab
	       *)
	    sameScreen: BOOLEAN;
	    focus: BOOLEAN;
	 END;
      ExposeEvent = POINTER TO ExposeEventRec;
      ExposeEventRec =
	 RECORD
	    (XEventRec)
	    window: WindowID;
	    x, y: INTEGER;
	    width, height: INTEGER;
	    count: INTEGER;
	 END;
      FocusEvent = POINTER TO FocusEventRec;
      FocusEventRec =
	 RECORD
	    (XEventRec)
	    detail: INTEGER;
	       (*
		  0: Ancestor
		  1: Virtual
		  2: Inferior
		  3: Nonlinear
		  4: NonlinearVirtual
		  5: Pointer
		  6: PointerRoot
		  7: None
	       *)
	    event: WindowID;
	    mode: INTEGER;
	       (*
		  0: Normal
		  1: Grab
		  2: WhileGrabbed
	       *)
	 END;
      GraphicsExposeEvent = POINTER TO GraphicsExposeEventRec;
      GraphicsExposeEventRec =
	 RECORD
	    (XEventRec)
	    drawable: DrawableID;
	    x, y: INTEGER;
	    width, height: INTEGER;
	    majorOpcode, minorOpcode: INTEGER;
	    count: INTEGER;
	 END;
      GravityNotifyEvent = POINTER TO GravityNotifyEventRec;
      GravityNotifyEventRec =
	 RECORD
	    (XEventRec)
	    event, window: WindowID;
	    x, y: INTEGER;
	 END;
      KeymapNotifyEvent = POINTER TO KeymapNotifyEventRec;
      KeymapNotifyEventRec =
	 RECORD
	    (XEventRec)
	    keys: KeymapStateSet;
	 END;
      KeyEvent = POINTER TO KeyEventRec;
      KeyEventRec =
	 RECORD
	    (XEventRec)
	    keycode: INTEGER;
	    time: Types.Int32;
	    root, event, child: WindowID;
	    rootx, rooty: INTEGER;
	    eventx, eventy: INTEGER;
	    state: KeySet;
	    sameScreen: BOOLEAN;
	 END;
      MapNotifyEvent = POINTER TO MapNotifyEventRec;
      MapNotifyEventRec =
	 RECORD
	    (XEventRec)
	    event, window: WindowID;
	    overrideRedirect: BOOLEAN;
	 END;
      MappingNotifyEvent = POINTER TO MappingNotifyEventRec;
      MappingNotifyEventRec =
	 RECORD
	    (XEventRec)
	    request: INTEGER;
	       (*
		  0: Modifier
		  1: Keyboard
		  2: Pointer
	       *)
	    firstKeycode: INTEGER;
	    count: INTEGER;
	 END;
      MapRequestEvent = POINTER TO MapRequestEventRec;
      MapRequestEventRec =
	 RECORD
	    (XEventRec)
	    parent, window: WindowID;
	 END;
      MotionNotifyEvent = POINTER TO MotionNotifyEventRec;
      MotionNotifyEventRec =
	 RECORD
	    (XEventRec)
	    detail: INTEGER;
	       (*
		  0: Normal
		  1: Hint
	       *)
	    time: Types.Int32;
	    root, event, child: WindowID;
	    rootx, rooty: INTEGER;
	    eventx, eventy: INTEGER;
	    state: KeySet;
	    sameScreen: BOOLEAN;
	 END;
      NoExposeEvent = POINTER TO NoExposeEventRec;
      NoExposeEventRec =
	 RECORD
	    (XEventRec)
	    drawable: DrawableID;
	    majorOpcode, minorOpcode: INTEGER;
	 END;
      PropertyNotifyEvent = POINTER TO PropertyNotifyEventRec;
      PropertyNotifyEventRec =
	 RECORD
	    (XEventRec)
	    window: WindowID;
	    atom: AtomID;
	    time: Types.Int32;
	    state: INTEGER;
	       (*
		  0: NewValue
		  1: Deleted
	       *)
	 END;
      ReparentNotifyEvent = POINTER TO ReparentNotifyEventRec;
      ReparentNotifyEventRec =
	 RECORD
	    (XEventRec)
	    event, window, parent: WindowID;
	    x, y: INTEGER;
	    overrideRedirect: BOOLEAN;
	 END;
      ResizeRequestEvent = POINTER TO ResizeRequestEventRec;
      ResizeRequestEventRec =
	 RECORD
	    (XEventRec)
	    window: WindowID;
	    width, height: INTEGER;
	 END;
      SelectionClearEvent = POINTER TO SelectionClearEventRec;
      SelectionClearEventRec =
	 RECORD
	    (XEventRec)
	    time: Types.Int32;
	    owner: WindowID;
	    selection: AtomID;
	 END;
      SelectionNotifyEvent = POINTER TO SelectionNotifyEventRec;
      SelectionNotifyEventRec =
	 RECORD
	    (XEventRec)
	    time: Types.Int32;
	    requestor: WindowID;
	    selection: AtomID;
	    target: AtomID;
	    property: AtomID;
	 END;
      SelectionRequestEvent = POINTER TO SelectionRequestEventRec;
      SelectionRequestEventRec =
	 RECORD
	    (XEventRec)
	    time: Types.Int32;
	    owner, requestor: WindowID;
	    selection: AtomID;
	    target: AtomID;
	    property: AtomID;
	 END;
      UnmapNotifyEvent = POINTER TO UnmapNotifyEventRec;
      UnmapNotifyEventRec =
	 RECORD
	    (XEventRec)
	    event, window: WindowID;
	    fromConfigure: BOOLEAN;
	 END;
      VisibilityNotifyEvent = POINTER TO VisibilityNotifyEventRec;
      VisibilityNotifyEventRec =
	 RECORD
	    (XEventRec)
	    window: WindowID;
	    state: VisibilityState;
	 END;

   CONST
      (* value-mask for CreateWindow *)
      atBackgroundPixmap = 0;
      atBackgroundPixel = 1;
      atBorderPixmap = 2;
      atBorderPixel = 3;
      atBitGravity = 4;
      atWinGravity = 5;
      atBackingStore = 6;
      atBackingPlanes = 7;
      atBackingPixel = 8;
      atOverrideRedirect = 9;
      atSaveUnder = 10;
      atEventMask = 11;
      atDoNotPropagateMask = 12;
      atColormap = 13;
      atCursor = 14;
      attributes = 15;

   TYPE
      WindowAttributeSet = SET;
      WindowAttributes = POINTER TO WindowAttributesRec;
      WindowAttributesRec =
	 RECORD
	    (Objects.ObjectRec)
	    defined: WindowAttributeSet;
	    backgroundPixmap: PixmapID;
	    backgroundPixel: Types.Int32;
	    borderPixmap: PixmapID;
	    borderPixel: Types.Int32;
	    bitGravity: Gravity;
	    winGravity: Gravity;
	    backingStore: INTEGER;
	    backingPlanes: Types.Int32;
	    backingPixel: Types.Int32;
	    overrideRedirect: BOOLEAN;
	    saveUnder: BOOLEAN;
	    eventMask: EventTypeSet;
	    doNotPropagateMask: EventTypeSet;
	    colormap: ColormapID;
	    cursor: Types.Int32;
	 END;
      ExtraWindowAttributes = POINTER TO ExtraWindowAttributesRec;
	 (* returned by GetWindowAttributes *)
      ExtraWindowAttributesRec =
	 RECORD
	    (Objects.ObjectRec)
	    visual: VisualID;
	    class: INTEGER;
	    mapIsInstalled: BOOLEAN;
	    mapState: INTEGER;
	    allEventMasks: EventTypeSet;
	 END;
      Geometry = POINTER TO GeometryRec;
      GeometryRec =
	 RECORD
	    (Objects.ObjectRec)
	    depth: INTEGER;
	    root: WindowID;
	    x, y: INTEGER;
	    width, height: INTEGER;
	    borderWidth: INTEGER;
	 END;

   CONST
      (* stack modes *)
      smAbove = 0;
      smBelow = 1;
      smTopIf = 2;
      smBottomIf = 3;
      smOpposite = 4;
      stackmodes = 5;
   TYPE
      StackMode = INTEGER; (* smAbove .. smOpposite *)
   CONST
      (* set of configuration variables for ConfigureWindow *)
      cwX = 0;
      cwY = 1;
      cwWidth = 2;
      cwHeight = 3;
      cwBorderWidth = 4;
      cwSibling = 5;
      cwStackMode = 6;
      cwAttributes = 7;
   TYPE
      ConfigureWindowParameterSet = SET; (* OF cwX .. cwStackMode *)
      ConfigureWindowParameters = POINTER TO ConfigureWindowParametersRec;
      ConfigureWindowParametersRec =
	 RECORD
	    (Objects.ObjectRec)
	    defined: ConfigureWindowParameterSet;
	    x, y: INTEGER;
	    width, height: INTEGER;
	    borderWidth: INTEGER;
	    sibling: WindowID;
	    stackMode: StackMode;
	 END;

   CONST
      (* value-mask for CreateGC *)
      gcFunction = 0;
      gcPlaneMask = 1;
      gcForeground = 2;
      gcBackground = 3;
      gcLineWidth = 4;
      gcLineStyle = 5;
      gcCapStyle = 6;
      gcJoinStyle = 7;
      gcFillStyle = 8;
      gcFillRule = 9;
      gcTile = 10;
      gcStipple = 11;
      gcTileStippleXOrigin = 12;
      gcTileStippleYOrigin = 13;
      gcFont = 14;
      gcSubwindowMode = 15;
      gcGraphicsExposures = 16;
      gcClipXOrigin = 17;
      gcClipYOrigin = 18;
      gcClipMask = 19;
      gcDashOffset = 20;
      gcDashes = 21;
      gcArcMode = 22;
      gcAttributes = 23;
      gcAll = {gcFunction .. gcArcMode};
      (* GC functions *)
      gcfClear = 0;
      gcfAnd = 1;
      gcfAndReverse = 2;
      gcfCopy = 3;
      gcfAndInverted = 4;
      gcfNoOp = 5;
      gcfXor = 6;
      gcfOr = 7;
      gcfNor = 8;
      gcfEquiv = 9;
      gcfInvert = 10;
      gcfOrReverse = 11;
      gcfCopyInverted = 12;
      gcfOrInverted = 13;
      gcfNand = 14;
      gcfSet = 15;
      (* GC line styles *)
      gclsSolid = 0;
      gclsOnOffDash = 1;
      gclsDoubleDash = 2;
      (* GC cap styles *)
      gccsNotLast = 0;
      gccsButt = 1;
      gccsRound = 2;
      gccsProjecting = 3;
      (* GC join styles *)
      gcjsMiter = 0;
      gcjsRound = 1;
      gcjsBevel = 2;
      (* GC fill styles *)
      gcfsSolid = 0;
      gcfsTiled = 1;
      gcfsStippled = 2;
      (* GC fill rule *)
      gcfrEvenOdd = 0;
      gcfrWinding = 1;
      (* GC subwindow mode *)
      gcswClipByChildren = 0;
      gcswIncludeInferiors = 1;
      (* GC arc modes *)
      gcswChord = 0;
      gcswPieSlice = 1;
   TYPE
      GraphicalContextAttributeSet = SET; (* OF gcFunction .. gcArcMode *)
      GCFunction = INTEGER; (* gcfClear .. gcfSet *)
      LineStyle = INTEGER; (* gclsSolid .. gclsDoubleDash *)
      CapStyle = INTEGER; (* gccsNotLast .. gccsProjecting *)
      JoinStyle = INTEGER; (* gcjsMiter .. gcjsBevel *)
      FillStyle = INTEGER; (* gcfsSolid .. gcfsStippled *)
      FillRule = INTEGER; (* gcfrEvenOdd .. gcfrWinding *)
      SubWindowMode = INTEGER; (* gcswClipByChildren .. gcswIncludeInferiors *)
      ArcMode = INTEGER; (* gcswChord .. gcswPieSlice *)
      GraphicalContextAttributes = POINTER TO GraphicalContextAttributesRec;
      GraphicalContextAttributesRec =
	 RECORD
	    (Objects.ObjectRec)
	    defined: GraphicalContextAttributeSet;
	    function: GCFunction;
	    planeMask: Types.Int32;
	    foreground: Pixel;
	    background: Pixel;
	    lineWidth: INTEGER;
	    lineStyle: LineStyle;
	    capStyle: CapStyle;
	    joinStyle: JoinStyle;
	    fillStyle: FillStyle;
	    fillRule: FillRule;
	    tile: PixmapID;
	    stipple: PixmapID;
	    tileStippleXOrigin: INTEGER;
	    tileStippleYOrigin: INTEGER;
	    font: FontID;
	    subwindowMode: SubWindowMode;
	    graphicsExposures: BOOLEAN;
	    clipXOrigin: INTEGER;
	    clipYOrigin: INTEGER;
	    clipMask: PixmapID;
	    dashOffset: INTEGER;
	    dashes: INTEGER;
	    arcmode: ArcMode;
	 END;

   TYPE
      RGBColor =
	 RECORD
	    red, green, blue: INTEGER;
	 END;

   CONST
      (* shape values; used by FillPoly *)
      complex = 0;
      nonconvex = 1;
      convex = 2;
   TYPE
      Shape = INTEGER;
   CONST
      (* values for coordinate-mode: *)
      origin = 0;
      previous = 1;
   TYPE
      CoordinateMode = INTEGER;

   TYPE
      ListOfFontProperties = POINTER TO ListOfFontPropertiesRec;
      ListOfFontPropertiesRec =
	 RECORD
	    (Objects.ObjectRec)
	    atom: AtomID;
	    value: Types.Int32;
	    next: ListOfFontProperties;
	 END;
      CharInfo = POINTER TO CharInfoRec;
      CharInfoRec =
	 RECORD
	    (Objects.ObjectRec)
	    leftSideBearing: INTEGER;
	    rightSideBearing: INTEGER;
	    characterWidth: INTEGER;
	    ascent: INTEGER;
	    descent: INTEGER;
	    attributes: INTEGER;
	    next: CharInfo;
	 END;
      FontInfo = POINTER TO FontInfoRec;
      FontInfoRec =
	 RECORD
	    (Objects.ObjectRec)
	    drawDirection: INTEGER;
	       (* 0: LeftToRight
	          1: RightToLeft
	       *)
	    minCharOrByte2: INTEGER;
	    maxCharOrByte2: INTEGER;
	    minByte1: INTEGER;
	    maxByte1: INTEGER;
	    allCharsExist: BOOLEAN;
	    defaultChar: INTEGER;
	    minBounds: CharInfo;
	    maxBounds: CharInfo;
	    fontAscent: INTEGER;
	    fontDescent: INTEGER;
	    properties: ListOfFontProperties;
	 END;
   TYPE
      ListOfStrings = POINTER TO ListOfStringsRec;
      ListOfStringsRec =
	 RECORD
	    (Objects.ObjectRec)
	    next: ListOfStrings;
	    string: ARRAY 256 OF CHAR;
	 END;

   TYPE
      ListOfPoints = POINTER TO ListOfPointsRec;
      ListOfPointsRec =
	 RECORD
	    (Objects.ObjectRec)
	    x, y: INTEGER;
	    next: ListOfPoints;
	 END;
   TYPE
      ListOfArcs = POINTER TO ListOfArcsRec;
      ListOfArcsRec =
	 RECORD
	    (Objects.ObjectRec)
	    (* enclosing rectangle *)
	    x, y: INTEGER;
	    width, height: INTEGER;
	    (* angles in degrees (0-359) scaled by 64;
	       counter-clockwise if positive,
	       clockwise if negative
	    *)
	    angle1, angle2: INTEGER;
	    next: ListOfArcs;
	 END;
   TYPE
      ListOfDashes = POINTER TO ListOfDashesRec;
      ListOfDashesRec =
	 RECORD
	    (Objects.ObjectRec)
	    len: INTEGER;
	    next: ListOfDashes;
	 END;
   CONST
      (* kinds of ListOfTextItems *)
      textItem = 0;
      fontItem = 1;
   TYPE
      ListOfTextItems = POINTER TO ListOfTextItemsRec;
      ListOfTextItemsRec =
	 RECORD
	    (Objects.ObjectRec)
	    next: ListOfTextItems;
	    kind: SHORTINT; (* textItem or fontItem *)
	    (* kind = textItem *)
	    text: ARRAY 254 OF CHAR;
	    delta: INTEGER;
	    (* kind = fontItem *)
	    font: FontID;
	 END;
   CONST
      maxkeysyms = specialKeys;
   TYPE
      KeyboardMapping = POINTER TO KeyboardMappingRec;
      KeyboardMappingRec =
	 RECORD
	    (Objects.ObjectRec)
	    keycode: Keycode;
	    keysyms: ARRAY maxkeysyms OF Keysym;
	    next: KeyboardMapping;
	 END;

   CONST
      replaceProperty = 0;
      prependProperty = 1;
      appendProperty = 2;
      propertyChangeModes = 3;
   TYPE
      PropertyChangeMode = SHORTINT; (* replaceProperty ... *)
      Data = POINTER TO DataRec;
      DataRec =
	 RECORD
	    (Objects.ObjectRec)
	    type: AtomID;
	    format: INTEGER; (* 0, 8, 16, 32 *)
	    len: Streams.Count;
	    data: Streams.Stream;
	 END;
      Property = POINTER TO PropertyRec;
      PropertyRec =
	 RECORD
	    (DataRec)
	    name: AtomID;
	 END;

   PROCEDURE Open(VAR display: Display;
                  address: ARRAY OF CHAR;
		  errors: RelatedEvents.Object) : BOOLEAN;
   PROCEDURE Flush(display: Display) : BOOLEAN;
   PROCEDURE Close(display: Display);

   PROCEDURE GetNumberOfScreens(display: Display) : INTEGER;
   PROCEDURE SetScreen(display: Display; screenNumber: INTEGER);
   PROCEDURE GetScreenNumber(display: Display) : INTEGER;

   PROCEDURE GetVendor(display: Display;
                       VAR vendor: ARRAY OF CHAR);
   PROCEDURE GetProtocolVersion(display: Display;
                                VAR major, minor: INTEGER);
   PROCEDURE GetRootWindow(display: Display) : WindowID;
   PROCEDURE GetWidth(display: Display) : INTEGER;
   PROCEDURE GetHeight(display: Display) : INTEGER;
   PROCEDURE GetWhitePixel(display: Display) : PixmapID;
   PROCEDURE GetBlackPixel(display: Display) : PixmapID;
   PROCEDURE GetDefaultColormap(display: Display) : ColormapID;
   PROCEDURE GetMinKeyCode(display: Display) : Keycode;
   PROCEDURE GetMaxKeyCode(display: Display) : Keycode;
   PROCEDURE GetEventType(display: Display;
                          type: INTEGER;
			  VAR eventType: Events.EventType);
   PROCEDURE GetResourceIDRange(display: Display;
                                VAR resourceIDbase: ResourceID;
				VAR resourceIDmask: ResourceID);

   (* === X11 Protocol Requests ========================================== *)

   PROCEDURE AllocColor(display: Display;
                        cmap: ColormapID;
			desiredColor: RGBColor;
			VAR pixel: Pixel;
			VAR actualColor: RGBColor) : BOOLEAN;

   PROCEDURE ChangeGC(display: Display;
                      gc: GContextID;
		      gcats: GraphicalContextAttributes) : BOOLEAN;

   PROCEDURE ChangeProperty(display: Display;
                            window: WindowID;
			    property: Property;
			    mode: PropertyChangeMode) : BOOLEAN;

   PROCEDURE ChangeWindowAttributes(display: Display;
                                    window: WindowID;
				    winats: WindowAttributes) : BOOLEAN;

   PROCEDURE ClearArea(display: Display;
                       win: WindowID;
		       x, y: INTEGER;
		       width, height: INTEGER;
		       exposures: BOOLEAN) : BOOLEAN;

   PROCEDURE CloseFont(display: Display;
                       fid: FontID) : BOOLEAN;

   PROCEDURE ConfigureWindow(display: Display;
                             window: WindowID;
			     ats: ConfigureWindowParameters) : BOOLEAN;

   PROCEDURE CopyGC(display: Display;
                    src, dst: GContextID;
		    mask: GraphicalContextAttributeSet) : BOOLEAN;

   PROCEDURE CreateGC(display: Display;
                      cid: GContextID;
		      drawable: DrawableID;
		      gcats: GraphicalContextAttributes) : BOOLEAN;

   PROCEDURE CreateWindow(display: Display;
                          wid, parent: WindowID;
			  class: INTEGER;
			  depth: INTEGER;
			  visual: VisualID;
			  x, y: INTEGER;
			  width, height: INTEGER;
			  borderWidth: INTEGER;
			  winats: WindowAttributes) : BOOLEAN;

   PROCEDURE FillPoly(display: Display;
                      drawable: DrawableID;
		      gc: GContextID;
		      shape: Shape;
		      coordinateMode: CoordinateMode;
		      points: ListOfPoints) : BOOLEAN;

   PROCEDURE FreeGC(display: Display;
                    gc: GContextID) : BOOLEAN;

   PROCEDURE GetAtomName(display: Display;
                         atom: AtomID;
			 VAR name: ARRAY OF CHAR) : BOOLEAN;

   PROCEDURE GetFontPath(display: Display;
                         VAR path: ListOfStrings) : BOOLEAN;

   PROCEDURE GetGeometry(display: Display;
                         drawable: DrawableID;
			 VAR geometry: Geometry) : BOOLEAN;

   PROCEDURE GetProperty(display: Display;
                         window: WindowID;
			 name: AtomID;
			 type: AtomID;
			 longOffset, longLength: Types.Int32;
			 delete: BOOLEAN;
			 VAR property: Property;
			 VAR bytesAfter: Types.Int32) : BOOLEAN;

   PROCEDURE GetKeyboardMapping(display: Display;
                                firstKeycode: Keycode;
				count: INTEGER;
				VAR keysymsPerKeycode: INTEGER;
				VAR mapping: KeyboardMapping) : BOOLEAN;

   PROCEDURE GetWindowAttributes(display: Display;
                                 window: WindowID;
				 VAR winats: WindowAttributes;
				 VAR extra: ExtraWindowAttributes) : BOOLEAN;

   PROCEDURE InternAtom(display: Display;
                        name: ARRAY OF CHAR;
			onlyIfExists: BOOLEAN;
			VAR atom: AtomID) : BOOLEAN;

   PROCEDURE ListExtensions(display: Display;
                            VAR extensions: ListOfStrings) : BOOLEAN;

   PROCEDURE ListFonts(display: Display;
		       pattern: ARRAY OF CHAR;
		       maxnames: INTEGER;
                       VAR fonts: ListOfStrings) : BOOLEAN;

   PROCEDURE LookupColor(display: Display;
                         cmap: ColormapID;
			 name: ARRAY OF CHAR;
			 VAR exact, visual: RGBColor) : BOOLEAN;

   PROCEDURE MapWindow(display: Display;
                       window: WindowID) : BOOLEAN;

   PROCEDURE OpenFont(display: Display;
                      fid: FontID;
		      name: ARRAY OF CHAR) : BOOLEAN;

   PROCEDURE PolyArc(display: Display;
                     drawable: DrawableID;
		     gc: GContextID;
		     arcs: ListOfArcs) : BOOLEAN;

   PROCEDURE PolyLine(display: Display;
                      drawable: DrawableID;
		      gc: GContextID;
		      coordinateMode: INTEGER;
		      points: ListOfPoints) : BOOLEAN;

   PROCEDURE PolyPoint(display: Display;
                       drawable: DrawableID;
		       gc: GContextID;
		       coordinateMode: INTEGER;
		       points: ListOfPoints) : BOOLEAN;

   PROCEDURE PolyText8(display: Display;
                       drawable: DrawableID;
		       gc: GContextID;
		       x, y: INTEGER;
		       items: ListOfTextItems) : BOOLEAN;

   PROCEDURE QueryFont(display: Display;
                       font: FontableID;
		       VAR fontInfo: FontInfo;
		       VAR charInfos: CharInfo) : BOOLEAN;

   PROCEDURE SetDashes(display: Display;
		       gc: GContextID;
		       dashOffset: INTEGER;
		       dashes: ListOfDashes) : BOOLEAN;

END XDisplays.
