(* Ulm's Oberon Library
   Copyright (C) 1989-2000 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: FragmentedS.od,v 1.1 2000/10/26 20:00:44 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: FragmentedS.od,v $
   Revision 1.1  2000/10/26 20:00:44  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

DEFINITION FragmentedStreams;

   IMPORT Disciplines, Events, Iterators, Streams;

   TYPE
      Stream = POINTER TO StreamRec;
      StreamRec = RECORD (Streams.StreamRec) END;
      Label = POINTER TO LabelRec;
      LabelRec = RECORD (Disciplines.ObjectRec) END;

   CONST
      cannotReadUnfixedObject = 0;
      cannotWriteUnfixedObject = 1;
      invalidPosition = 2;
      errors = 3;
   TYPE
      ErrorCode = SHORTINT;
      ErrorEvent = POINTER TO ErrorEventRec;
      ErrorEventRec =
	 RECORD
	    (Events.EventRec)
	    errorcode: ErrorCode;
	 END;
   VAR
      errormsg: ARRAY errors OF Events.Message;
      error: Events.EventType;

   PROCEDURE Create(VAR s: Stream);
   PROCEDURE Open(VAR s: Stream; base: Streams.Stream);

   PROCEDURE CreateLabel(VAR label: Label);
   PROCEDURE AttachLabel(s: Stream; label: Label);
   PROCEDURE Attached(label: Label) : BOOLEAN;
   PROCEDURE IncludeObject(s: Stream; object: Disciplines.Object;
			   minsize, maxsize: Streams.Count);
   PROCEDURE Distance(label1, label2: Label;
		      VAR mindist, maxdist: Streams.Count);
   PROCEDURE Difference(label1, label2: Label;
		        VAR mindiff, maxdiff: Streams.Count);
   PROCEDURE ObjectDistance(object: Disciplines.Object; label: Label;
			    VAR mindist, maxdist: Streams.Count);
   PROCEDURE ObjectDifference(object: Disciplines.Object; label: Label;
			      VAR mindiff, maxdiff: Streams.Count);
   PROCEDURE GetSizeRange(object: Disciplines.Object;
			  VAR minsize, maxsize: Streams.Count);
   PROCEDURE SizeFixed(object: Disciplines.Object) : BOOLEAN;
   PROCEDURE ReduceObjectSizeRange(object: Disciplines.Object;
			           minsize, maxsize: Streams.Count);
   PROCEDURE SetObjectSize(object: Disciplines.Object; size: Streams.Count);
   PROCEDURE FixObject(object: Disciplines.Object);
   PROCEDURE Length(s: Stream; VAR minlen, maxlen: Streams.Count);

   PROCEDURE GetUnfixedObjects(s: Stream; VAR it: Iterators.Iterator);
   PROCEDURE NumberOfUnfixedObjects(s: Stream) : INTEGER;

   PROCEDURE GetObjectsWithUnknownSize(s: Stream; VAR it: Iterators.Iterator);
   PROCEDURE NumberOfObjectsWithUnknownSize(s: Stream) : INTEGER;

END FragmentedStreams.
