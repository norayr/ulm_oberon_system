(* Ulm's Oberon Library
   Copyright (C) 1989-2001 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: SysArgs.om,v 1.2 2004/04/28 09:01:31 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: SysArgs.om,v $
   Revision 1.2  2004/04/28 09:01:31  borchert
   $O- added to Argument and Arguments type

   Revision 1.1  2001/07/27 21:20:12  borchert
   Initial revision

   Revision 1.1  1994/02/23  07:48:53  borchert
   Initial revision

   ----------------------------------------------------------------------------
   AFB 9/89
   ----------------------------------------------------------------------------
*)

MODULE SysArgs;

   (* interface to UNIX command line arguments *)

   CONST
      kb = 1024;
      large = 32 * kb;

   TYPE
      (* $P- $O- don't trace any pointers here *)
      ArgumentA = ARRAY large OF CHAR;
      Argument = POINTER TO ArgumentA;
	 (* arguments may be accessed elementwise only;
	    every argument is 0X-terminated
	 *)
      ArgumentsA = ARRAY large OF Argument;
      Arguments = POINTER TO ArgumentsA;
	 (* elementwise access only;
	    array is NIL-terminated
	 *)
      AuxParameterRec =
	 RECORD
	    type: LONGINT;
	    value: LONGINT;
	 END;
      AuxiliaryParameters = POINTER TO ARRAY large OF AuxParameterRec;
      (* $P= $O= *)

   VAR
      (* command line arguments; must not be modified; argv may be NIL *)
      argc: INTEGER;		(* number of arguments *)
      argv: Arguments;		(* argv[0] .. argv[argc-1] are valid *)

      (* environ parameters; environ may be NIL;
	 `environ' may be modified but not the original environment list
      *)
      envc: INTEGER;		(* number of environment parameters *)
      environ: Arguments;	(* environ[0] .. environ[envc-1] are valid *)

      auxc: INTEGER;            (* number of auxiliary parameters *)
      auxv: AuxiliaryParameters; (* auxv^[0] .. auxv^[auxc-1] are valid *)

BEGIN
   (* argc, argv, and environ are initialized by the run time system *)
   envc := 0;
   IF environ # NIL THEN
      WHILE environ[envc] # NIL DO
	 INC(envc);
      END;
   END;

   auxc := 0;
   IF auxv # NIL THEN
      WHILE auxv[auxc].type # 0 DO
	 INC(auxc);
      END;
   END;
END SysArgs.
