(* Ulm's Oberon Library
   Copyright (C) 1989-1998 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: Architectur.od,v 1.1 2001/03/08 07:42:14 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: Architectur.od,v $
   Revision 1.1  2001/03/08 07:42:14  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

DEFINITION Architectures;

   IMPORT ConstStrings, PersistentDisciplines;

   (* classification of hardware architectures and operating systems *)

   TYPE
      Architecture = POINTER TO ArchitectureRec;
      ArchitectureRec =
	 RECORD
	    (PersistentDisciplines.ObjectRec)
	    (* following fields must not be modified after being
	       initialized after creation -- create new architecture
	       objects instead
	    *)
	    class: ConstStrings.String;
	       (* is always defined and addresses the parties responsible
		  for this hardware architecture
	       *)
	    (* optional components that may be NIL:
	       the less specified they are the more likely it is to
	       be compatible with other architectures
	    *)
	    variant: ConstStrings.String;
	       (* minor variant of the hardware architecture *)
	    vendor: ConstStrings.String;
	       (* hardware vendor *)
	    model: ConstStrings.String;
	       (* set of conventions that specifies the size of the
		  address space and long integers
	       *)
	    os, osrelease: ConstStrings.String;
	       (* defined in case of os dependencies *)
	 END;

   VAR
      system: Architecture; (* architecture of our system / process *)

   PROCEDURE Create(VAR arch: Architecture; class: ARRAY OF CHAR);

   PROCEDURE CreateCopy(VAR arch: Architecture; orig: Architecture);

   PROCEDURE Compatible(arch1, arch2: Architecture;
                        VAR combined: Architecture) : BOOLEAN;
      (* checks whether objects of arch1 and arch2 can be combined
         with each other and, if true, returns the combined architecture
	 in combined
      *)

   PROCEDURE Identical(arch1, arch2: Architecture) : BOOLEAN;

   PROCEDURE GetString(arch: Architecture; VAR string: ConstStrings.String);
      (* return the architecture encoded into one string:

	 ArchString = Hardware [ ";" Model ] [ "-" Software ] .
	 Hardware = Class [ ":" [ Variant ] [ ":" Vendor ] ] .
	 Model = AlphaNum .
	 Software = OS [ ":" Release ] .
	 Class = AlphaNum .
	 Variant = AlphaNum .
	 Vendor = AlphaNum .
	 OS = AlphaNum .
	 Release = AlphaNum .
      *)

   PROCEDURE GetArch(string: ConstStrings.String; VAR arch: Architecture);
      (* reconstruct an architecture object from the given string;
         sets arch to NIL in case of errors
      *)

END Architectures.
