(* Ulm's Oberon Library
   Copyright (C) 1989-1994 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: UnixArgList.om,v 1.3 1995/01/04 17:19:35 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: UnixArgList.om,v $
   Revision 1.3  1995/01/04  17:19:35  borchert
   support of Services added

   Revision 1.2  1994/07/05  13:06:14  borchert
   bug fix: argument lists must be allocated by use of UntaggedStorage

   Revision 1.1  1994/02/23  07:26:27  borchert
   Initial revision

   ----------------------------------------------------------------------------
   AFB 9/89
   ----------------------------------------------------------------------------
*)

MODULE UnixArgLists;

   (* construct SysArgs.Arguments for exec and environments *)

   IMPORT Services, Streams, SYS := SYSTEM, SysArgs, SysTypes,
      Texts, UntaggedStorage;

   TYPE
      Arguments = SysArgs.Arguments;
      List = POINTER TO ListRec;
      ListRec =
	 RECORD
	    text: Streams.Stream;
	    length: Streams.Count;
	    next: List;
	 END;

      Stream = POINTER TO StreamRec;
      StreamRec =
	 RECORD
	    (Streams.StreamRec)
	    head, tail: List; (* list of arguments *)
	    args: LONGINT; (* number of arguments *)
	 END;

   VAR
      listif: Streams.Interface;
      listcaps: Streams.CapabilitySet;
      listtype: Services.Type; (* UnixArgLists.Stream *)

   (* === interface procedures ==================================== *)

   PROCEDURE WriteByte(s: Streams.Stream; byte: BYTE) : BOOLEAN;
   BEGIN
      WITH s: Stream DO
	 INC(s.tail.length);
	 RETURN Streams.WriteByte(s.tail.text, byte)
      END;
   END WriteByte;

   (* === exported procedures ===================================== *)

   PROCEDURE Open(VAR list: Streams.Stream);
      (* opens `list' for the first argument (write-only) *)
      VAR
	 new: Stream;
   BEGIN
      NEW(new);
      Services.Init(new, listtype);
      Streams.Init(new, listif, listcaps, Streams.nobuf);
      NEW(new.head);
      Texts.Open(new.head.text); new.head.next := NIL; new.head.length := 0;
      new.tail := new.head;
      new.args := 1;
      list := new;
   END Open;

   PROCEDURE Next(list: Streams.Stream);
      (* opens `list' for next argument *)
      VAR
	 new: List;
   BEGIN
      NEW(new);
      Texts.Open(new.text); new.next := NIL; new.length := 0;
      WITH list: Stream DO
	 list.tail.next := new;
	 list.tail := new;
	 INC(list.args);
      END;
   END Next;

   PROCEDURE Close(VAR list: Streams.Stream; VAR arglist: Arguments);
      (* call this Close instead of Streams.Close
	 to get the argument list

	 implementation is not portable:
	 integer representation of MC68000 assumed
      *)
      TYPE
	 Address = SysTypes.Address;
      VAR
	 arg: List;
	 index, i: LONGINT;
	 ch: CHAR;

   BEGIN
      WITH list: Stream DO
	 arglist := SYS.VAL(Arguments,
		       UntaggedStorage.New((list.args+1) * SYS.SIZE(Address)));
	 arg := list.head; index := 0;
	 WHILE arg # NIL DO
	    arglist[index] := SYS.VAL(SysArgs.Argument,
				 UntaggedStorage.New(arg.length+1));
	    Streams.SetPos(arg.text, 0);
	    i := 0;
	    WHILE Streams.ReadByte(arg.text, ch) DO
	       arglist[index][i] := ch; INC(i);
	    END;
	    Streams.Release(arg.text);
	    arg := arg.next; INC(index);
	 END;
	 Streams.Release(list);
      END;
   END Close;

BEGIN
   NEW(listif); listif.write := WriteByte;
   listcaps := {Streams.write};
   Services.CreateType(listtype, "UnixArgLists.Stream", "Streams.Stream");
END UnixArgLists.
