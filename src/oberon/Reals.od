(* Ulm's Oberon Library
   Copyright (C) 1989-1994 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: Reals.od,v 1.2 2004/03/09 21:38:11 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: Reals.od,v $
   Revision 1.2  2004/03/09 21:38:11  borchert
   maxlongexp, minlongexp, and maxlongdignum adapted to SPARC architecture

   Revision 1.1  1994/02/23  07:45:35  borchert
   Initial revision

   ----------------------------------------------------------------------------
   AFB 6/89
   ----------------------------------------------------------------------------
*)

DEFINITION Reals;

   CONST
      (* for REAL *)
      maxexp = 309;
      minexp = -323;
      maxdignum = 16;
      (* for LONGREAL *)
      maxlongexp = 309;
      minlongexp = -323;
      maxlongdignum = 16;

   PROCEDURE ExpAndMan(r: LONGREAL; long: BOOLEAN; base: INTEGER;
		       VAR exponent: INTEGER; VAR mantissa: LONGREAL);
      (* get exponent and mantissa from `r':

	 (1.0 >= ABS(mantissa)) & (ABS(mantissa) < base)

	 r = mantissa * base^exponent

	 long should be false if a REAL-value is passed to `r'
	 valid values of base: 2, 8, 10, and 16
      *)

   PROCEDURE Power(base: LONGREAL; exp: INTEGER) : LONGREAL;
      (* efficient calculation of base^exp *)

   PROCEDURE Digits(mantissa: LONGREAL; base: INTEGER;
		    VAR buf: ARRAY OF CHAR;
		    VAR neg: BOOLEAN;
		    force: BOOLEAN; VAR ndigits: INTEGER);
      (* PRE:
	    mantissa holds the post-condition of ExpAndMan;
	    valid values for base are 2, 8, 10, and 16
	    ndigits > 0: maximal number of digits
	 POST:
	    the mantissa is converted into digits 0-9 and A-F (if base = 16);
	    buf consists of ndigits digits and
	    is guaranteed to be 0X-terminated;
	    neg is set to TRUE if mantissa < 0
	    force = FALSE:
	       there are no leading zeroes except on mantissa = 0;
	    force = TRUE
	       ndigits is unchanged
      *)

   PROCEDURE Convert(digits: ARRAY OF CHAR; base: INTEGER; neg: BOOLEAN;
		     VAR mantissa: LONGREAL);
      (* convert normalized `digits' (decimal point after 1st digit)
	 into `mantissa';
	 valid values of base are 2, 8, 10, and 16
      *)

END Reals.
