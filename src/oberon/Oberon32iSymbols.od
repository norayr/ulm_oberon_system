(* PLEASE DO NOT EDIT:
   Generated by instantiate_template on Wed Apr 28 16:24:14 MEST 2004
   from templates/Oberon%%Sym.od
*)

(* Ulm's Oberon Library
   Copyright (C) 1989-1998 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id$
   ----------------------------------------------------------------------------
   $Log$
   ----------------------------------------------------------------------------
*)

DEFINITION Oberon32iSymbols;

   (* various architecture-dependent extensions of data types
      of OberonSymbols
   *)

   IMPORT CompilerObjects, Oberon32i, Oberon8Chars, RelatedEvents, Streams,
      Sym := OberonSymbols;

   CONST
      integerConst = 0;
      realConst = 1;
      setConst = 2;
      charConst = 3;
      booleanConst = 4;
      stringConst = 5;
      nilConst = 6;
      noConst = 7; (* not a constant; carries just type information *)
   TYPE
      ConstantKind = SHORTINT; (* integerConst .. *)
      Attribute = POINTER TO AttributeRec;
      AttributeRec =
	 RECORD
	    (CompilerObjects.AttachmentRec)
	       (* may be attached to OberonSymbols.Attribute *)
	    type: Sym.Type;
	    kind: ConstantKind;
	    intval: Oberon32i.Integer;
	    realval: Oberon32i.Real;
	    setval: Oberon32i.Set;
	    charval: Oberon8Chars.Value;
	    boolval: BOOLEAN;
	    stringval: Streams.Stream;
	 END;

   CONST
      forwardDir = 0;
      backwardDir = 1;
   TYPE
      Direction = SHORTINT;

   TYPE
      FoldBuiltInProc =
	 PROCEDURE (
	       builtinproc: Sym.BuiltInProcedure;
	       module: Sym.Ident;
	       args: Sym.Attribute;
	       VAR result: Attribute;
	       errors: RelatedEvents.Object
	    ) : BOOLEAN;
	 (* return TRUE if result is non-NIL *)

   PROCEDURE InitBuiltInProc(builtinproc: Sym.BuiltInProcedure;
                             fold: FoldBuiltInProc);

   PROCEDURE CreateAttribute(VAR at: Attribute);
   PROCEDURE CreateCopyAttribute(VAR new: Attribute; orig: Attribute);

   PROCEDURE Fold(module: Sym.Ident;
                  at: Sym.Attribute; errors: RelatedEvents.Object);

   PROCEDURE CheckConst(module: Sym.Ident; at: Sym.Attribute;
                        errors: RelatedEvents.Object) : BOOLEAN;

   PROCEDURE GetType(at: Sym.Attribute; VAR type: Sym.Type);
   PROCEDURE RemoveTypeMarks(module: Sym.Ident);

   PROCEDURE ArithmeticType(module: Sym.Ident;
                            type1, type2: Sym.Type;
			    errors: RelatedEvents.Object) : Sym.Type;

   PROCEDURE AdaptType(module: Sym.Ident; type, like: Sym.Type);
      (* copy architecture-specific type information from like
	 to type; this is useful for constants
      *)

   PROCEDURE SetTypeToNIL(module: Sym.Ident; at: Sym.Attribute);

   PROCEDURE CompareConstants(cval1, cval2: Attribute) : BOOLEAN;

   PROCEDURE Align(VAR size: Oberon32i.Size; align: Oberon32i.Size;
		   loc: CompilerObjects.Location;
                   errors: RelatedEvents.Object);
   PROCEDURE Allocate(size, align: Oberon32i.Size;
                      VAR next, offset: Oberon32i.Size; dir: Direction;
		      loc: CompilerObjects.Location;
		      errors: RelatedEvents.Object);
   PROCEDURE GetSize(module: Sym.Ident; type: Sym.Type;
                     errors: RelatedEvents.Object) : Oberon32i.Size;
   PROCEDURE GetAlign(module: Sym.Ident; type: Sym.Type;
                      errors: RelatedEvents.Object) : Oberon32i.Size;
   PROCEDURE PatchSize(module: Sym.Ident; type: Sym.Type; size: Oberon32i.Size);
   PROCEDURE GetOffset(module: Sym.Ident; field: Sym.FieldList) : Oberon32i.Size;
   PROCEDURE PatchOffset(module: Sym.Ident; field: Sym.FieldList;
                         offset: Oberon32i.Size);

END Oberon32iSymbols.
