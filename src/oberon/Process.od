(* Ulm's Oberon Library
   Copyright (C) 1989-1994 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: Process.od,v 1.3 2004/09/10 16:42:38 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: Process.od,v $
   Revision 1.3  2004/09/10 16:42:38  borchert
   id and host added

   Revision 1.2  2004/04/02 17:58:01  borchert
   softTermination and TerminateSoftly added

   Revision 1.1  1994/02/22 20:09:39  borchert
   Initial revision

   ----------------------------------------------------------------------------
   AFB 3/92
   ----------------------------------------------------------------------------
*)

DEFINITION Process;

   IMPORT Events;

   (* user readable name of our process *)
   TYPE
      Name = ARRAY 128 OF CHAR;
   VAR
      name: Name;
      id: Name; (* something that identifies our process on our host *)
      host: Name; (* something that identifies our host, may be "" *)

   (* exit codes *)
   TYPE
      ExitCode = INTEGER;
   VAR
      indicateSuccess: ExitCode;
      indicateFailure: ExitCode;

   (* process events *)
   TYPE
      ExitEvent = POINTER TO ExitEventRec;
      ExitEventRec =
	 RECORD
	    (Events.EventRec)
	    exitcode: ExitCode;
	 END;
   VAR
      softTermination: Events.EventType;
      termination: Events.EventType;
      abort: Events.EventType;

      startOfGarbageCollection, endOfGarbageCollection: Events.EventType;
	 (* these events indicate beginning and end of a garbage collection *)

   TYPE
      ExitProc = PROCEDURE (code: ExitCode);
      AbortProc = PROCEDURE;
      PauseProc = PROCEDURE;
      Interface = POINTER TO InterfaceRec;
      InterfaceRec =
	 RECORD
	    exit: ExitProc;
	    abort: AbortProc;
	    pause: PauseProc;
	 END;

   PROCEDURE SetHandlers(if: Interface);

   PROCEDURE TerminateSoftly;
   PROCEDURE Terminate;
   PROCEDURE Abort;
   PROCEDURE Exit(code: ExitCode);
   PROCEDURE Pause;

END Process.
