(* Ulm's Oberon Library
   Copyright (C) 1989-2005 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: NodeFactori.od,v 1.2 2005/08/30 15:23:24 borchert Exp borchert $
   ----------------------------------------------------------------------------
   $Log: NodeFactori.od,v $
   Revision 1.2  2005/08/30 15:23:24  borchert
   GetFactory added

   Revision 1.1  2004/06/05 14:20:33  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

DEFINITION NodeFactories;

   IMPORT Conditions, Names, Objects, PersistentDisciplines;

   TYPE
      Factory = POINTER TO FactoryRec;
      FactoryRec = RECORD (PersistentDisciplines.ObjectRec) END;

   TYPE
      ConstructNodeProc = PROCEDURE (factory: Factory;
                                     VAR node: Names.Node) : BOOLEAN;
      GetConditionsProc = PROCEDURE (factory: Factory;
                                     VAR conditions: Conditions.ConditionSet);
      Interface = POINTER TO InterfaceRec;
      InterfaceRec =
	 RECORD
	    (Objects.ObjectRec)
	    constructNode: ConstructNodeProc;
	    getConditions: GetConditionsProc;
	 END;

   PROCEDURE Init(factory: Factory; if: Interface);
   PROCEDURE ConstructNode(factory: Factory; VAR node: Names.Node) : BOOLEAN;
   PROCEDURE GetConditions(factory: Factory;
                           VAR conditions: Conditions.ConditionSet);

   PROCEDURE GetFactory(node: Names.Node; VAR factory: Factory) : BOOLEAN;

END NodeFactories.
