(* Ulm's Oberon Library
   Copyright (C) 1989-1996 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: SubStreams.od,v 1.1 1996/12/09 09:43:56 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: SubStreams.od,v $
   Revision 1.1  1996/12/09  09:43:56  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

DEFINITION SubStreams;

   (* streams which represent an interval of another stream *)

   IMPORT Events, RelatedEvents, Services, Streams;

   CONST
      noSeek = 0; (* seek or tell capability is missing *)
      noLength = 1; (* unable to determine length of stream *)
      errors = 2;
   TYPE
      ErrorEvent = POINTER TO ErrorEventRec;
      ErrorCode = SHORTINT;
      ErrorEventRec =
	 RECORD
	    (Events.EventRec)
	    errorcode: ErrorCode;
	 END;
   VAR
      error: Events.EventType;
      errormsg: ARRAY errors OF Events.Message;

   TYPE
      OpenProc = PROCEDURE (VAR s: Streams.Stream;
                            base: Streams.Stream;
			    from, length: Streams.Count;
			    errors: RelatedEvents.Object) : BOOLEAN;

   PROCEDURE Register(type: Services.Type; open: OpenProc);

   PROCEDURE Open(VAR s: Streams.Stream;
                  base: Streams.Stream;
		  from, length: Streams.Count;
		  errors: RelatedEvents.Object) : BOOLEAN;

   PROCEDURE Supported(s: Streams.Stream) : BOOLEAN;
      (* return TRUE if substreams may be created from s *)

   PROCEDURE DirectlySupported(s: Streams.Stream) : BOOLEAN;
      (* return TRUE is substreams for s are directly supported
	 by the implementation of s
      *)

   PROCEDURE Join(VAR s: Streams.Stream; s1, s2: Streams.Stream;
                  errors: RelatedEvents.Object) : BOOLEAN;
      (* return a stream which accesses s1 and s2 in a concatenated way;
	 if s1 and s2 are neighbouring substreams of the same base
	 stream, Join will create a new substream from the base stream --
	 otherwise they will be tied together by Maps
      *)

END SubStreams.
