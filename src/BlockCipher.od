(* Ulm's Oberon Library
   Copyright (C) 1989-1997 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: BlockCipher.od,v 1.1 1997/04/02 11:52:58 borchert Exp borchert $
   ----------------------------------------------------------------------------
   $Log: BlockCipher.od,v $
   Revision 1.1  1997/04/02  11:52:58  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

DEFINITION BlockCiphers; (* Michael Szczuka *)

   (* abstraction for the use of block ciphers *)

   IMPORT Ciphers, PersistentObjects, Streams;

   TYPE 
      Cipher = POINTER TO CipherRec;
      CipherRec = RECORD (Ciphers.CipherRec) END;

   PROCEDURE Init (key: Cipher; if: Ciphers.Interface; 
		   inLength, outLength: INTEGER);
      (* init a block cipher with its special interface and the corresponding
	 input and output block lengths *)

   PROCEDURE GetInLength (key: Cipher) : INTEGER;
      (* returns the input length of a block cipher *)

   PROCEDURE GetOutLength (key: Cipher) : INTEGER;
      (* returns the output length of a block cipher *)

   PROCEDURE EncryptBlock (in: Streams.Stream; key: Cipher; 
			   out: Streams.Stream) : BOOLEAN;
      (* encrypts only a certain number of bytes of stream in; the number 
	 depends on the block cipher key *)

   PROCEDURE DecryptBlock (in: Streams.Stream; key: Cipher; 
			   out: Streams.Stream) : BOOLEAN;
      (* decrypts only a certain number of bytes of stream in; the number 
	 depends on the block cipher key *)

END BlockCiphers.
