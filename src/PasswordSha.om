(* Ulm's Oberon Library
   Copyright (C) 1989-1998 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: PasswordSha.om,v 1.3 2004/05/21 12:15:17 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: PasswordSha.om,v $
   Revision 1.3  2004/05/21 12:15:17  borchert
   switched from Streams.Write to Streams.WriteC as Streams.Write
   requires now a designator and no longer accepts arbitrary expressions

   Revision 1.2  1998/04/07 15:59:46  martin
   password is now represented as a hash value; pots won't supply lids,
   nor even allow to construct fitting ones from their data

   Revision 1.1  1998/04/06  21:17:26  martin
   Initial revision

   ----------------------------------------------------------------------------
   Martin Hasch, 1996
   ----------------------------------------------------------------------------
*)

MODULE PasswordShards;

   IMPORT
      OneWayHashes, PersistentObjects, Random := RandomGenerators,
      Services, Shards, Streams, SubStreams, Texts;

   TYPE
      Pot = POINTER TO PotRec;
      PotRec =
	 RECORD
	    (Shards.PotRec)
	    salt,
	    hashval: OneWayHashes.Value;
	 END;

      Lid = POINTER TO LidRec;
      LidRec =
	 RECORD
	    (Shards.LidRec)
	    hashval: OneWayHashes.Value;
	 END;

   VAR
      hashvalType,
      potType, lidType: Services.Type;
      potInterface: Shards.Interface;

   PROCEDURE Hash(hash: OneWayHashes.Hash;
		  salt, input: OneWayHashes.Value): OneWayHashes.Value;
      VAR
	 ss, is,
	 buffer: Streams.Stream;
	 result: OneWayHashes.Value;
	 ok: BOOLEAN;
   BEGIN
      OneWayHashes.CreateStream(salt, ss);
      OneWayHashes.CreateStream(input, is);
      ok := SubStreams.Join(buffer, ss, is, (*errors=*) ss) &
	 Streams.Seek(buffer, 0, Streams.fromStart);
      ASSERT(ok);
      OneWayHashes.Generate(hash, buffer, result);
      Streams.Release(buffer);
      Streams.Release(is); Streams.Release(ss);
      RETURN result
   END Hash;

   PROCEDURE CreateSalt(VAR salt: OneWayHashes.Value; hash: OneWayHashes.Hash);
      VAR
	 buffer: Streams.Stream;
	 count: LONGINT;
	 ok: BOOLEAN;
   BEGIN
      Texts.Open(buffer);
      count := OneWayHashes.Bitlength(hash) DIV 32;
      IF count > 32 THEN
	 count := 32;
      END;
      WHILE count > 0 DO
	 ok := Streams.WriteC(buffer, Random.Int32Val());
	 ASSERT(ok);
	 DEC(count);
      END; (*WHILE count*)
      Streams.SetPos(buffer, 0);
      OneWayHashes.Generate(hash, buffer, salt);
      Streams.Release(buffer);
   END CreateSalt;

   (* ===== marshalling procedures ===== *)

   PROCEDURE CreatePotObj(VAR obj: PersistentObjects.Object);
      VAR
	 pot: Pot;
   BEGIN
      NEW(pot);
      PersistentObjects.Init(pot, potType);
      Shards.Init(pot, potInterface);
      pot.salt := NIL;
      pot.hashval := NIL;
      obj := pot;
   END CreatePotObj;

   PROCEDURE CreateLidObj(VAR obj: PersistentObjects.Object);
      VAR
	 lid: Lid;
   BEGIN
      NEW(lid);
      PersistentObjects.Init(lid, lidType);
      lid.hashval := NIL;
      obj := lid;
   END CreateLidObj;

   PROCEDURE ReadShard( s: Streams.Stream;
			object: PersistentObjects.Object): BOOLEAN;
   BEGIN
      IF object IS Lid THEN
	 RETURN
	    PersistentObjects.GuardedRead(s, hashvalType, object(Lid).hashval)
      END;
      WITH object: Pot DO
	 RETURN
	    PersistentObjects.GuardedRead(s, hashvalType, object.salt) &
	    PersistentObjects.GuardedRead(s, hashvalType, object.hashval)
      END;
   END ReadShard;

   PROCEDURE WriteShard(s: Streams.Stream;
			object: PersistentObjects.Object): BOOLEAN;
   BEGIN
      IF object IS Lid THEN
	 RETURN PersistentObjects.Write(s, object(Lid).hashval)
      END;
      WITH object: Pot DO
	 RETURN
	    PersistentObjects.Write(s, object.salt) &
	    PersistentObjects.Write(s, object.hashval)
      END;
   END WriteShard;

   (* ===== Shards interface procedures ===== *)

   PROCEDURE Fits(pot: Shards.Pot; lid: Shards.Lid): BOOLEAN;
   BEGIN
      IF ~(lid IS Lid) THEN
	 RETURN FALSE
      END;
      WITH pot: Pot DO
	 RETURN OneWayHashes.Equal( Hash(OneWayHashes.Generator(pot.hashval),
	    pot.salt, lid(Lid).hashval), pot.hashval )
      END;
   END Fits;

   (* ===== exported procedures ===== *)

   PROCEDURE CreatePot(VAR pot: Shards.Pot; password: OneWayHashes.Value);
      VAR
	 mypot: Pot;
	 hash: OneWayHashes.Hash;
	 buffer: Streams.Stream;
   BEGIN
      CreatePotObj(mypot);
      hash := OneWayHashes.Generator(password);
      CreateSalt(mypot.salt, hash);
      mypot.hashval := Hash(hash, mypot.salt, password);
      pot := mypot;
   END CreatePot;

   PROCEDURE CreateLid(VAR lid: Shards.Lid; password: OneWayHashes.Value);
      VAR
	 mylid: Lid;
   BEGIN
      CreateLidObj(mylid);
      mylid.hashval := password;
      lid := mylid;
   END CreateLid;

   (* ===== initialization ===== *)

   PROCEDURE Init;

      PROCEDURE InitPT(name, baseName: ARRAY OF CHAR;
		       createProc: PersistentObjects.CreateProc;
		       VAR type: Services.Type);
	 VAR
	    if: PersistentObjects.Interface;
      BEGIN
	 NEW(if); if.read := ReadShard; if.write := WriteShard;
	 if.create := createProc; if.createAndRead := NIL;
	 PersistentObjects.RegisterType(type, name, baseName, if);
      END InitPT;

   BEGIN
      Services.SeekType("OneWayHashes.Value", hashvalType);
      ASSERT(hashvalType # NIL);
      InitPT("PasswordShards.Pot", "Shards.Pot", CreatePotObj, potType);
      InitPT("PasswordShards.Lid", "Shards.Lid", CreateLidObj, lidType);
      NEW(potInterface);
      potInterface.fits := Fits;
      potInterface.supply := NIL;
   END Init;

BEGIN
   Init;
END PasswordShards.
