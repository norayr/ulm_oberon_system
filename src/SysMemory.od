(* Ulm's Oberon Library
   Copyright (C) 1989-1994 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: SysMemory.od,v 1.1 1994/02/23 07:59:39 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: SysMemory.od,v $
   Revision 1.1  1994/02/23  07:59:39  borchert
   Initial revision

   ----------------------------------------------------------------------------
   AFB 10/92
   ----------------------------------------------------------------------------
*)

DEFINITION SysMemory;

   (* interfaces all mmap(2) related system calls *)

   IMPORT RelatedEvents, SysTypes;

   CONST
      (* prot parameter of Map and Protect *)
      read = { 0 };	     (* page can be read *)
      write = { 1 };	     (* page can be written *)
      exec = { 2 };	     (* page can be executed *)
      none = {};	     (* page cannot be accessed *)

      (* flags parameter of Map *)
      shared = { 0 };	     (* share changes *)
      private = { 1 };	     (* changes are private *)
      typeMask = { 0..3 };   (* allows comparisons against shared or private *)
      fixed = { 4 };	     (* interpret address exactly *)
      

      (* flags parameter of Sync *)
      async = { 0 };	     (* return immediately *)
      invalidate = { 1 };    (* invalidate mappings *)

      (* mode of LockAll *)
      current = 1;           (* lock all current mappings *)
      future = 2;	     (* lock all future mappings *)

   TYPE
      Address = SysTypes.UntracedAddress;

   PROCEDURE GetPageSize() : SysTypes.Size;
      (* return the system page size which is the granularity of many of
	 the memory management calls
      *)

   PROCEDURE Map(address: Address; len: SysTypes.Size;
		 prot: SET; flags: SET;
		 fd: SysTypes.File; off: SysTypes.Offset;
		 VAR mapaddress: Address;
		 VAR errors: RelatedEvents.Object) : BOOLEAN;
      (* map fd: [off, off+len)
	 to the virtual memory at [address, address+len)
      *)

   PROCEDURE Unmap(address: Address; len: SysTypes.Size;
		   errors: RelatedEvents.Object) : BOOLEAN;
      (* remove the mappings in the given range *)

   PROCEDURE Protect(addr: Address; len: SysTypes.Size; prot: SET;
		     VAR errors: RelatedEvents.Object) : BOOLEAN;
      (* change protection of the mappings specified by [addr, addr+len) *)

   PROCEDURE Sync(addr: Address; len: SysTypes.Size;
		  flags: SET;
		  VAR errors: RelatedEvents.Object) : BOOLEAN;
      (* write dirty pages of the given range to their permanent
	 storage locations;
	 invalidate causes all cached copies of the mapped range
	 to be re-obtained upon the next reference
      *)

   PROCEDURE Advise(addr: Address; len: SysTypes.Size;
		    advise: INTEGER;
		    VAR errors: RelatedEvents.Object) : BOOLEAN;

   PROCEDURE Lock(addr: Address; len: SysTypes.Size;
		  VAR errors: RelatedEvents.Object) : BOOLEAN;
      (* lock given memory range into physical memory *)

   PROCEDURE Unlock(addr: Address; len: SysTypes.Size;
		    VAR errors: RelatedEvents.Object) : BOOLEAN;
      (* undoes the effect of Lock for the given memory range *)

   PROCEDURE Lockall(mode: INTEGER;
		     VAR errors: RelatedEvents.Object) : BOOLEAN;

   PROCEDURE UnlockAll(VAR errors: RelatedEvents.Object) : BOOLEAN;

   PROCEDURE InCore(addr: Address; len: SysTypes.Size;
		    VAR vector: Address;
		    VAR errors: RelatedEvents.Object) : BOOLEAN;

END SysMemory.
