(* Ulm's Oberon Library
   Copyright (C) 1989-2001 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: CompilerPra.od,v 1.1 2001/02/19 09:50:16 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: CompilerPra.od,v $
   Revision 1.1  2001/02/19 09:50:16  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

DEFINITION CompilerPragmas;

   (* process compilation pragmas *)

   IMPORT Args, CompilerObjects, Events, PersistentDisciplines,
      Sources := CompilerSources, Streams;

   TYPE
      PragmaContext = POINTER TO PragmaContextRec;
      PragmaContextRec = RECORD (PersistentDisciplines.ObjectRec) END;

   CONST
      (* error events of ProcessArgs: *)
      usageError = 0; (* syntax error in pragma definition *)
      unknownPragma = 1; (* unknown pragma variable *)
      invalidValue = 2; (* invalid pragma value *)
      errors = 3;
   TYPE
      ErrorCode = SHORTINT; (* usageError..invalidValue *)
      ErrorEvent = POINTER TO ErrorEventRec;
      ErrorEventRec =
	 RECORD
	    (Events.EventRec)
	    errorcode: ErrorCode;
	 END;
   VAR
      errormsg: ARRAY errors OF Events.Message;
      error: Events.EventType;

   PROCEDURE DefineArgs(args: Args.Arguments);

   PROCEDURE Create(VAR pcontext: PragmaContext; pragmas: Args.Arguments);

   PROCEDURE ProcessArgs(pcontext: PragmaContext;
			 args: Args.Arguments) : BOOLEAN;

   PROCEDURE ProcessPragmas(pcontext: PragmaContext;
			    loc: CompilerObjects.Location;
			    text: Streams.Stream);

   PROCEDURE LookupPragma(pcontext: PragmaContext;
		          location: CompilerObjects.Location;
			  pname: ARRAY OF CHAR;
			  VAR value: Args.Value);

   PROCEDURE LookupFlag(pcontext: PragmaContext;
			location: CompilerObjects.Location;
			pname: ARRAY OF CHAR) : BOOLEAN;

END CompilerPragmas.
