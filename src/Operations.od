(* Ulm's Oberon Library
   Copyright (C) 1989-1994 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: Operations.od,v 1.2 1994/12/13 12:40:21 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: Operations.od,v $
   Revision 1.2  1994/12/13  12:40:21  borchert
   assertions of Assertions have been converted into real assertions

   Revision 1.1  1994/02/22  20:08:59  borchert
   Initial revision

   ----------------------------------------------------------------------------
   AFB 12/91
   ----------------------------------------------------------------------------
*)

DEFINITION Operations;

   (* generic support of arithmetic operations *)

   IMPORT PersistentDisciplines, Events, Objects;

   CONST
      add = 0; sub = 1; mul = 2; div = 3; cmp = 4;
   TYPE
      Operation = SHORTINT; (* add..cmp *)
      Operand = POINTER TO OperandRec;
      OperandRec = RECORD (PersistentDisciplines.ObjectRec) END;

   TYPE
      CapabilitySet = SET; (* SET OF [add..cmp] *)
      CreateProc = PROCEDURE (VAR op: Operand);
	 (* create op and call Operations.Init for op *)
      OperatorProc = PROCEDURE (op: Operation; op1, op2: Operand;
				VAR result: Operand);
      AssignProc = PROCEDURE (VAR target: Operand; source: Operand);
      CompareProc = PROCEDURE (op1, op2: Operand) : INTEGER;
      Interface = POINTER TO InterfaceRec;
      InterfaceRec =
	 RECORD
	    (Objects.ObjectRec)
	    create: CreateProc;
	    assign: AssignProc;
	    op: OperatorProc;
	    compare: CompareProc;
	 END;

   PROCEDURE Init(op: Operand; if: Interface; caps: CapabilitySet);
   PROCEDURE Capabilities(op: Operand) : CapabilitySet;
   PROCEDURE Compatible(op1, op2: Operand) : BOOLEAN;
      (* return TRUE if both operands have the same interface *)

   (* the interface of the first operand must match the interface
      of all other operands;
      the result parameter must be either NIL or already initialized
      with the same interface
   *)

   PROCEDURE Add(op1, op2: Operand) : Operand;
   PROCEDURE Add2(VAR op1: Operand; op2: Operand);
   PROCEDURE Add3(VAR result: Operand; op1, op2: Operand);

   PROCEDURE Sub(op1, op2: Operand) : Operand;
   PROCEDURE Sub2(VAR op1: Operand; op2: Operand);
   PROCEDURE Sub3(VAR result: Operand; op1, op2: Operand);

   PROCEDURE Mul(op1, op2: Operand) : Operand;
   PROCEDURE Mul2(VAR op1: Operand; op2: Operand);
   PROCEDURE Mul3(VAR result: Operand; op1, op2: Operand);

   PROCEDURE Div(op1, op2: Operand) : Operand;
   PROCEDURE Div2(VAR op1: Operand; op2: Operand);
   PROCEDURE Div3(VAR result: Operand; op1, op2: Operand);

   PROCEDURE Compare(op1, op2: Operand) : INTEGER;

   PROCEDURE Assign(VAR target: Operand; source: Operand);
   PROCEDURE Copy(source, target: Operand);

END Operations.
