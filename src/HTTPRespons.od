DEFINITION HTTPResponse;

   IMPORT
      Streams, Times;

   PROCEDURE StatusLine(s: Streams.Stream; code: INTEGER;
                        versionMajor, versionMinor: SHORTINT);
      (* Writes status-line and reason-phrase to the 's'. *)

   PROCEDURE Allow(s: Streams.Stream; methods: ARRAY OF CHAR);
      (* Writes an "Allow"-header to 's'. 'methods' is a comma separated list of
         methods.
      *)
      
   PROCEDURE CacheControl(s: Streams.Stream; mechanism: SET);
      (* Writes an "Cache-Control"-header to 's'. *)
      
   PROCEDURE Connection(s: Streams.Stream; tokens: ARRAY OF CHAR);
      (* Writes an "Connection"-header to 's'. 'tokens' is a comma separated
         list.
      *)
      
   PROCEDURE ContentBase(s: Streams.Stream; baseURL: ARRAY OF CHAR);
      (* Writes an "Content-Base"-header to 's'. *)
      
   PROCEDURE ContentEncoding(s: Streams.Stream; encoding: ARRAY OF CHAR);
      (* Writes a "Content-Encoding"-header to 's'. *)
      
   PROCEDURE ContentLanguage(s: Streams.Stream; languages: ARRAY OF CHAR);
      (* Writes a "Content-Language"-header to 's'. 'languages' is a list
         separated by commas.
      *)
      
   PROCEDURE ContentLength(s: Streams.Stream; length: LONGINT);
      (* Writes a "Content-Length"-header to 's'. *)
      
   PROCEDURE ContentLocation(s: Streams.Stream; location: ARRAY OF CHAR);
      (* Writes a "Content-Length"-header to 's'. *)
      
   PROCEDURE ContentType(s: Streams.Stream; type, subType, params: ARRAY OF CHAR);
      (* Writes a "Content-Type"-header to 's'. More than one parameters
         must separated by semicolons.
      *)
      
   PROCEDURE Date(s: Streams.Stream; date: Times.Time);
      (* Writes a "Date"-header to 's'.*)
      
   PROCEDURE ActualDate(s: Streams.Stream);
      (* Writes a "Date"-header to 's'. Actual Date is used *)
   
   PROCEDURE EntityTag(s: Streams.Stream; eTag: ARRAY OF CHAR; weak: BOOLEAN);
      (* Writes a "ETag"-header to 's'. *)
      
   PROCEDURE Expires(s: Streams.Stream; date: Times.Time);
      (* Writes a "Expires"-header to 's'.*)
      
   PROCEDURE LastModified(s: Streams.Stream; date: Times.Time);
      (* Writes a "LastModified"-header to 's'.*)
      
   PROCEDURE Location(s: Streams.Stream; url: ARRAY OF CHAR);
      (* Writes an "Location"-header to 's'. *)
      
   PROCEDURE Pragma(s: Streams.Stream; directives: ARRAY OF CHAR);
      (* Writes an "Pragma"-header to 's'. 'directive' is a list separated by
         commas.
      *)

   PROCEDURE Public(s: Streams.Stream; methods: ARRAY OF CHAR);
      (* Writes an "Public"-header to 's'. 'methods' is a comma separated list of
         methods.
      *)
      
   PROCEDURE RetryAfter(s: Streams.Stream; isDelta: BOOLEAN; delta: LONGINT;
                        date: Times.Time);
      (* Writes a "Retry-After"-header to 's'. if 'isDelta' is TRUE, a delta
         will be given in 'delta', otherwise 'date' is written to 's'.
      *)
      
   PROCEDURE Server(s: Streams.Stream; info: ARRAY OF CHAR);
      (* Writes an "Server"-header to 's'. 'info' is a space separated list of
         products and comments.
      *)
      
   PROCEDURE TransferEncoding(s: Streams.Stream; encoding: ARRAY OF CHAR);
      (* Writes an "Transfer-Encoding"-header to 's'. 'encoding' is a comma
         separated list of applied encodings.
      *)
      
   PROCEDURE Upgrade(s: Streams.Stream; products: ARRAY OF CHAR);
      (* Writes an "Upgrade"-header to 's'. 'products' is a comma
         separated list of possible upgrades.
      *)
      
   PROCEDURE Vary(s: Streams.Stream; fieldNames: ARRAY OF CHAR);
      (* Writes an "Vary"-header to 's'. 'fieldNames' is a comma
         separated list header-field-names.
      *)
      
   PROCEDURE WWWAuthenticate(s: Streams.Stream;
                             scheme, realm, param: ARRAY OF CHAR);
      (* Writes a "WWW-Authenticate"-header to 's'; Creates the Challenge.
         More than one parameters must separated by commas.
      *)
      
   PROCEDURE Error(s: Streams.Stream; code: INTEGER; reason: ARRAY OF CHAR);
      (* Sends an error-message to s. The text of the  message will be
         determined by the given 'code'-value. 'reason' specifies the problem.
         The mediatype of the message is text/html.
      *)
            
END HTTPResponse.
