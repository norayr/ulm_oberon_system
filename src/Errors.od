(* Ulm's Oberon Library
   Copyright (C) 1989-1994 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: Errors.od,v 1.1 1994/02/22 20:07:10 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: Errors.od,v $
   Revision 1.1  1994/02/22  20:07:10  borchert
   Initial revision

   ----------------------------------------------------------------------------
   AFB 11/91
   ----------------------------------------------------------------------------
*)

DEFINITION Errors;

   (* translate events to errors *)

   IMPORT Disciplines, Events, Objects, RelatedEvents, Streams;

   CONST
      (* Kind = (debug, message, warning, error, fatal, bug) *)
      debug = 0;
      message = 1;
      warning = 2;
      error = 3;
      fatal = 4;
      bug = 5;
      nkinds = 6;
   TYPE
      Kind = SHORTINT; (* debug..bug *)
   VAR
      kindText: ARRAY nkinds OF ARRAY 12 OF CHAR;

   TYPE
      Handler = PROCEDURE (event: Events.Event; kind: Kind);
      HandlerSet = POINTER TO HandlerSetRec;
      HandlerSetRec =
	 RECORD
	    (Disciplines.ObjectRec)
	 END;
      WriteProcedure = PROCEDURE (s: Streams.Stream; event: Events.Event);
   VAR
      null: HandlerSet; (* empty handler set *)

   PROCEDURE CreateHandlerSet(VAR hs: HandlerSet);

   PROCEDURE InstallHandler(hs: HandlerSet; kind: Kind; handler: Handler);

   PROCEDURE AssignWriteProcedure(eventType: Events.EventType;
				  write: WriteProcedure);

   PROCEDURE Write(s: Streams.Stream; event: Events.Event);

   PROCEDURE CatchEvent(hs: HandlerSet; kind: Kind; type: Events.EventType);

END Errors.
