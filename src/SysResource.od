(* Ulm's Oberon Library
   Copyright (C) 1989-1994 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: SysResource.od,v 1.1 1994/02/23 08:00:00 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: SysResource.od,v $
   Revision 1.1  1994/02/23  08:00:00  borchert
   Initial revision

   ----------------------------------------------------------------------------
   AFB 11/91
   ----------------------------------------------------------------------------
*)

DEFINITION SysResources;

   (* control maximum system resource consumption *)

   IMPORT RelatedEvents;

   CONST
      (* type of resource (constants taken from <sys/resource.h>) *)
      cpu = 0;     (* maximum amount of cpu time *)
      fsize = 1;   (* largest size of a single file that may be created*)
      data = 2;	   (* maximum size of the data segment *)
      stack = 3;   (* maximum size of the stack segment *)
      core = 4;    (* maximal core file size *)
      nofile = 7;  (* maximal number of open file descriptors *)
      vmem = 9;    (* maximum mapped memory *)

      nlimits = 10;
   TYPE
      Resource = INTEGER; (* cpu..nofile *)

   TYPE
      Limit =
	 RECORD
	    current: INTEGER; (* current soft limit *)
	    max: INTEGER;     (* hard limit *)
	 END;
   CONST
      infinity = MAX(INTEGER);

   PROCEDURE GetLimit(resource: Resource; VAR limit: Limit);

   PROCEDURE SetLimit(resource: Resource; limit: Limit;
		      errors: RelatedEvents.Object) : BOOLEAN;

END SysResources.
