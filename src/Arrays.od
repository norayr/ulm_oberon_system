(* Ulm's Oberon Library
   Copyright (C) 1989-2004 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: Arrays.od,v 1.1 2004/03/19 09:15:18 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: Arrays.od,v $
   Revision 1.1  2004/03/19 09:15:18  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

DEFINITION Arrays;

   IMPORT Iterators, Keys, Objects, Services;

   CONST
      ascending = 0;  (* in ascending order *)
      descending = 1; (* in descending order *)
   
   TYPE
      Order = Iterators.Mode;    (* ascending, descending *)

   TYPE
      Array = POINTER TO ArrayRec;
      ArrayRec = RECORD (Services.ObjectRec) END;

   PROCEDURE Create(VAR array: Array; key: Keys.Key);
   PROCEDURE GetKey(array: Array; VAR key: Keys.Key);
   PROCEDURE Set(array: Array; keyval: Keys.Value; object: Objects.Object);
   PROCEDURE Get(array: Array; keyval: Keys.Value;
                 VAR object: Objects.Object) : BOOLEAN;
   PROCEDURE Remove(array: Array; keyval: Keys.Value);
   PROCEDURE Exists(array: Array; keyval: Keys.Value) : BOOLEAN;
   PROCEDURE Card(array: Array) : INTEGER;
   PROCEDURE GetKeys(array: Array; order: Order;
   	 	     from, to: Keys.Value; VAR it: Iterators.Iterator);
   PROCEDURE GetEntries(array: Array; order: Order;
   	 	        from, to: Keys.Value; VAR it: Iterators.Iterator);

END Arrays.
