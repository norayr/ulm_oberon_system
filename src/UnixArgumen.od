(* Ulm's Oberon Library
   Copyright (C) 1989-1994 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: UnixArgumen.od,v 1.1 1994/02/23 07:26:35 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: UnixArgumen.od,v $
   Revision 1.1  1994/02/23  07:26:35  borchert
   Initial revision

   ----------------------------------------------------------------------------
   (* Oberon Library - UNIX System V - MH,AFB 9/89 *)
   ----------------------------------------------------------------------------
*)

DEFINITION UnixArguments;

   (* This module reads options and other arguments from the command
      line. An argument "-" or "--" stops option reading. "-", how-
      ever, will be delivered as argument then, whereas "--" will not.
   *)

   IMPORT Streams;

   TYPE
      Argument = POINTER TO ArgumentRec;
      ArgumentRec =
	 RECORD
	    (Streams.StreamRec)
	 END;

   VAR
      usagecode: INTEGER;	(* exit code of Usage *)

   PROCEDURE Init(infostring: ARRAY OF CHAR);
      (* specifies infostring and (re)starts the reading cyclus *)

   PROCEDURE Usage;
      (* prints 'Usage: command infostring' on stderr and aborts
	 program execution. FetchString, FetchCard and FetchInt call
	 this procedure automatically in case of errors.
      *)

   PROCEDURE GetFlag(VAR flag: CHAR) : BOOLEAN;
      (* tries to read one flag, i.e. a character within a string containing
	 a leading '-',from the argument list and returns TRUE if successful.
      *)

   PROCEDURE GetOpt(VAR flag: CHAR; VAR plus: BOOLEAN) : BOOLEAN;
      (* reads one character within a string starting in '+' or '-'. *)

   PROCEDURE Fetch(VAR arg: Streams.Stream);
      (* opens `arg' to read data from the argument list;
	 `arg' is closed automatically
      *)

   PROCEDURE FetchString(VAR string: ARRAY OF CHAR);
      (* store data from argument list into `string' *)

   PROCEDURE GetArg(VAR string: ARRAY OF CHAR) : BOOLEAN;
      (* reads one argument or returns FALSE if all are read. *)

   PROCEDURE OpenArg(VAR arg: Streams.Stream) : BOOLEAN;
      (* opens `arg' to read one argument;
	 `arg' is closed automatically
	 return FALSE if all are read
      *)

   PROCEDURE UngetArg;
      (* pushes the argument that has been read just before
	 back to the argument list.
      *)

   PROCEDURE UngetOpt;
      (* pushes the flag or option that has been read just before
	 back to the argument list.
      *)

   PROCEDURE AllArgs;
      (* calls `Usage' if any arguments are not yet read. *)

   PROCEDURE GetCommandName(VAR name: ARRAY OF CHAR);
      (* return basename of the first argument *)

   PROCEDURE GetPathName(VAR path: ARRAY OF CHAR);
      (* return the first argument *)

END UnixArguments.
