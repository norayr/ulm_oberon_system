(* PLEASE DO NOT EDIT:
   Generated by instantiate_template on Wed Apr 28 16:24:14 MEST 2004
   from templates/Oberon%%Upd.om
*)

(* Ulm's Oberon Library
   Copyright (C) 1989-1998 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id$
   ----------------------------------------------------------------------------
   $Log$
   ----------------------------------------------------------------------------
*)

MODULE Oberon32iUpdates;

   IMPORT CompilerErrors, CompilerObjects, ConstStrings, Iterators, Oberon32i,
      OberonErrors, OberonTypes, RelatedEvents, Scopes, Streams,
      Sym := OberonSymbols, Sym32i := Oberon32iSymbols, Write;

   PROCEDURE CheckForUpdates(public, private: Sym.Ident;
                             updatesPermitted: BOOLEAN;
			     VAR updated: BOOLEAN;
			     errors: RelatedEvents.Object);
      VAR
	 it: Iterators.Iterator;
	 defident, modident: Sym.Ident;
	 deftype, modtype: Sym.Type;
	 abort: BOOLEAN; (* abort on first error *)
	 ok: BOOLEAN;

      PROCEDURE CheckType(deftype, modtype: Sym.Type);
	 VAR
	    defsize, modsize: Oberon32i.Size;
	    es: Streams.Stream;

	 PROCEDURE CheckFields(defscope, modscope: Scopes.Scope);
	    VAR
	       it: Iterators.Iterator;
	       deffield, modfield: Sym.FieldList;
	       ok: BOOLEAN;
	       defoffset, modoffset: Oberon32i.Size;
	       es: Streams.Stream;
	 BEGIN
	    Scopes.GetIterator(defscope, it);
	    WHILE ~abort & Iterators.Get(it, deffield) DO
	       ok := Scopes.Lookup(modscope, deffield.name, modfield);
	       ASSERT(ok);
	       defoffset := Sym32i.GetOffset(public, deffield);
	       modoffset := Sym32i.GetOffset(private, modfield);
	       IF defoffset # modoffset THEN
		  IF updatesPermitted THEN
		     Sym32i.PatchOffset(public, deffield, modoffset);
		     updated := TRUE;
		  ELSE
		     CompilerErrors.Open(es);
		     CompilerErrors.At1(es, modfield.loc);
		     CompilerErrors.Ref(es, deffield.loc);
		     Write.StringS(es, "required update is prohibited");
		     CompilerErrors.Close(es, errors);
		     abort := TRUE; RETURN
		  END;
	       END;
	       CheckType(deffield.type, modfield.type);
	    END;
	 END CheckFields;

      BEGIN (* CheckType *)
	 IF abort THEN RETURN END;
	 IF (deftype = NIL) & (modtype = NIL) THEN RETURN END;
	 ASSERT((deftype # NIL) & (modtype # NIL));
	 IF (deftype.ident # NIL) & (deftype.ident.module # NIL) &
	       (ConstStrings.Compare(deftype.ident.module.name,
	                             public.name) # 0) THEN
	    (* we left our module *)
	    RETURN
	 END;
	 defsize := Sym32i.GetSize(public, deftype, errors);
	 modsize := Sym32i.GetSize(public, modtype, errors);
	 IF defsize # modsize THEN
	    IF updatesPermitted THEN
	       Sym32i.PatchSize(public, deftype, modsize);
	       updated := TRUE;
	    ELSE
	       CompilerErrors.Open(es);
	       CompilerErrors.At1(es, modtype.loc);
	       CompilerErrors.Ref(es, deftype.loc);
	       Write.StringS(es, "required update is prohibited");
	       CompilerErrors.Close(es, errors);
	       abort := TRUE; RETURN
	    END;
	 END;
	 ASSERT(deftype.form = modtype.form);
	 CASE deftype.form OF
	 | Sym.array:   CheckType(deftype.element, modtype.element);
	 | Sym.record:  CheckType(deftype.basetype, modtype.basetype);
	                CheckFields(deftype.publicfieldscope,
			            modtype.publicfieldscope);
	 | Sym.pointer: IF deftype.reftype.ident = NIL THEN
			   (* avoid endless recursion for self-referential
			      data types
			   *)
			   CheckType(deftype.reftype, modtype.reftype);
			END;
	 ELSE
	 END;
      END CheckType;

      PROCEDURE CheckConst(const1, const2: Sym.Attribute);
	 VAR
	    cdisc1, cdisc2: Sym32i.Attribute;
	    type1, type2: Sym.Type;
	    es: Streams.Stream;

	 PROCEDURE OpenError;
	 BEGIN
	    CompilerErrors.Open(es);
	    CompilerErrors.At1(es, const2.loc); (* that of the module *)
	    CompilerErrors.Ref(es, const1.loc); (* that of the if *)
	 END OpenError;

      BEGIN (* CheckConst *)
	 CompilerObjects.GetAttachment(const1, cdisc1);
	 CompilerObjects.GetAttachment(const2, cdisc2);
	 ASSERT((cdisc1 # NIL) & (cdisc2 # NIL));
	 IF ~Sym32i.CompareConstants(cdisc1, cdisc2) THEN
	    OpenError;
	    Write.StringS(es, "constant value differs from that of export declaration");
	    CompilerErrors.Close(es, errors);
	    RETURN
	 END;
	 IF OberonTypes.IsChar(const1) & OberonTypes.IsChar(const2) OR
	       OberonTypes.IsString(const1) & OberonTypes.IsString(const2) THEN
	    RETURN
	 END;
	 Sym32i.GetType(const1, type1);
	 Sym32i.GetType(const2, type2);
	 IF ~OberonTypes.Identical(type1, type2) THEN
	    OpenError;
	    Write.StringS(es, "constant type differs from that of export declaration");
	    CompilerErrors.Close(es, errors);
	    IF (type1.ident # NIL) & (type2.ident # NIL) THEN
	       OpenError;
	       OberonErrors.WriteString(es, type1.ident.name);
	       Write.StringS(es, " vs ");
	       OberonErrors.WriteString(es, type2.ident.name);
	       CompilerErrors.Close(es, errors);
	    END;
	 END;
      END CheckConst;

   BEGIN (* CheckForUpdates *)
      abort := FALSE;
      Scopes.GetIterator(public.export, it);
      WHILE ~abort & Iterators.Get(it, defident) DO
	 ok := Scopes.Lookup(private.scope, defident.name, modident);
	 ASSERT(ok);
	 IF defident.class = Sym.constC THEN
	    ASSERT(modident.class = Sym.constC);
	    IF ~OberonTypes.IsChar(defident.constexpr) OR
		  ~OberonTypes.IsChar(modident.constexpr) THEN
	       Sym32i.GetType(defident.constexpr, deftype);
	       Sym32i.GetType(modident.constexpr, modtype);
	       CheckType(deftype, modtype);
	    END;
	 ELSE
	    CheckType(defident.type, modident.type);
	 END;
      END;
      IF abort THEN RETURN END;

      Scopes.GetIterator(public.export, it);
      WHILE ~abort & Iterators.Get(it, defident) DO
	 ok := Scopes.Lookup(private.scope, defident.name, modident);
	 ASSERT(ok);
	 IF defident.class = Sym.constC THEN
	    ASSERT(modident.class = Sym.constC);
	    CheckConst(defident.constexpr, modident.constexpr);
	 END;
      END;
   END CheckForUpdates;

END Oberon32iUpdates.
