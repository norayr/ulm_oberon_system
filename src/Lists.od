(* Ulm's Oberon Library
   Copyright (C) 1989-1994 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: Lists.od,v 1.2 1994/08/13 19:11:17 martin Exp $
   ----------------------------------------------------------------------------
   $Log: Lists.od,v $
   Revision 1.2  1994/08/13  19:11:17  martin
   Delete procedure added.

   Revision 1.1  1994/02/22  20:07:58  borchert
   Initial revision

   ----------------------------------------------------------------------------
   AFB 9/89
   ----------------------------------------------------------------------------
*)

DEFINITION Lists;

   IMPORT Objects;

   TYPE
      List = POINTER TO ListRec;
      ListRec =
	 RECORD
	    (Objects.ObjectRec)
	 END;
      Element = POINTER TO ElementRec;
      ElementRec =
	 RECORD
	    (Objects.ObjectRec)
	 END;
      CompareProc = PROCEDURE (e1: Element; e2: Element) : INTEGER;
	 (* returns < 0 if left parameter < right parameter
		    = 0 if left parameter = right parameter
		    > 0 if left parameter > right parameter
	 *)

   PROCEDURE CreateList(VAR list: List);

   PROCEDURE CreateSortedList(VAR list: List; compare: CompareProc);

   PROCEDURE Add(list: List; element: Element);

   PROCEDURE Insert(list: List; element: Element);

   PROCEDURE Delete(list: List; element: Element);

   PROCEDURE First(list: List);

   PROCEDURE Next(list: List; VAR element: Element) : BOOLEAN;

   PROCEDURE Last(list: List);

   PROCEDURE Previous(list: List; VAR element: Element) : BOOLEAN;

END Lists.
