(* Ulm's Oberon Library
   Copyright (C) 1989-1994 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: NetIO.od,v 1.2 1995/03/16 16:44:49 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: NetIO.od,v $
   Revision 1.2  1995/03/16  16:44:49  borchert
   - SizeOf-support removed because it has been removed from
     PersistentObjects
   - support of const strings added

   Revision 1.1  1994/02/22  20:08:39  borchert
   Initial revision

   ----------------------------------------------------------------------------
   AFB 6/93
   ----------------------------------------------------------------------------
*)

DEFINITION NetIO;

   (* abstraction for the exchange of Oberon base types which
      are components of persistent data structures
   *)

   IMPORT ConstStrings, Streams, Types;

   TYPE
      Byte = Types.Byte;

   TYPE
      ReadByteProc =
	 PROCEDURE (s: Streams.Stream; VAR byte: Byte) : BOOLEAN;
      ReadCharProc =
	 PROCEDURE (s: Streams.Stream; VAR char: CHAR) : BOOLEAN;
      ReadBooleanProc =
	 PROCEDURE (s: Streams.Stream; VAR boolean: BOOLEAN) : BOOLEAN;
      ReadShortIntProc =
	 PROCEDURE (s: Streams.Stream; VAR shortint: SHORTINT) : BOOLEAN;
      ReadIntegerProc =
	 PROCEDURE (s: Streams.Stream; VAR integer: INTEGER) : BOOLEAN;
      ReadLongIntProc =
	 PROCEDURE (s: Streams.Stream; VAR longint: LONGINT) : BOOLEAN;
      ReadRealProc =
	 PROCEDURE (s: Streams.Stream; VAR real: REAL) : BOOLEAN;
      ReadLongRealProc =
	 PROCEDURE (s: Streams.Stream; VAR longreal: LONGREAL) : BOOLEAN;
      ReadSetProc =
	 PROCEDURE (s: Streams.Stream; VAR set: SET) : BOOLEAN;
      ReadStringProc =
	 PROCEDURE (s: Streams.Stream; VAR string: ARRAY OF CHAR) : BOOLEAN;
      ReadConstStringProc =
	 PROCEDURE (s: Streams.Stream; domain: ConstStrings.Domain;
		    VAR string: ConstStrings.String) : BOOLEAN;

      WriteByteProc =
	 PROCEDURE (s: Streams.Stream; byte: Byte) : BOOLEAN;
      WriteCharProc =
	 PROCEDURE (s: Streams.Stream; char: CHAR) : BOOLEAN;
      WriteBooleanProc =
	 PROCEDURE (s: Streams.Stream; boolean: BOOLEAN) : BOOLEAN;
      WriteShortIntProc =
	 PROCEDURE (s: Streams.Stream; shortint: SHORTINT) : BOOLEAN;
      WriteIntegerProc =
	 PROCEDURE (s: Streams.Stream; integer: INTEGER) : BOOLEAN;
      WriteLongIntProc =
	 PROCEDURE (s: Streams.Stream; longint: LONGINT) : BOOLEAN;
      WriteRealProc =
	 PROCEDURE (s: Streams.Stream; real: REAL) : BOOLEAN;
      WriteLongRealProc =
	 PROCEDURE (s: Streams.Stream; longreal: LONGREAL) : BOOLEAN;
      WriteSetProc =
	 PROCEDURE (s: Streams.Stream; set: SET) : BOOLEAN;
      WriteStringProc =
	 PROCEDURE (s: Streams.Stream; string: ARRAY OF CHAR) : BOOLEAN;
      WriteConstStringProc =
	 PROCEDURE (s: Streams.Stream;
		    string: ConstStrings.String) : BOOLEAN;

      Interface = POINTER TO InterfaceRec;
      InterfaceRec =
	 RECORD
	    readByte: ReadByteProc;
	    readChar: ReadCharProc;
	    readBoolean: ReadBooleanProc;
	    readShortInt: ReadShortIntProc;
	    readInteger: ReadIntegerProc;
	    readLongInt: ReadLongIntProc;
	    readReal: ReadRealProc;
	    readLongReal: ReadLongRealProc;
	    readSet: ReadSetProc;
	    readString: ReadStringProc;
	    readConstString: ReadConstStringProc;

	    writeByte: WriteByteProc;
	    writeChar: WriteCharProc;
	    writeBoolean: WriteBooleanProc;
	    writeShortInt: WriteShortIntProc;
	    writeInteger: WriteIntegerProc;
	    writeLongInt: WriteLongIntProc;
	    writeReal: WriteRealProc;
	    writeLongReal: WriteLongRealProc;
	    writeSet: WriteSetProc;
	    writeString: WriteStringProc;
	    writeConstString: WriteConstStringProc;
	 END;

   PROCEDURE AttachInterface(s: Streams.Stream; if: Interface);
   PROCEDURE CopyInterface(from, to: Streams.Stream);

   PROCEDURE ReadByte(s: Streams.Stream; VAR byte: Byte) : BOOLEAN;
   PROCEDURE ReadChar(s: Streams.Stream; VAR char: CHAR) : BOOLEAN;
   PROCEDURE ReadBoolean(s: Streams.Stream; VAR boolean: BOOLEAN) : BOOLEAN;
   PROCEDURE ReadShortInt(s: Streams.Stream; VAR shortint: SHORTINT) : BOOLEAN;
   PROCEDURE ReadInteger(s: Streams.Stream; VAR integer: INTEGER) : BOOLEAN;
   PROCEDURE ReadLongInt(s: Streams.Stream; VAR longint: LONGINT) : BOOLEAN;
   PROCEDURE ReadReal(s: Streams.Stream; VAR real: REAL) : BOOLEAN;
   PROCEDURE ReadLongReal(s: Streams.Stream; VAR longreal: LONGREAL) : BOOLEAN;
   PROCEDURE ReadSet(s: Streams.Stream; VAR set: SET) : BOOLEAN;
   PROCEDURE ReadString(s: Streams.Stream; VAR string: ARRAY OF CHAR) : BOOLEAN;
   PROCEDURE ReadConstString(s: Streams.Stream;
			     VAR string: ConstStrings.String) : BOOLEAN;
   PROCEDURE ReadConstStringD(s: Streams.Stream;
			      domain: ConstStrings.Domain;
			      VAR string: ConstStrings.String) : BOOLEAN;

   PROCEDURE WriteByte(s: Streams.Stream; byte: Byte) : BOOLEAN;
   PROCEDURE WriteChar(s: Streams.Stream; char: CHAR) : BOOLEAN;
   PROCEDURE WriteBoolean(s: Streams.Stream; boolean: BOOLEAN) : BOOLEAN;
   PROCEDURE WriteShortInt(s: Streams.Stream; shortint: SHORTINT) : BOOLEAN;
   PROCEDURE WriteInteger(s: Streams.Stream; integer: INTEGER) : BOOLEAN;
   PROCEDURE WriteLongInt(s: Streams.Stream; longint: LONGINT) : BOOLEAN;
   PROCEDURE WriteReal(s: Streams.Stream; real: REAL) : BOOLEAN;
   PROCEDURE WriteLongReal(s: Streams.Stream; longreal: LONGREAL) : BOOLEAN;
   PROCEDURE WriteSet(s: Streams.Stream; set: SET) : BOOLEAN;
   PROCEDURE WriteString(s: Streams.Stream; string: ARRAY OF CHAR) : BOOLEAN;
   PROCEDURE WriteConstString(s: Streams.Stream;
			      string: ConstStrings.String) : BOOLEAN;

END NetIO.
