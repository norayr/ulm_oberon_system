(* Ulm's Oberon Library
   Copyright (C) 1989-1994 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: UnixFiles.od,v 1.2 1994/09/21 15:49:18 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: UnixFiles.od,v $
   Revision 1.2  1994/09/21  15:49:18  borchert
   bug fix: condcreate value changed from 5 to 8

   Revision 1.1  1994/02/23  07:27:46  borchert
   Initial revision

   ----------------------------------------------------------------------------
   AFB 6/89
   ----------------------------------------------------------------------------
*)

DEFINITION UnixFiles;

   IMPORT Events, RelatedEvents, Streams, SysTypes;

   (* this module sets during initialization
      Streams.stdin, Streams.stdout, and Streams.stderr
   *)

   CONST
      illegalMode = 0; (* mode doesn't equal one of legal modes given below *)
      invalidFd = 1; (* invalid file descriptor given to OpenFd *)
      errorcodes = 2;
   TYPE
      ErrorCode = SHORTINT;
      ErrorEvent = POINTER TO ErrorEventRec;
      ErrorEventRec =
	 RECORD
	    (Events.EventRec)
	    errorcode: ErrorCode;
	 END;
   VAR
      error: Events.EventType;
      errormsg: ARRAY errorcodes OF Events.Message;

   CONST read = 0; write = 1; rdwr = 2; create = 4; condcreate = 8;
   TYPE Mode = SHORTINT; (* read, write, rdwr,
			    read+create, write+create, rdwr+create,
			    read+condcreate, write+condcreate, rdwr+condcreate
			 *)
   TYPE
      Stream = POINTER TO StreamRec;
      StreamRec =
	 RECORD
	    (Streams.StreamRec)
	    file: SysTypes.File;  (* (read-only) associated file descriptor *)
	    interrupted: BOOLEAN; (* EINTR for last operation? *)
	    retry: BOOLEAN; (* retry on interrupts? *)
	 END;

   PROCEDURE Open(VAR s: Streams.Stream; filename: ARRAY OF CHAR;
		  mode: Mode; bufmode: Streams.BufMode;
		  errors: RelatedEvents.Object) : BOOLEAN;
      (* filename must be 0X-terminated;
	 the returned file is of type Files.Stream
      *)

   PROCEDURE OpenFd(VAR s: Streams.Stream; fd: SysTypes.File;
		    mode: Mode; bufmode: Streams.BufMode;
		    errors: RelatedEvents.Object) : BOOLEAN;

END UnixFiles.
