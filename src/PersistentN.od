(* Ulm's Oberon Library
   Copyright (C) 1989-2004 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: PersistentN.od,v 1.2 2004/03/31 16:43:55 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: PersistentN.od,v $
   Revision 1.2  2004/03/31 16:43:55  borchert
   error event declarations added

   Revision 1.1  2004/03/29 14:12:27  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

DEFINITION PersistentNodes;

   IMPORT Containers, Events, Names, Shards;

   CONST
      dbfailure = 0;
      dbinconsistent = 1;
      transfailure = 2;
      noroot = 3;
      linkwithoutparent = 4;
      nonunique = 5;
      badlink = 6;
      errors = 7;
   TYPE
      ErrorCode = SHORTINT; (* dbfailure ... *)
   TYPE
      ErrorEvent = POINTER TO ErrorEventRec;
      ErrorEventRec =
	 RECORD
	    (Events.EventRec)
	    errorcode: ErrorCode;
	 END;
   VAR
      errormsg: ARRAY errors OF Events.Message;
      error: Events.EventType;

   PROCEDURE Init(container: Containers.Container;
                  permissions: Names.Permissions) : BOOLEAN;
      (* to be called on a newly created container before Open *)

   PROCEDURE Open(VAR root: Names.Node;
                  container: Containers.Container) : BOOLEAN;

END PersistentNodes.
