(* Ulm's Oberon Library
   Copyright (C) 1989-1994 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: Tasks.od,v 1.3 2004/05/21 08:09:10 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: Tasks.od,v $
   Revision 1.3  2004/05/21 08:09:10  borchert
   Disconnect added (as alternative to Terminate)

   Revision 1.2  1995/02/05 13:37:13  borchert
   - tasks events removed
   - Select added
   - default task group added

   Revision 1.1  1994/02/23  08:04:48  borchert
   Initial revision

   ----------------------------------------------------------------------------
   AFB 12/91
   ----------------------------------------------------------------------------
*)

DEFINITION Tasks;

   IMPORT Conditions, Coroutines, Disciplines, Events, RelatedEvents;

   CONST
      taskGroupMismatch = 0; (* task and task group do not match *)
      dispatchTerminatedTask = 1; (* try to reactive terminated task *)
      wrongScheduler = 2; (* try to dispatch a task by a foreign scheduler *)
      invalidSet = 3; (* a condition set was unexpectedly NIL *)
      errorcodes = 4;
   TYPE
      ErrorEvent = POINTER TO ErrorEventRec;
      ErrorEventRec =
	 RECORD
	    (Events.EventRec)
	    errorcode: SHORTINT;
	 END;
   VAR
      errormsg: ARRAY errorcodes OF Events.Message;
      error: Events.EventType;
	 (* raised on errorneous task operations;
	    error events are related to the associated task group;
	    ignored by default
	 *)

   TYPE
      Task = POINTER TO TaskRec;
      TaskRec = RECORD (Disciplines.ObjectRec) END;
      (* a task is a group of coroutines which share some properties
	 and is represented by one of the coroutines
      *)

   TYPE
      TaskGroup = POINTER TO TaskGroupRec;
      TaskGroupRec = RECORD (Disciplines.ObjectRec) END;
	 (* a group of tasks is maintained by a scheduler
	    which itself acts as a task
	 *)
   CONST
      (* codes returned by the dispatch procedure *)
      terminate = 0; suspend = 1; waitfor = 2;

   TYPE
      CreateProc = PROCEDURE (VAR task: Task; cr: Coroutines.Coroutine);

   PROCEDURE Current() : Task;
   PROCEDURE CurrentGroup() : TaskGroup;

   PROCEDURE InitGroup(tg: TaskGroup);
      (* the current task declares itself to be a scheduler of
	 a new task group which is initially empty
      *)

   PROCEDURE Init(task: Task; cr: Coroutines.Coroutine; tg: TaskGroup);
      (* initialize task which is represented by the already
	 existing coroutine cr;
	 task is added to the given task group
      *)

   PROCEDURE Dispatch(tg: TaskGroup; task: Task;
		      setOfTrueConditions: Conditions.ConditionSet;
		      VAR code: SHORTINT;
		      VAR conditionSet: Conditions.ConditionSet);
      (* conditionSet is of interest if code equals waitfor;
	 setOfTrueConditions must be # NIL if the previous code was waitfor
      *)

   PROCEDURE Suspend;
      (* suspend the current task in the hope to become active again *)
   PROCEDURE Select(conditionSet: Conditions.ConditionSet;
		    VAR setOfTrueConditions: Conditions.ConditionSet);
      (* wait for one of the given conditions to become TRUE
	 and return the set of TRUE conditions
      *)
   PROCEDURE WaitForOneOf(conditionSet: Conditions.ConditionSet);
      (* like Select but without out-parameter *)
   PROCEDURE WaitFor(condition: Conditions.Condition);
   PROCEDURE Terminate;
      (* terminate the current task; this is a point of no return *)

   PROCEDURE Disconnect;
      (* terminate the task but do not consider the invoking
	 coroutine as dead
      *)

   PROCEDURE Create(VAR task: Task; cr: Coroutines.Coroutine);
      (* create a new task which will be added to
	 a default task group
      *)

   PROCEDURE SetupDefaultGroup(create: CreateProc);
      (* must be called once to support Create *)

END Tasks.
