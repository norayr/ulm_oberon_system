DEFINITION ProcContext;

   IMPORT Conclusions, Sym := OberonSymbols, RelatedEvents, FragmentedStreams,
	  Regs := Registers, StackAlloc, Emit := I386Emit,
	  Res := OberonI386Results, Disciplines, I386FPURegisters;

   TYPE

      TypeList = POINTER TO TypeListRec;
      TypeListRec = RECORD
         (Disciplines.ObjectRec)
         next : TypeList;
	 type : Sym.Type;
      END;

      (* These parameters to almost all GenSomeThing Procedure don't change
       * while we generate a single procedure. s, rodata, module and
       * errors doesn't change for the whole module. *)
      Context = POINTER TO ContextRec;
      ContextRec = RECORD
	 s : FragmentedStreams.Stream;
	 rodata : Emit.StrTable;
	 types : Emit.FixedData;
	 typeblk : Res.Block;
	 typelist, blklist: TypeList;
         module : Sym.Ident;
	 errors : RelatedEvents.Object;
	 stack : StackAlloc.Stack;
	 regs : Regs.RegSet;
	 fpuregs : I386FPURegisters.RegSet;
	 ident : Sym.Ident;
         level : INTEGER;
	 unique : LONGINT;
      END;

   PROCEDURE Unique (proc : Context) : LONGINT;

END ProcContext.
