(* Ulm's Oberon Library
   Copyright (C) 1989-1994 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: Paths.od,v 1.1 1995/12/22 15:12:50 martin Exp $
   ----------------------------------------------------------------------------
   $Log: Paths.od,v $
   Revision 1.1  1995/12/22  15:12:50  martin
   Initial revision

   ----------------------------------------------------------------------------
   Martin Hasch, Sep 1994
   ----------------------------------------------------------------------------
*)

DEFINITION Paths;

   IMPORT Events, Names, Objects, RelatedEvents, Shards;

   CONST
      separator = "/";
      (*
       * Within a path, separator separates path components;
       * two separators stand for the character itself;
       * an odd number of separators is evaluated from left to right.
       * An empty path stands for the root node.
       *)

   TYPE
      Path = POINTER TO PathRec;
      PathRec =
	 RECORD
	    (Objects.ObjectRec)
	    component: Names.Name;
	    next: Path;
	 END;

   CONST
      zeroPathLen = 0;		(* insert/delete need a nonempty path *)
      errorcodes = 1;

   TYPE
      ErrorCode = SHORTINT;

      ErrorEvent = POINTER TO ErrorEventRec;
      ErrorEventRec =
	 RECORD
	    (Events.EventRec)
	    errorcode: ErrorCode;
	 END;

   VAR
      errormsg: ARRAY errorcodes OF Events.Message;
      error: Events.EventType;

   PROCEDURE Convert(path: ARRAY OF CHAR): Path;

   PROCEDURE GetNode(path: ARRAY OF CHAR;
		     auth: Shards.Lid; errors: RelatedEvents.Object;
		     VAR subnode: Names.Node): BOOLEAN;

   PROCEDURE GetNodeN(node: Names.Node; path: ARRAY OF CHAR;
		     auth: Shards.Lid; errors: RelatedEvents.Object;
		     VAR subnode: Names.Node): BOOLEAN;

   PROCEDURE Insert(path: ARRAY OF CHAR; subnode: Names.Node;
		     auth: Shards.Lid; errors: RelatedEvents.Object): BOOLEAN;

   PROCEDURE InsertN(node: Names.Node; path: ARRAY OF CHAR;
		     subnode: Names.Node;
		     auth: Shards.Lid; errors: RelatedEvents.Object): BOOLEAN;

   PROCEDURE Delete(path: ARRAY OF CHAR;
		     auth: Shards.Lid; errors: RelatedEvents.Object): BOOLEAN;

   PROCEDURE DeleteN(node: Names.Node; path: ARRAY OF CHAR;
		     auth: Shards.Lid; errors: RelatedEvents.Object): BOOLEAN;

END Paths.
