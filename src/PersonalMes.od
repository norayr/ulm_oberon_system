(* Ulm's Oberon Library
   Copyright (C) 1989-1998 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: PersonalMes.od,v 1.1 1998/04/06 21:18:21 martin Exp martin $
   ----------------------------------------------------------------------------
   $Log: PersonalMes.od,v $
   Revision 1.1  1998/04/06 21:18:21  martin
   Initial revision

   ----------------------------------------------------------------------------
   Martin Hasch, 1996
   ----------------------------------------------------------------------------
*)

DEFINITION PersonalMessages;

   IMPORT
      Disciplines, Events, Iterators;

   TYPE
      UserList = Iterators.Iterator;

      MessageBox = POINTER TO MessageBoxRec;
      MessageBoxRec =
	 RECORD
	    (Disciplines.ObjectRec)
	 END;

      Message = POINTER TO MessageRec;
      MessageRec =
	 RECORD
	    (Disciplines.ObjectRec)
	 END;

      MessageEvent = POINTER TO MessageEventRec;
      MessageEventRec =
	 RECORD
	    (Events.EventRec)
	    box: MessageBox;
	    msg: Message;		(* newly arrived message *)
	 END;

   (* ===== message boxes ===== *)

   PROCEDURE Open(   VAR box: MessageBox;
		     name, password: ARRAY OF CHAR): BOOLEAN;

   PROCEDURE Reopen( box: MessageBox);

   PROCEDURE Close(  box: MessageBox);

   PROCEDURE Kill(   box: MessageBox);

   (* ===== messages ===== *)

   PROCEDURE Get(    box: MessageBox; VAR msg: Message): BOOLEAN;

   PROCEDURE Remove( box: MessageBox; msg: Message);

   PROCEDURE Watch(  box: MessageBox; VAR eventType: Events.EventType);

   (* ===== input/output ===== *)

   PROCEDURE Create( VAR msg: Message;
		     from: MessageBox; text: ARRAY OF CHAR);

   PROCEDURE Extract(msg: Message;
		     VAR header, text: ARRAY OF CHAR);

   (* ===== delivery ===== *)

   PROCEDURE Send(   msg: Message; to: ARRAY OF CHAR): BOOLEAN;

   PROCEDURE Reply(  msg, ref: Message): BOOLEAN;

   (* ===== users ===== *)

   PROCEDURE Users(  VAR list: UserList);

   PROCEDURE GetUser(list: UserList; VAR user: ARRAY OF CHAR): BOOLEAN;

   PROCEDURE Known(  user: ARRAY OF CHAR): BOOLEAN;

   (* ===== general ===== *)

   PROCEDURE Default(server: ARRAY OF CHAR);

END PersonalMessages.
