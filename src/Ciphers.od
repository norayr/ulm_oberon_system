(* Ulm's Oberon Library
   Copyright (C) 1989-1997 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: Ciphers.od,v 1.1 1997/04/02 11:51:14 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: Ciphers.od,v $
   Revision 1.1  1997/04/02  11:51:14  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

(* abstraction for the use of ciphers and cryptographic methods *)
DEFINITION Ciphers;

IMPORT Objects, PersistentDisciplines, Streams;

TYPE
   Cipher = POINTER TO CipherRec;
   CipherRec = RECORD
      (PersistentDisciplines.ObjectRec)
   END;

TYPE
   CryptProc = PROCEDURE (in: Streams.Stream; key: Cipher; 
			  length: INTEGER; out: Streams.Stream) : BOOLEAN;

TYPE
   Interface = POINTER TO InterfaceRec;
   InterfaceRec = RECORD
      (Objects.ObjectRec)
      encrypt, decrypt : CryptProc;
   END;

(* init the cipher key with the given interface if *)
PROCEDURE Init(key: Cipher; if: Interface);

(* encrypts/decrypt the stream in *)
PROCEDURE Encrypt(in: Streams.Stream; key: Cipher; 
		  out: Streams.Stream) : BOOLEAN;
PROCEDURE Decrypt(in: Streams.Stream; key: Cipher; 
		  out: Streams.Stream) : BOOLEAN;

(* same as En-/Decrypt but restricted to length bytes *)
PROCEDURE EncryptPart(in: Streams.Stream; key: Cipher; 
		      length: INTEGER; out: Streams.Stream) : BOOLEAN;
PROCEDURE DecryptPart(in: Streams.Stream; key: Cipher; 
		      length: INTEGER; out: Streams.Stream) : BOOLEAN;

END Ciphers.
