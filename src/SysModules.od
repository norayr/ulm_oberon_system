(* Ulm's Oberon Library
   Copyright (C) 1989-1994 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: SysModules.od,v 1.2 2001/07/27 21:01:55 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: SysModules.od,v $
   Revision 1.2  2001/07/27 21:01:55  borchert
   name component added to BlockListRec

   Revision 1.1  1994/02/23  07:49:39  borchert
   Initial revision

   ----------------------------------------------------------------------------
   AFB 8/92
   ----------------------------------------------------------------------------
*)

DEFINITION SysModules;

   IMPORT Types;

   TYPE
      (* $P- don't trace any pointers *)
      (* names are read-only and 0X-terminated *)
      Name = (* $O- *) POINTER TO ARRAY 1024 OF CHAR (* $O= *);
      Address = Types.Address;

      BlockList = (* $O- *) POINTER TO BlockListRec (* $O= *);
      BlockListRec =
	 RECORD
	    next: BlockList; (* in memory order *)
	    begin, end: Address; (* of program text *)
	    tag: Address; (* pointer list only *)
	    name: Name; (* name of procedure (or module) *)
	 END;

      Module = (* $O- *) POINTER TO ModuleRec (* $O= *);
      ModuleRec =
	 RECORD
	    next: Module; (* in linkage order *)
	    name: Name;
	    init: PROCEDURE;
	    begin, end: Address; (* of program text *)
	    vars: Address; (* global variables *)
	    blocks: BlockList; (* procedures and module body *)
	    nofblocks: INTEGER; (* number of blocks *)
	 END;
      (* $P= *)

   VAR
      modules: Module;

END SysModules.
