(* PLEASE DO NOT EDIT:
   Generated by instantiate_template on Wed Apr 28 16:24:13 MEST 2004
   from templates/Oberon%%Lit.om
*)

(* Ulm's Oberon Library
   Copyright (C) 1989-2001 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id$
   ----------------------------------------------------------------------------
   $Log$
   ----------------------------------------------------------------------------
*)

MODULE Oberon32iLittleEndianConversions;

   IMPORT Oberon32i, Conversions := Oberon32iConversions, Sym := OberonSymbols;

   VAR
      if: Conversions.Interface;

   PROCEDURE SetToInteger(set: Oberon32i.Set;
			  VAR integer: Oberon32i.Integer) : BOOLEAN;
      VAR
	 member, intval, memberval: Oberon32i.Integer;
   BEGIN
      member := 0; memberval := 1; intval := 0;
      WHILE member < Oberon32i.maxSetLenOnTarget DO
	 IF member IN set THEN
	    IF member >= Oberon32i.setLen THEN
	       RETURN FALSE
	    ELSE
	       INC(intval, memberval);
	    END;
	 END;
	 INC(member); INC(memberval, memberval);
      END;
      integer := intval;
      RETURN TRUE
   END SetToInteger;

   PROCEDURE IntegerToSet(integer: Oberon32i.Integer;
			  VAR set: Oberon32i.Set) : BOOLEAN;
      VAR
	 member: Oberon32i.Integer;
	 setval: Oberon32i.Set;
   BEGIN
      setval := {}; member := 0;
      WHILE member < Oberon32i.maxSetLenOnTarget DO
	 IF ODD(integer) THEN
	    IF member >= Oberon32i.setLen THEN
	       RETURN FALSE
	    END;
	    INCL(setval, member);
	 END;
	 INC(member); integer := integer DIV 2;
      END;
      set := setval;
      RETURN TRUE
   END IntegerToSet;

   PROCEDURE Init(module: Sym.Ident);
      (* install Oberon32iConversions interface for module *)
   BEGIN
      Conversions.Init(module, if);
   END Init;

BEGIN
   NEW(if); if.setToInteger := SetToInteger; if.integerToSet := IntegerToSet;
END Oberon32iLittleEndianConversions.
