(* Ulm's Oberon Library
   Copyright (C) 1989-1996 by University of Ulm, SAI, D-89069 Ulm, Germany
   ----------------------------------------------------------------------------
   Ulm's Oberon Library is free software; you can redistribute it
   and/or modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either version
   2 of the License, or (at your option) any later version.

   Ulm's Oberon Library is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ----------------------------------------------------------------------------
   E-mail contact: oberon@mathematik.uni-ulm.de
   ----------------------------------------------------------------------------
   $Id: MemStreams.od,v 1.1 1996/12/08 16:04:39 borchert Exp $
   ----------------------------------------------------------------------------
   $Log: MemStreams.od,v $
   Revision 1.1  1996/12/08  16:04:39  borchert
   Initial revision

   ----------------------------------------------------------------------------
*)

DEFINITION MemStreams;

   (* streams representing a memory area *)

   IMPORT Events, Streams, Types;

   CONST
      read = 0; write = 1; rdwr = 2;
   TYPE
      Mode = SHORTINT; (* read..rdwr *)

   CONST
      beyondEndOfStream = 0;
      posOutOfRange = 1;
      invalidRange = 2; (* invalid range given to SubStreams.Open *)
      errors = 3;
   TYPE
      ErrorCode = SHORTINT; (* illegalMode..beyondEndOfStream *)
      ErrorEvent = POINTER TO ErrorEventRec;
      ErrorEventRec =
	 RECORD
	    (Events.EventRec)
	    errorcode: ErrorCode;
	 END;
   VAR
      error: Events.EventType;
      errormsg: ARRAY errors OF Events.Message;

   PROCEDURE Open(VAR s: Streams.Stream;
                  addr: Types.Address; length: Types.Size;
		  mode: Mode);

   PROCEDURE OpenU(VAR s: Streams.Stream;
                   addr: Types.UntracedAddress; length: Types.Size;
		   mode: Mode);

END MemStreams.
