.\" --------------------------------------
.\" Oberon System Documentation   AFB 8/90
.\" (c) University of Ulm, SAI, D-7900 Ulm
.\" --------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CR
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
.TH reffile 5 "Oberon System"
.SH NAME
reffile \- format of an Oberon reference file
.SH DESCRIPTION
Oberon reference files are generated on successful compilation of modules.
They serve as interface between the compiler and the debugger.
Reference files of version 3 conform to following grammar:
.TS
l l.
RefFile =	Module .
Module =	MagicNumber Name Key Imports Block \fBEND\fP .
Imports =	{ Import } .
Import =	\fBIMPORT\fP Name Key .
Block =	{ Type | Procedure | Variable } .
Procedure =	\fBPROC\fP Name LineNum ProcNo ParLength Block \fBEND\fP .
Variable =	\fBVAR\fP Name LineNum Offset Access TypeNo .
Type =	\fBTYPE\fP TypeNo Name Size TypeDesc .
TypeDesc =	BasicType | PointerType | RecordType | ArrayType |
	ProcedureType .
BasicType =	\fBSHORTINT\fP | \fBINTEGER\fP | \fBLONGINT\fP | \fBREAL\fP | \fBLONGREAL\fP |
	\fBCHAR\fP | \fBBOOLEAN\fP | \fBSET\fP | \fBBYTE\fP | \fBINT16\fP .
PointerType =	\fBPOINTER\fP TypeNo .
ArrayType =	\fBARRAY\fP NumOfElem TypeNo .
RecordType =	\fBRECORD\fP TypeNo (* base type *)
	{ \fBFIELD\fP Name Offset TypeNo }
	END .
ProcedureType =	\fBPROCEDURE\fP .
MagicNumber =	Number . (* 200AFB00H + version number *)
Name =	{ Character } 0X .
Key =	Number Number . (* symbol file key *)
LineNum =	Number .
ProcNo =	Number .
ParLength =	Number .
ParLength =	Number .
Offset =	Number .
Access =	\fBDIR\fP | \fBINDIR\fP .
TypeNo =	Number .
Size =	Number .
NumOfElem =	Number .
Number =	(* signed 4-byte integer *) .
.TE
.PP
Keyword terminals are represented as one-byte integers:
.TS
box tab(:);
lfB n | lfB n | lfB n.
ARRAY:1:INDIR:9:PROCEDURE:16
BOOLEAN:2:INTEGER:10:REAL:17
BYTE:3:INT16:11:RECORD:18
CHAR:4:LONGINT:12:SET:19
DIR:5:LONGREAL:13:SHORTINT:20
END:6:POINTER:14:TYPE:21
FIELD:7:PROC:15:VAR:22
IMPORT:8:PROCEDURE:15
.TE
.PP
All types are identified by an unique positive integer.
It is recommended to allocate a temporary array of type references
which is indexed by the type numbers found in the reference file.
There are two kind of type definitions:
some type definitions result from type declarations in the original
source file; in this case they precedes their usage.
In the other case types are declared after their usage in
type, variable or parameter declarations.
The last case applies for basic types and for types imported from
foreign modules.
.PP
Not every type has a name;
in case of name-less types
.I Name
consists of a 0X.
The size is given in bytes.
The number of elements (\fINumOfElem\fP) of arrays is -1
in case of dynamic arrays.
The Report of Ulm's Oberon Compiler
contains some notes about the representation
of dynamic arrays.
The type number (\fITypeNo\fP) equals zero if a record has no
base type.
The field list contains all fields including those of the base type.
.PP
Line numbers of procedures are related to the procedure header.
All procedures of a module are identified locally by their procedure
number.
Procedure numbering depends on the order of appearance.
The parameter length is given as offset which is added to the stack
pointer for parameter allocation.
Thus the parameter length is negative in case of backward stack
direction and positive in case of forward stack direction.
The parameter length includes the static link in case of local procedures.
.PP
The symbol names of procedures consist of the symbol prefix "O_",
the module name, and the procedure number.
The last two components are separated by "_".
Example: the procedure with procedure number 2 of the module "x" gets
the symbol name "O_x_2".
Exported procedures have a second symbol which contains the procedure
name instead of the procedure number.
.PP
Variables are either global (not part of a procedure; offset equals 0),
parameters (positive offset in case of backward stack direction),
or local (negative offset in case of backward stack direction).
The line number refers to the declaration.
Global variables can be accessed by their symbol name which is found
in unstripped executables.
The symbol name consists of the symbol prefix "O_", the module name,
and the variable name.
The last two components are separated by "_".
Local offsets are relative to the \fIbase\fP register.
Variables are either accessed directly (\fBDIR\fP) or indirectly (\fBINDIR\fP).
In the last case the calculated address leads to a pointer which
references the variable.
.PP
Parameters have negative and local variables have non-negative offsets
in case of forward stack direction.
.SH "SEE ALSO"
.TS
lfI l.
oc(1)	Oberon compiler
odb(1)	Oberon debugger
.TE
.br
Andreas Borchert,
\fIReport of Ulm's Oberon Compiler\fP,
University of Ulm, SAI
.\" ---------------------------------------------------------------------------
.\" $Id: reffile.5,v 1.4 1994/02/17 08:59:53 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: reffile.5,v $
.\" Revision 1.4  1994/02/17  08:59:53  borchert
.\" 3rd version: INT16 has been added to the list of numeric types
.\"
.\" Revision 1.3  1991/05/07  17:14:28  borchert
.\" typo error fixed
.\"
.\" Revision 1.2  91/02/28  11:18:00  borchert
.\" upgrade to version 2
.\" 
.\" Revision 1.1  91/01/04  00:02:47  borchert
.\" Initial revision
.\" 
.\" ---------------------------------------------------------------------------
