.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-1995 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH Semaphores 3 "Last change: 11 July 1997" "Release 0.5" "Ulm's Oberon System"
.SH NAME
Semaphores \- general interface for semaphores
.SH SYNOPSIS
.Pg
TYPE Semaphore = POINTER TO SemaphoreRec;
TYPE SemaphoreRec = RECORD (Disciplines.ObjectRec) END;
.sp 0.2
TYPE SemaOp = PROCEDURE (sema: Semaphore);
TYPE StatusProc = PROCEDURE (sema: Semaphore) : INTEGER;
TYPE GetConditionProc = PROCEDURE (sema: Semaphore;
                                   VAR condition: Conditions.Condition);
TYPE DropProc = PROCEDURE (condition: Conditions.Condition);
TYPE Interface = POINTER TO InterfaceRec;
TYPE InterfaceRec =
   RECORD
      p: SemaOp; (* optional: may be NIL *)
      v: SemaOp;
      getcondition: GetConditionProc;
      drop: DropProc;
      status: StatusProc;
   END;
.sp 0.7
PROCEDURE Init(sema: Semaphore; if: Interface);
.sp 0.2
PROCEDURE P(sema: Semaphore);
PROCEDURE V(sema: Semaphore);
.sp 0.2
PROCEDURE GetCondition(sema: Semaphore; VAR condition: Conditions.Condition);
PROCEDURE Drop(condition: Conditions.Condition);
.sp 0.2
PROCEDURE Status(sema: Semaphore) : INTEGER;
.Pe
.SH DESCRIPTION
.I Semaphores
provides an interface for semaphores.
Semaphores are used for synchronization where multiple processes
want to share common accessible resources.
If the number of resources equals one, semaphores may be used
to assure mutual exclusion if several processes possibly access
the same data structure.
.PP
.I Init
initializes a newly created semaphore and
associates it with the given interface \fIif\fP.
The interface procedures are expected to meet the
specifications following:
.Is ""
.If p "\fIsema\fP: \fISemaphore\fP"
block the current task until one of the resources becomes free
and allocate it.
This interface procedure is optional
(i.e. it may be set to \fBNIL\fP)
because it may be replaced by \fIgetcondition\fP and
\fITasks.WaitFor\fP.
It is provided, however,
to allow to avoid \fITasks.WaitFor\fP
if one of the resources is already free.
.If v "\fIsema\fP: \fISemaphore\fP"
free one of the claimed resources.
.If status "" "\fBINTEGER\fP"
return the number of free resources, or, if zero,
the negated number of processes which wait for this resource
to become available.
.If getcondition "\fIsema\fP: \fISemaphore\fP; \fBVAR\fP \fIcondition\fP: \fIConditions.Condition\fP"
create a condition which allows to wait for one of the resources.
The condition must not only indicate the availability of the resource
but has to claim it.
.If drop "\fIcondition\fP: \fIConditions.Condition\fP"
remove the condition from the list of waiting conditions,
or, release the resource if it has already has been claimed.
.Ef
.PP
.I P
and
.I V
realize Dijkstra's semaphore operations which claim and release
a resource.
.PP
.I GetCondition
returns a condition which evaluates to \fBTRUE\fP when the
resource has been claimed.
Note that the condition returned by \fIGetCondition\fP
does not indicate the availability of the resource only but claims 
the resource itself, i.e. \fIP\fP must not be called additionally
if \fIConditions.TestCondition\fP returns \fBTRUE\fP.
For this reason conditions may not be recycled,
i.e. for each new try to claim a resource a new condition has to be created.
.PP
To undo \fIGetCondition\fP, \fIDrop\fP may be called.
\fIDrop\fP either unqueues the condition from the list of
conditions waiting for one of the resource becoming available,
or releases the resource if it was already claimed by the condition.
.PP
.I Status
reports the current status of \fIsema\fP.
If positive, the returned value indicates the number of free resources.
If less or equal to zero, the absolute value of the returned number
gives the number of processes which waits for the resource to become
available.
.SH DIAGNOSTICS
\fISemaphores\fP does not produce itself any diagnostics.
Implementations are expected to relate any error events to the semaphore.
For external semaphores (i.e. those which are maintained outside)
it is wise to setup an event queue for the semaphore and
to check for pending events after \fIP\fP operations for lost resources.
.PP
Following runtime tests are performed by assertions:
.IP \(bu
.I Init
checks the validity of the interface record.
.IP \(bu
.I Drop
verifies that the condition has been returned formerly by \fIGetCondition\fP.
.SH CAVEAT
Critical regions which are threatened by asynchronous interrupts,
(i.e. which are possible reentered during interrupt processing)
must be also protected by use of the priority system to assure
avoidance of dead locks.
The general pattern for these cases looks as following:
.Pg
Events.AssertPriority(Priorities.interrupts);
Semaphores.P(mutex);
   (* ... critical region ... *)
Semaphores.V(mutex);
Events.ExitPriority;
.Pe
.SH "SEE ALSO"
.Tb LocalSemaphores(3)
.Tp Events(3)
priority system
.Tp LocalSemaphores(3)
implementation of internal semaphores
.Tp RelatedEvents(3)
setup of event queues
.Te
.SH BUGS
Neither \fISemaphores\fP nor its implementations are able to
check whether \fIP\fP and \fIV\fP operations are properly nested.
.\" ---------------------------------------------------------------------------
.\" $Id: Semaphores.3,v 1.4 1997/07/11 08:31:09 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: Semaphores.3,v $
.\" Revision 1.4  1997/07/11  08:31:09  borchert
.\" Drop added (V must definitively not be called for not yet claimed resources)
.\"
.\" Revision 1.3  1996/09/16  16:58:01  borchert
.\" - sema if procedure added
.\" - minor typos corrected
.\"
.\" Revision 1.2  1993/10/07  18:01:00  borchert
.\" CAVEAT added
.\"
.\" Revision 1.1  1993/10/07  17:34:17  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
