'\" t
.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-2003 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH SysDebug 3 "Last change: 10 July 2003" "Release 0.5" "Ulm's Oberon System"
.SH NAME
SysDebug \- process trace
.SH SYNOPSIS
.Pg
(* requests *)
.sp 0.5
CONST traceme    =  0;  (* by tracee to begin tracing *)
CONST childdone  =  0;  (* tracee is done with his half *)
CONST peektext   =  1;  (* read word from text segment *)
CONST peekdata   =  2;  (* read word from data segment *)
CONST peekuser   =  3;  (* read word from user struct *)
CONST poketext   =  4;  (* write word into text segment *)
CONST pokedata   =  5;  (* write word into data segment *)
CONST pokeuser   =  6;  (* write word into user struct *)
CONST cont       =  7;  (* continue process *)
CONST kill       =  8;  (* terminate process *)
CONST singlestep =  9;  (* single step process *)
CONST attach     = 10;  (* attach to an existing process *)
CONST detach     = 11;  (* detach from a process *)
CONST getregs    = 12;  (* get all registers *)
CONST setregs    = 13;  (* set all registers *)
CONST getfpregs  = 14;  (* get all floating point regs *)
CONST setfpregs  = 15;  (* set all floating point regs *)
CONST readdata   = 16;  (* read data segment *)
CONST writedata  = 17;  (* write data segment *)
CONST readtext   = 18;  (* read text segment *)
CONST writetext  = 19;  (* write text segment *)
CONST getfparegs = 20;  (* get all fpa regs *)
CONST setfparegs = 21;  (* set all fpa regs *)
CONST getwindow  = 22;  (* get register window n *)
CONST setwindow  = 23;  (* set register window n *)
CONST syscall    = 24;  (* trap next sys call *)
CONST dumpcore   = 25;  (* dump process core *)
CONST setwrbkpt  = 26;  (* set write breakpoint *)
CONST setacbkpt  = 27;  (* set access breakpoint *)
CONST clrdr7     = 28;  (* clear debug register 7 *)
CONST getucode   = 29;  (* get u.u_code *)
.sp 0.6
(* spaces *)
.sp 0.5
CONST text = 1;  (* program text *)
CONST data = 2;  (* global variables + heap + stack *)
CONST user = 3;  (* kernel's per-process data pages *)
.sp
TYPE Regs = (* MC68000 family *)
   RECORD
      dreg: ARRAY 8 OF SysTypes.Word;
      areg: ARRAY 8 OF SysTypes.Word;
      sreg: SysTypes.Word; (* status register *)
      pc: SysTypes.Address;
   END;
.sp 0.3
TYPE FPRegs = (* 68881 and up *)
   RECORD
      regs: ARRAY 8 OF LONGREAL; (* floating point regs *)
      control: SysTypes.Word;    (* control reg *)
      status: SysTypes.Word;     (* status reg *)
      iaddr: SysTypes.Address;   (* instruction address reg *)
      flags: SysTypes.Word;      (* unused, idle or busy *)
   END;
.sp
PROCEDURE TraceMe;
.sp 0.3
PROCEDURE Peek(pid: SysProcess.ProcessId; space: SHORTINT;
               addr: SysTypes.Address;
               VAR dataword: SysTypes.Word;
               errors: RelatedEvents.Object) : BOOLEAN;
PROCEDURE Poke(pid: SysProcess.ProcessId; space: SHORTINT;
               addr: SysTypes.Address;
               dataword: SysTypes.Word;
               errors: RelatedEvents.Object) : BOOLEAN;
.sp 0.3
PROCEDURE Continue(pid: SysProcess.ProcessId;
                   errors: RelatedEvents.Object) : BOOLEAN;
PROCEDURE ContinueWithSig(pid: SysProcess.ProcessId;
                          signal: SysSignals.Signal;
                          errors: RelatedEvents.Object) : BOOLEAN;
PROCEDURE ContinueAt(pid: SysProcess.ProcessId;
                     signal: SysSignals.Signal; (* maybe 0 *)
                     addr: SysTypes.Address;
                     errors: RelatedEvents.Object) : BOOLEAN;
.sp 0.3
PROCEDURE Kill(pid: SysProcess.ProcessId;
               errors: RelatedEvents.Object) : BOOLEAN;
.sp 0.3
PROCEDURE SingleStep(pid: SysProcess.ProcessId;
                     errors: RelatedEvents.Object) : BOOLEAN;
PROCEDURE SingleStepWithSig(pid: SysProcess.ProcessId;
                            signal: SysSignals.Signal;
                            errors: RelatedEvents.Object) : BOOLEAN;
PROCEDURE SingleStepAt(pid: SysProcess.ProcessId;
                       signal: SysSignals.Signal; (* maybe 0 *)
                       addr: SysTypes.Address;
                       errors: RelatedEvents.Object) : BOOLEAN;
.sp 0.3
PROCEDURE Attach(pid: SysProcess.ProcessId;
                 errors: RelatedEvents.Object) : BOOLEAN;
PROCEDURE Detach(pid: SysProcess.ProcessId;
                 errors: RelatedEvents.Object) : BOOLEAN;
PROCEDURE DetachWithSig(pid: SysProcess.ProcessId;
                        signal: SysSignals.Signal;
                        errors: RelatedEvents.Object) : BOOLEAN;
PROCEDURE DetachAt(pid: SysProcess.ProcessId;
                   signal: SysSignals.Signal; (* maybe 0 *)
                   addr: SysTypes.Address;
                   errors: RelatedEvents.Object) : BOOLEAN;
.sp 0.3
PROCEDURE GetRegs(pid: SysProcess.ProcessId; VAR regs: Regs;
                  errors: RelatedEvents.Object) : BOOLEAN;
PROCEDURE SetRegs(pid: SysProcess.ProcessId; regs: Regs;
                  errors: RelatedEvents.Object) : BOOLEAN;
PROCEDURE GetFPRegs(pid: SysProcess.ProcessId; VAR fpregs: FPRegs;
                    errors: RelatedEvents.Object) : BOOLEAN;
PROCEDURE SetFPRegs(pid: SysProcess.ProcessId; fpregs: FPRegs;
                    errors: RelatedEvents.Object) : BOOLEAN;
.sp 0.3
PROCEDURE Read(pid: SysProcess.ProcessId;
               space: SHORTINT; addr: SysTypes.Address;
               VAR buf: ARRAY OF BYTE;
               off, cnt: LONGINT;
               errors: RelatedEvents.Object) : BOOLEAN;
PROCEDURE Write(pid: SysProcess.ProcessId;
                space: SHORTINT; addr: SysTypes.Address;
                buf: ARRAY OF BYTE;
                off, cnt: LONGINT;
                errors: RelatedEvents.Object) : BOOLEAN;
.sp 0.3
PROCEDURE ContUntilSysCall(pid: SysProcess.ProcessId;
                           errors: RelatedEvents.Object) : BOOLEAN;
PROCEDURE ContUntilSysCallWithSig(pid: SysProcess.ProcessId;
                                  signal: SysSignals.Signal;
                                  errors: RelatedEvents.Object) : BOOLEAN;
PROCEDURE ContUntilSysCallAt(pid: SysProcess.ProcessId;
                             signal: SysSignals.Signal; (* maybe 0 *)
                             addr: SysTypes.Address;
                             errors: RelatedEvents.Object) : BOOLEAN;
.sp 0.3
PROCEDURE DumpCore(pid: SysProcess.ProcessId;
                   filename: ARRAY OF CHAR;
                   errors: RelatedEvents.Object) : BOOLEAN;
.sp 0.3
PROCEDURE Trace(request: SHORTINT;
                pid: SysProcess.ProcessId;
                addr: SysTypes.Address;
                data: SysTypes.Word;
                addr2: SysTypes.Address;
                VAR result: SysTypes.Word;
                errors: RelatedEvents.Object) : BOOLEAN;
.Pe
.SH DESCRIPTION
\fISysDebug\fP interfaces the \fIptrace(2)\fP system call.
These system calls allow a debugging process to examine and control
another process.
Traditionally, the process to be debugged is a child of the
debugging process:
.Pg
PROCEDURE StartProcess(VAR child: SysProcess.ProcessId;
                       path: ARRAY OF CHAR;
                       argv: SysArgs.Arguments) : BOOLEAN;
   (* start a new process and prepare it for debugging *)
   VAR
      child: SysProcess.ProcessId;
      status: SysProcess.Status;
BEGIN
   IF SysProcess.Fork(child, NIL) THEN
      IF child = 0 THEN
         (* child process *)
         SysDebug.TraceMe;
         SysProcess.Exec(path, argv, NIL);
         (* Exec failed? *)
         SysProcess.ImmediateExit(255);
      ELSE
         (* debugging process *)
         RETURN SysProcess.WaitFor(child, status, NIL) & status.stopped
      END;
   ELSE
      RETURN FALSE
   END;
END StartProcess;
.Pe
\fITraceMe\fP causes the child process to be stopped after
the call of \fISysProcess.Exec\fP,
i.e. just befor the given program starts execution.
\fISysProcess.WaitFor\fP waits until the child process gets stopped.
All other operations requires the given process to be in a stopped state.
.PP
The address space of the process is divided into three parts (spaces):
.TS
lfI l.
text	program text and constants (sometimes read-only)
data	global variables, heap and stack
user	system's per-process data (user structure)
.TE
On some systems (e.g. PDP11 but not on Sun workstations) the
process spaces \fItext\fP and \fIdata\fP are separated.
On other systems (e.g. on Sun workstations) there is no distinction
between both spaces.
The \fIuser\fP space allows the user structure to be accessed.
This is especially necessary to examine and modify the register values
on some systems.
Fortunately, Sun supports direct access via \fIGetReg\fP and \fISetReg\fP.
\fIPeek\fP and \fIPoke\fP support access of a single word.
Many systems (e.g. Sun4) requires addresses to be aligned
(i.e. dividable by 4).
.PP
\fIRead\fP and \fIWrite\fP allow larger quantities to be transferred
but are not portable.
For convenience, the parameters of \fIRead\fP and \fIWrite\fP
are close to that of \fIStreams.BufIO\fP procedures.
The only difference is the return type;
in comparison to \fIStreams.BufIO\fP procedures
\fIRead\fP and \fIWrite\fP
either transfer the whole quantity or nothing (return of \fBFALSE\fP).
\fIRead\fP and \fIWrite\fP do not support the \fIuser\fP space.
.PP
If the process is in a stopped state and all necessary work has been done,
the execution may be continued in different ways:
.Tb ContUntilSysCall
.Tp Continue
continue execution until the process terminates,
or until a signal is received
.Tp SingleStep
execution stops after execution of at least one instruction;
this feature needs hardware assist which is not given on all systems
(e.g. Sun4)
.Tp ContUntilSysCall
execution stops before and after the execution of system calls
.Tp Detach
continue execution and stop process tracing
.Te
.PP
By default, these operations cause the process to resume execution
from where it was stopped,
and if a signal was causing the process to be stopped it will be ignored.
\fIContinueWithSig\fP and \fIContinueAt\fP work like \fIContinue\fP
but allow the signal (\fIContinueWithSig\fP and \fIContinueAt\fP) and the 
address where the execution should continue (\fIContinueAt\fP)
to be given.
Similar procedures exist for the other variants.
.PP
As before, further process tracing operations require the debugging process
to wait for the child process to be stopped.
.PP
\fITrace\fP provides a raw interface to \fIptrace(2)\fP.
\fIresult\fP equals the return value of the equivalent call in C.
.SH DIAGNOSTICS
All procedures return \fBFALSE\fP on failure.
System call failures lead to events of \fISysError(3)\fP.
The \fIerrors\fP parameter is passed to \fISysErrors.Raise\fP.
.PP
Illegal \fIspace\fP values cause runtime error exceptions.
.SH "SEE ALSO"
.TS
lfI l.
ptrace(2)	underlying system call
SysError(3)	handling of failed system calls
SysProcess(3)	basic process primitives like \fIExec\fP and \fIWait\fP
.TE
.SH BUGS
Many calls are very system dependent,
e.g. \fIGetRegs\fP is available on Sun workstations only.
.\" ---------------------------------------------------------------------------
.\" $Id: SysDebug.3,v 1.5 2003/07/10 09:22:51 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: SysDebug.3,v $
.\" Revision 1.5  2003/07/10 09:22:51  borchert
.\" typo fixed
.\"
.\" Revision 1.4  1992/03/24 09:18:50  borchert
.\" object-parameters renamed to errors and rearranged
.\"
.\" Revision 1.3  1992/03/17  07:34:18  borchert
.\" object-parameters renamed to errors and rearranged
.\"
.\" Revision 1.2  1991/11/18  08:14:58  borchert
.\" object parameters for RelatedEvents added
.\"
.\" Revision 1.1  1991/10/10  08:11:07  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
