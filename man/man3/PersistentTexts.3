.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-1999 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH PersistentTexts 3 "Last change: 9 April 2004" "Release 0.5" "Ulm's Oberon System"
.SH NAME
PersistentTexts \- persistent objects representing texts
.SH SYNOPSIS
.Pg
TYPE Text = POINTER TO TextRec;
TYPE TextRec = RECORD (PersistentDisciplines.ObjectRec) END;
.sp 0.7
PROCEDURE Create(VAR text: Text; s: Streams.Stream) : BOOLEAN;
.sp 0.7
PROCEDURE Open(VAR s: Streams.Stream; text: Text;
               VAR errors: RelatedEvents.Object) : BOOLEAN;
.Pe
.SH DESCRIPTION
.I PersistentTexts
allows texts streams of arbitrary size to be handled as
persistent objects. Streams are expected to work like those
of \fITexts(3)\fP, \fILargeTexts(3)\fP, or \fIMemStreams(3)\fP,
i.e. they are contiguous and support read, write, and seek operations.
.LP
.I Create
creates a persistent text object representing \fIs\fP.
The length of \fIs\fP is measured (by seeking to the end of \fIs\fP
and taking the current position), a rewind is performed,
and a sub stream (see \fISubStreams(3)\fP) of \fIs\fP is opened
covering the current length.
This allows \fItext\fP to keep in touch with \fIs\fP but avoids
conflicts regarding shared stream positions if all other parties
interested in accessing \fIs\fP create sub streams as well.
A termination of \fIs\fP (see \fIResources(3)\fP) causes
\fItext\fP to terminate, too. Likewise, a termination of
\fItext\fP causes its connection to \fIs\fP to be dropped.
.LP
.I Open
returns a stream that allows to access the contents of \fItext\fP.
Multiple open operations are permitted and return different
sub streams of the internal base stream of \fItext\fP.
.SH EXAMPLE
.I PersistentTexts
may be used to transport and store graphs of persistent objects
(see \fILinearizedStructures(3)\fP and \fIModularizedStructures(3)\fP)
with the option to delay the time-consuming restoration until it
is needed, or to avoid restoration where it is unnecessary as,
for example, in a separately running database process like \fIcdbd(1)\fP.
.LP
Following procedures show how to convert a graph of persistent
objects (represented by one root object) into a text object and
vice versa:
.Pg
PROCEDURE ConvertObjectToText(object: PersistentObjects.Object;
                              VAR text: PersistentTexts.Text;
                              errors: RelatedEvents.Object) : BOOLEAN;
   VAR
      textbuf: Texts.Text;
BEGIN
   Texts.Open(textbuf); RelatedEvents.Forward(textbuf, errors);
   IF ~LinearizedStructures.Write(textbuf, object) THEN
      RETURN FALSE
   END;
   RETURN PersistentTexts.Create(text, textbuf)
END ConvertObjectToText;

PROCEDURE ConvertTextToObject(text: PersistentTexts.Text;
                              VAR object: PersistentObjects.Object;
                              errors: RelatedEvents.Object) : BOOLEAN;
   VAR
      s: Streams.Stream;
      ok: BOOLEAN;
BEGIN
   IF ~PersistentTexts.Open(s, text, errors) THEN
      RETURN FALSE
   END;
   RelatedEvents.Forward(s, errors);
   ok := LinearizedStructures.Read(s, object);
   Streams.Release(s);
   RETURN ok
END ConvertTextToObject;
.Pe
.SH DIAGNOSTICS
.I PersistentTexts
does not generate any error events on its own.
.I Create
returns \fBFALSE\fP if it is unable to measure the length of \fIs\fP.
.I Open
returns \fBFALSE\fP in case of terminated text objects.
.SH "SEE ALSO"
.Tb PersistentObjects(3)
.Tp PersistentObjects(3)
operations for persistent objects
.Tp SubStreams(3)
streams covering a sub range of another stream that
maintain their own stream position
.Tp Texts(3)
in-memory streams
.Te
.SH BUGS
While streams are not necessarily in-memory streams, the marshalling
read operation of \fIPersistentTexts\fP stores the entire text
into memory.
.LP
While the contents of a text object may be changed, its length
cannot be modified.
.\" ---------------------------------------------------------------------------
.\" $Id: PersistentTexts.3,v 1.2 2004/04/09 07:13:01 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: PersistentTexts.3,v $
.\" Revision 1.2  2004/04/09 07:13:01  borchert
.\" typo fixed
.\"
.\" Revision 1.1  2000/04/27 14:46:34  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
