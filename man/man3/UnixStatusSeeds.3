.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-2004 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH UnixStatusSeeds 3 "Last change: 8 March 2004" "Release 0.5" "Ulm's Oberon System"
.SH NAME
UnixStatusSeeds \- generate seed sequence from various Unix status informations
.SH SYNOPSIS
.Pg
TYPE StatusCommandList = POINTER TO StatusCommandListRec;
TYPE StatusCommandListRec = RECORD (Objects.ObjectRec) END;
.sp 0.7
PROCEDURE CreateList(VAR list: StatusCommandList);
PROCEDURE Add(list: StatusCommandList; command: ARRAY OF CHAR);
.sp 0.7
PROCEDURE Create(VAR sequence: RandomGenerators.Sequence;
                 list: StatusCommandList);
.Pe
.SH DESCRIPTION
.I UnixStatusSeeds
provides seed values on base of the digested output of chosen
commands. The commands should be carefully selected so that their output
is hard to predict. \fIMD5(3)\fP is used to compute the digests. As soon
as the digest sum is consumed up, the commands are rerun and a new digest
will be computed.
.PP
Note that this module serves primarily as a fallback solution
if random devices are not available, see \fISeedStreams(3)\fP.
All useful seed generators like this one are expensive to use
and ought to be stretched using unpredictable generators like
\fISurfRandomGenerators(3)\fP.
.PP
.I CreateList
and
.I Add
allow to create and extend a list of commands. These commands shall
consist of a full pathname of a binary and a space-separated list
of arguments. Meta characters of shells or the environment variable
\fBPATH\fP are not considered as the commands are not passed to a shell
for interpretation. It does not hurt to try different paths if the exact
location is not known (see example). Note however that the standard error
of these commands will be shared with the standard error channel of the
own process. Hence, it should be avoided to give possibly invalid flags
or commands that occasionally fail.
.PP
.I Create
creates a sequence that is based upon the list of commands \fIlist\fP.
Note that the list must not be empty.
.SH DIAGNOSTICS
Error events in the attempts to execute the given commands are
related to the sequence. Zeroes are generated in case of failures.
.SH EXAMPLE
Following code snippet demonstrates how a seed sequence can
be created that uses the combined output of the \fIps\fP,
\fIdate\fP, and \fInetstat\fP command to generate seed values:
.PP
.Pg
VAR seq: RandomGenerators.Sequence;
VAR list: UnixStatusSeeds.StatusCommandList;
(* ... *)
UnixStatusSeeds.CreateList(list);
UnixStatusSeeds.Add(list, "/bin/ps -ef");
UnixStatusSeeds.Add(list, "/usr/bin/ps -ef");
UnixStatusSeeds.Add(list, "/bin/date");
UnixStatusSeeds.Add(list, "/usr/bin/date");
UnixStatusSeeds.Add(list, "/bin/netstat -n");
UnixStatusSeeds.Add(list, "/usr/bin/netstat -n");
UnixStatusSeeds.Create(seq, list);
.Pe
.PP
This example also shows how multiple paths for one command
can be given if it is not clear where they are to be found.
.SH "SEE ALSO"
.Tb SurfRandomGenerators(3)
.Tp RandomGenerators(3)
abstraction for sequences of random numbers or seeds
.Tp SeedStreams(3)
to be preferred alternative, if supported on the local system
.Tp SurfRandomGenerators(3)
good candidate for stretching seed values
.Te
.\" ---------------------------------------------------------------------------
.\" $Id: UnixStatusSeeds.3,v 1.1 2004/03/08 17:26:57 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: UnixStatusSeeds.3,v $
.\" Revision 1.1  2004/03/08 17:26:57  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
