.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-1995 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH Resources 3 "Last change: 24 September 1996" "Release 0.5" "Ulm's Oberon System"
.SH NAME
Resources \- cooperative handling of shared objects
.SH SYNOPSIS
.Pg
TYPE Resource = Disciplines.Object;
.sp 0.7
CONST terminated = 0;
CONST unreferenced = 1;
CONST communicationStopped = 2;
CONST communicationResumed = 3;
TYPE StateChange = SHORTINT; (* terminated..communicationResumed *)
.sp 0.7
TYPE Event = POINTER TO EventRec; (* notification of state changes *)
TYPE EventRec =
   RECORD
      (Events.EventRec)
      change: StateChange;
      resource: Resource;
   END;
.sp 0.7
TYPE Key = POINTER TO KeyRec;
TYPE KeyRec = RECORD (Objects.ObjectRec) END;
.sp 0.7
PROCEDURE TakeInterest(resource: Resource; VAR eventType: Events.EventType);
PROCEDURE Notify(resource: Resource; change: StateChange);
PROCEDURE DependsOn(dependant, resource: Resource);
PROCEDURE Attach(resource: Resource; VAR key: Key);
PROCEDURE Detach(resource: Resource; key: Key);
.sp 0.3
PROCEDURE Alive(resource: Resource) : BOOLEAN;
PROCEDURE Stopped(resource: Resource) : BOOLEAN;
PROCEDURE Terminated(resource: Resource) : BOOLEAN;
.Pe
.SH DESCRIPTION
.I Resources
offers a general interface for objects which are shared
and need some cooperative termination/cleanup handling.
The garbage collector alone is in many cases not sufficient
because
.IP \(bu
no termination handler gets invoked when the object
is collected and
.IP \(bu
the object wouldn't be collected at all if it is member
of bookkeeping data structures which would like
to get rid of otherwise unused objects
(light-weighted references).
.LP
Objects which follow through on \fIResources\fP
are in one of five states:
.Tb "stopped & unreferenced"
.Tp alive
This is the initial state which lasts as long
the object is responsive and remains referenced
(by heavy-weighted references).
Successor states are \fIunreferenced\fP,
\fIterminated\fP, and \fIstopped & alive\fP.
.Tp unreferenced
Unreferenced objects are still (at least locally)
responsive to allow for terminating operations.
All light-weighted references are to be removed to
allow the object to be collected.
Successor states are \fIterminated\fP and
\fIstopped & unreferenced\fP.
.Tp terminated
Terminated objects are no longer operational.
Note that in case of proxy objects termination does
not mean that the original object is no longer accessible.
This state has no successor states.
.Tp "stopped & alive"
Sometimes objects are not responsive for a limited
amount of time in distributed systems.
Stopped objects are still considered alive but are
unable to process operations.
Successor states are \fIalive\fP, \fIunreferenced\fP,
and \fIstopped & unreferenced\fP.
.Tp "stopped & unreferenced"
In some rare occasions it may happen that objects
are not responsive during the short time between
being \fIunreferenced\fP and \fIterminated\fP.
Successor states are \fIunreferenced\fP and \fIterminated\fP.
.Te
.LP
Explicit state changes are signaled by \fINotify\fP.
Valid values of \fIstate\fP are \fIterminated\fP,
\fIcommunicationStopped\fP, and \fIcommunicationResumed\fP.
While \fIterminated\fP is always an absolute state change,
the other two work relative, e.g.
\fIcommunicationStopped\fP causes a state change
from \fIalive\fP to \fIalive & stopped\fP, or
from \fIunreferenced\fP to \fIunreferenced & stopped\fP.
Note that state ``changes'' get silently ignored when
the current state remains constant
(e.g. notifying \fIcommunicationResumed\fP to
an object which is already \fIalive\fP),
or when they are illegal:
.IP \(bu
\fIunreferenced\fP is signaled implicitly by \fIDetach\fP only,
and
.IP \(bu
terminated objects do not accept any further state changes.
.LP
.I TakeInterest
allows each interested party to get notified about all
state changes (whether explicit or implicit) of
\fIresource\fP.
Note that \fIeventType\fP is even non-\fBNIL\fP if
\fIresource\fP is already terminated
and no further notifications are to be expected.
.LP
.I DependsOn
states that \fIdependant\fP depends entirely on \fIresource\fP.
This is usually the case for proxy or filter objects
where operations on \fIdependant\fP are delegated or
filtered to \fIresource\fP.
Only one call of \fIDependsOn\fP may be issued for each
\fIdependant\fP while several calls for one \fIresource\fP
are valid.
\fIDependsOn\fP calls \fIAttach\fP (see below) implicitly for
\fIresource\fP and detaches when \fIdependant\fP
becomes unreferenced or terminates.
All subsequent state changes
of \fIresource\fP will be propagated to \fIdependant\fP.
The dependency relation will be released when
\fIresource\fP terminates or \fIdependant\fP becomes
unreferenced or terminates.
Because of these implicit attachments, \fIresource\fP cannot
become unreferenced as long all its dependants neither
become unreferenced nor terminate.
.LP
\fIAttach\fP marks \fIresource\fP as being used
until \fIDetach\fP gets called.
To check for proper nesting of \fIAttach\fP and \fIDetach\fP,
a key is returned by \fIAttach\fP which must be passed
to the corresponding \fIDetach\fP.
Calls of \fIDetach\fP with an invalid key are silently ignored.
The last call of \fIDetach\fP causes a state change
to \fIunreferenced\fP and undoes a former call of
\fIDependsOn\fP (with \fIresource\fP in the role as \fIdependant\fP).
.LP
Following operations allow to check for the current state
of a resource.
They do not distinguish between alive and unreferenced
resources:
.Tb Terminated
.Tp Alive
returns \fBTRUE\fP if \fIresource\fP is not yet terminated
and ready for communication
(\fIalive\fP or \fIunreferenced\fP).
.Tp Stopped
returns \fBTRUE\fP if \fIresource\fP is currently not
responsive but not yet terminated
(\fIstopped & alive\fP or \fIstopped & unreferenced\fP).
.Tp Terminated
returns \fBTRUE\fP for terminated resources
(\fIterminated\fP).
.Te
.SH DIAGNOSTICS
.I Resources
does not generate any error events nor issues any assertions.
Invalid uses (e.g. unproper nesting of \fIAttach\fP
and \fIDetach\fP) are silently ignored.
.SH "SEE ALSO"
.Tb RemoteObjects(3)
.Tp Events(3)
handling of events
.Tp RemoteObjects(3)
support of \fIResources\fP for distributed objects
.Te
.\" ---------------------------------------------------------------------------
.\" $Id: Resources.3,v 1.5 1996/09/24 09:18:41 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: Resources.3,v $
.\" Revision 1.5  1996/09/24  09:18:41  borchert
.\" layout in SYNOPSIS changed
.\"
.\" Revision 1.4  1996/09/24  09:12:30  borchert
.\" some clarifications added
.\"
.\" Revision 1.3  1995/11/09  15:35:35  borchert
.\" State renamed to StateChange;
.\" type definition of Resource was missing
.\"
.\" Revision 1.2  1995/03/20  08:48:59  borchert
.\" Dependants are now allowed to terminate themselves
.\"
.\" ---------------------------------------------------------------------------
