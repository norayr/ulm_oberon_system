.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-1996 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH SubStreams 3 "Last change: 9 December 1996" "Release 0.5" "Ulm's Oberon System"
.SH NAME
SubStreams \- streams representing an interval of another stream
.SH SYNOPSIS
.Pg
CONST noSeek = 0; noLength = 1; errors = 2;
TYPE ErrorEvent = POINTER TO ErrorEventRec;
TYPE ErrorCode = SHORTINT;
TYPE ErrorEventRec =
   RECORD
      (Events.EventRec)
      errorcode: ErrorCode;
   END;
VAR error: Events.EventType;
VAR errormsg: ARRAY errors OF Events.Message;
.sp 0.7
TYPE OpenProc = PROCEDURE (VAR s: Streams.Stream;
                           base: Streams.Stream;
                           from, length: Streams.Count;
                           errors: RelatedEvents.Object) : BOOLEAN;
.sp 0.7
PROCEDURE Register(type: Services.Type; open: OpenProc);
.sp 0.7
PROCEDURE Open(VAR s: Streams.Stream;
               base: Streams.Stream;
               from, length: Streams.Count;
               errors: RelatedEvents.Object) : BOOLEAN;
.sp 0.7
PROCEDURE Supported(s: Streams.Stream) : BOOLEAN;
PROCEDURE DirectlySupported(s: Streams.Stream) : BOOLEAN;
.sp 0.7
PROCEDURE Join(VAR s: Streams.Stream; s1, s2: Streams.Stream;
               errors: RelatedEvents.Object) : BOOLEAN;
.Pe
.SH DESCRIPTION
.I SubStreams
allows to create streams which represent a
selected interval of another stream.
The substream implementation may be offered by the stream
implementation of the base stream itself, by a separate
service provider (see \fIServices(3)\fP), or defaults
to that of \fIMaps(3)\fP.
Specific substream implementations are expected to operate faster
than the default implementation by avoiding at least one level
of intermediate calls.
.PP
.I Open
creates a stream which represents the subrange
\fB[\fP\fIfrom\fP\fB..\fP\fIfrom\fP\fB+\fP\fIlength\fP\fB)\fP
of \fIbase\fP which will be mapped to
\fB[0..\fP\fIlength\fP\fB)\fP on \fIs\fP.
Note that \fIs\fP works in general as filter object of \fIbase\fP,
i.e. all other operations may be forwarded as well
(if supported by \fIForwarders(3)\fP).
.PP
\fISupported\fP allows to
check whether a stream may be passed as base stream to \fIOpen\fP.
\fIDirectlySupported\fP returns \fBTRUE\fP if
substreams are directly supported by the implementation of \fIs\fP,
i.e. \fISubStreams\fP needs not to create a stream on base of \fIMaps(3)\fP
for \fIs\fP as base stream.
.PP
.I Join
returns a stream which accesses \fIs1\fP and \fIs2\fP in
a concatenated way.
If \fIs1\fP and \fIs2\fP are neighbouring substreams of the
the same base stream, \fIJoin\fP will create a new substream
directly from the common base stream \(em otherwise
\fIs1\fP and \fIs2\fP will be tied together by \fIMaps(3)\fP.
.PP
.I Register
registers a specific implementation for the given type
(which must be an extension of \fIStreams.Stream\fP) and
all extensions thereof if not overridden by more
specific calls).
Note that the opening procedure needs not to call
\fIForwarders.Forward\fP \(em this will be done by \fISubStreams\fP.
.SH DIAGNOSTICS
Following errors may be generated by \fISubStreams\fP:
.Tb noLength
.Tp noSeek
This error is returned by \fIOpen\fP if the base stream
(in the default case) does not support seek and tell operations
of \fIStreams(3)\fP.
.Tp noLength
.I Join
was unable to determine the length of \fIs1\fP or \fIs2\fP.
.Te
All other error events are generated by the specific implementations
or \fIStreams(3)\fP.
.PP
.I Register
checks its parameter for validity in form of assertions.
.SH "SEE ALSO"
.Tb UnixMappedFiles(3)
.Tp Forwarders(3)
general support of filter objects
.Tp Maps(3)
more general stream mapping support
.Tp MemStreams(3)
stream implementation which is suitable as substream
implementation if the stream contents resides
in a contiguous buffer
.Tp Services(3)
type system (as first class objects)
.Tp Streams(3)
stream operations
.Te
.\" ---------------------------------------------------------------------------
.\" $Id: SubStreams.3,v 1.4 1996/12/09 10:38:04 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: SubStreams.3,v $
.\" Revision 1.4  1996/12/09  10:38:04  borchert
.\" typo fixed: s/MemFiles/MemStreams/
.\"
.\" Revision 1.3  1996/12/09  10:35:27  borchert
.\" Supported, DirectlySupported and Join added
.\"
.\" Revision 1.2  1996/12/06  19:24:23  borchert
.\" - headline changed
.\" - hint added that open if procedure does not need to call
.\"   Forwarders.Forward
.\" - reference to UnixMappedFiles added
.\"
.\" Revision 1.1  1996/12/04  15:44:47  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
