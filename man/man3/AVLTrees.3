.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-2004 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH AVLTrees 3 "Last change: 19 July 2004" "Release 0.5" "Ulm's Oberon System"
.SH NAME
AVLTrees \- height-balanced-binary trees for data-storage and retrieval
.SH SYNOPSIS
.Pg
CONST ascending = 0;
CONST descending = 1;
TYPE Order = Iterators.Mode (* ascending, descending *)
.sp 0.7
TYPE AVLTree = POINTER TO AVLTreeRec;
TYPE AVLTree = RECORD (Services.ObjectRec) END;
CONST keyUsed = 0
CONST noSuchKey = 1
CONST wrongKey = 2
CONST errorcodes = 3
.sp 0.7
TYPE ErrorCode = SHORTINT;
TYPE ErrorEvent = POINTER TO ErrorEventRec;
TYPE ErrorEventRec =
   RECORD
      (Events.EventRec)
      errorcode: ErrorCode;
      avlTree: AVLTree;
      object: Services.Object;
      key: Keys.Value;
   END;
.sp 0.7
VAR error: Events.EventType;
VAR errormsg: ARRAY errorcodes OF Events.Message;
.sp 0.7
PROCEDURE Create(VAR new: AVLTree; key: Keys.Key);
PROCEDURE GetKey(avlTree: AVLTree; VAR key: Keys.Key);
.sp 0.3
PROCEDURE Add(avlTree: AVLTree; object: Services.Object) : BOOLEAN
PROCEDURE Remove(avlTree: AVLTree; keyval: Keys.Value) : BOOLEAN;
PROCEDURE Get(avlTree: AVLTree; keyval: Keys.Value;
              VAR object: Services.Object) : BOOLEAN;
.sp 0.3
PROCEDURE Card(avlTree: AVLTree) : INTEGER;
PROCEDURE GetEntries(avlTree: AVLTree; order: Order;
                     from, to: Keys.Value; VAR it: Iterators.Iterator);
PROCEDURE Exists(avlTree: AVLTree; keyValue: Keys.Value) : BOOLEAN;
.Pe
.SH DESCRIPTION
.I AVLTrees
implements AVL trees (named after Adelson-Velsky and Landis, the
inventors).  Every AVL tree has an associated key with a total-order
relation (see \fIKeys(3)\fP) and allows to store and retrieve objects that
support that key. As AVL trees are sorted height-balanced binary trees,
all operations have a worst cases time of log(\fIN\fP) where \fIN\fP is
the number of objects stored in the AVL tree.
.PP
.I Create
creates an empty AVL tree.
All objects to be added to this AVL tree are expected to support
\fIkey\fP which defines the sorting order.
.PP
.I GetKey
returns the \fIkey\fP of the given AVL tree.
.PP
.I Add
adds \fIobject\fP to the AVL tree. This means, it can be retrieved by
the key components as defined by the key of the given AVL tree. There
must not be an object with the same value (of its key) in the AVL tree.
\fIAdd\fP returns \fBTRUE\fP if \fIobject\fP has been added
to \fIavlTree\fP, otherwise \fBFALSE\fP.
.PP
.I Remove
removes an object from the AVL tree specified by the given key.
A return value of \fITRUE\fP indicates success.
.PP
.I Get
returns the object with the given value (with respect to key),
if the AVL tree contains such an object. Otherwise
\fInoSuchKey\fP is raised. A return value of \fITRUE\fP indicates
success.
.PP
.I Card
returns the number of objects in the AVL tree.
.PP
.I GetEntries
returns an iterator of objects in AVL tree. Possible orders are ascending
and descending. The range of objects to be iterated can be narrowed by
\fIfrom\fP and \fIto\fP. If \fBNIL\fP is given for from (respectively
to), iteration starts at the first (respectively stops at the last)
object. Note, that iteration must not be carried on over changing
operations on the AVL tree.
.PP
.I Exists
returns \fBTRUE\fP, iff the AVL tree contains an object with the
given value (with respect to key).
.SH DIAGNOSTICS
Errors lead to events raised by \fIAVLTrees\fP or an underlying
implementation.
Following errors may be raised by \fIAVLTrees\fP:
.Tb noSuckKey
.Tp keyUsed
There is already an object with this value (with respect to key) in
the AVL tree.
.Tp noSuchKey
The AVL tree contains no object with this value (of its key).
.Tp wrongKey
A parameter does not support the needed key.
.Te
.SH "SEE ALSO"
.Tb Iterators(3)
.Tp Keys(3)
support of total-order relations
.Te
.SH AUTHOR
Sven Lutz
.\" ---------------------------------------------------------------------------
.\" $Id: AVLTrees.3,v 1.2 2004/07/19 08:44:08 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: AVLTrees.3,v $
.\" Revision 1.2  2004/07/19 08:44:08  borchert
.\" MaxHeight removed
.\"
.\" Revision 1.1  2000/03/29 14:31:57  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
