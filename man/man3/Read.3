.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-2004 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH Read 3 "Last change: 24 September 2004" "Release 0.5" "Ulm's Oberon System"
.SH NAME
Read \- formatted input
.SH SYNOPSIS
.Pg
PROCEDURE ShortInt(VAR shortint: SHORTINT);
PROCEDURE Int(VAR int: INTEGER);
PROCEDURE LongInt(VAR longint: LONGINT);
PROCEDURE Real(VAR real: REAL);
PROCEDURE LongReal(VAR longreal: LONGREAL);
PROCEDURE Char(VAR ch: CHAR);
PROCEDURE Byte(VAR byte: BYTE);
PROCEDURE Line(VAR line: ARRAY OF CHAR);
PROCEDURE Ln;
PROCEDURE String(VAR string: ARRAY OF CHAR);
PROCEDURE Field(VAR string: ARRAY OF CHAR) : BOOLEAN;
PROCEDURE ShortIntS(s: Streams.Stream; VAR shortint: SHORTINT);
PROCEDURE IntS(s: Streams.Stream; VAR int: INTEGER);
PROCEDURE LongIntS(s: Streams.Stream; VAR longint: LONGINT);
PROCEDURE RealS(s: Streams.Stream; VAR real: REAL);
PROCEDURE LongRealS(s: Streams.Stream; VAR longreal: LONGREAL);
PROCEDURE CharS(s: Streams.Stream; VAR ch: CHAR);
PROCEDURE ByteS(s: Streams.Stream; VAR byte: BYTE);
PROCEDURE LineS(s: Streams.Stream; VAR line: ARRAY OF CHAR);
PROCEDURE LnS(s: Streams.Stream);
PROCEDURE StringS(s: Streams.Stream; VAR string: ARRAY OF CHAR);
PROCEDURE FieldS(s: Streams.Stream; VAR string: ARRAY OF CHAR) : BOOLEAN;
.Pe
.SH DESCRIPTION
.I Read
implements formatted input for streams.
All procedures read either from the given stream
.I s
(procedures ending in "S")
or from
.I Streams.stdin
(all other procedures).
All termination characters (e.g. first non-digit after \fIRead.Int\fP)
are pushed back to the stream by \fIStreams.Back\fP.
The definition what constitutes white space, a line terminator,
or a field separator is provided by \fIStreamDisciplines(3)\fP.
.PP
.IR ShortInt ,
.IR Int ,
and
.IR LongInt
read integer values in decimal representation.
Integers must conform to following regular expression: "[+-][0-9]+".
Preceding white space is skipped.
.PP
.I Real
and
.I LongReal
read real values according to following syntax:
.Pg
"[+-]?[0-9]+(\.[0-9]*)?([eEdD][+-]?[0-9]+)?"
.Pe
Leading white space is skipped.
.I Char
and
.I Byte
read the next character or byte, respectively.
.PP
.I Line
reads a complete line (termination either by the line terminator
or by the end of stream).
The input line without terminating characters is copied to
.IR line .
.I Line
skips the rest of the line
if it does not fit into
.I line
and guarantees
.I line
to be 0X-terminated.
\fIStreams.stdin.count\fP (resp. \fIs.count\fP for \fILineS\fP)
equals the number of characters read including the line terminator.
Note that the termination character is not pushed back to the input stream.
.I Ln
skips input until the next line termination or end of stream.
Like \fILine\fP,
\fILn\fP does not push back the line termination character.
\fIStreams.stdin.count\fP (resp. \fIs.count\fP for \fILnS\fP)
equals the number of characters read including the line terminator.
.PP
.I String
skips input to the first non-white space character.
Further input is copied into
.I string
until
.I string
is filled or white space is read.
.I string
is guaranteed to be 0X-terminated and does not contain white space characters.
.I Streams.stdin.count
(resp. \fIs.count\fP)
equals the number of characters copied into
.IR string .
.PP
.I Field
returns the next input field into \fIstring\fP.
Following the UNIX convention of small databases,
records are separated by line terminators and
fields are delimited either by field separators or line terminators.
In normal case, each field separator separates two
adjacent fields which allows possibly empty fields.
However, field separators that are also whitespace
are skipped at the beginning of a field.
The resulting \fIstring\fP is trimmed in respect to
surrounding white space.
The terminating field separator is consumed.
.I Field
returns \fBFALSE\fP if there are no more fields on the line,
i.e. line terminators must be skipped explicitely.
The resulting count (\fIStreams.stdin.count\fP resp.
\fIs.count\fP) equals the number of characters read.
.I Field
skips the rest of the field if it does not fit into \fIstring\fP.
.SH DIAGNOSTICS
If not defined otherwise
.I Streams.stdin.count
(resp. \fIs.count\fP) equals 1 on success and 0 on failure.
.SH EXAMPLE
Following code snippet shows how to parse small databases:
.Pg
LOOP
   WHILE Read.FieldS(in, field) DO
      (* process field *)
   END;
   IF in.eof OR in.error THEN EXIT END;
   Read.LnS(in);
   IF in.count = 0 THEN EXIT END;
END;
.Pe
.SH "SEE ALSO"
.Tb StreamDisciplines(3)
.Tp Reals(3)
real conversions
.Tp StreamDisciplines(3)
line terminator, white space and field separators
.Tp Streams(3)
stream operations
.Tp Write(3)
formatted output
.Te
.SH BUGS
.I Streams
does not support
.I Streams.Back
for unbuffered streams.
Thus termination characters are lost by reading from streams
with buffering mode
.IR Streams.nobuf .
This, for example, causes \fIField\fP and \fIFieldS\fP to consume
the entire line terminator that terminates the last field on a line.
.\" ---------------------------------------------------------------------------
.\" $Id: Read.3,v 1.7 2004/09/24 16:41:52 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: Read.3,v $
.\" Revision 1.7  2004/09/24 16:41:52  borchert
.\" - semantics of Field/FieldS changed
.\" - s.count has new semantics for Line/LineS, Ln/LnS, and Field/FieldS
.\"
.\" Revision 1.6  2003/07/10 09:04:01  borchert
.\" typos fixed
.\"
.\" Revision 1.5  1996/09/16 16:50:56  borchert
.\" formatting changed
.\"
.\" Revision 1.4  91/11/18  08:13:37  borchert
.\" Field & FieldS added
.\" Read depends now from StreamDisciplines
.\" 
.\" Revision 1.3  1991/01/05  12:40:07  borchert
.\" reference to Write(3) added
.\"
.\" Revision 1.2  91/01/05  12:26:52  borchert
.\" description of Ln enhanced
.\" 
.\" Revision 1.1  90/08/31  17:02:18  borchert
.\" Initial revision
.\" 
.\" ---------------------------------------------------------------------------
