.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-1995 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH Storage 3 "Last change: 10 July 2003" "Release 0.5" "Ulm's Oberon System"
.SH NAME
Storage \- storage allocating interface for the compiler
.SH SYNOPSIS
.Pg
TYPE Address = Types.UntracedAddress;
TYPE Size = Types.Size;
.sp 0.3
TYPE Status = POINTER TO StatusRec;
TYPE StatusRec =
   RECORD
      (Objects.ObjectRec)
      collection: INTEGER;
      intensity: INTEGER;
      allocated: Size;
      consumed: Size;
      chunksize: Size;
   END;
.sp 0.3
TYPE AllocProc = PROCEDURE(VAR ptr: Address; tag: Address; size: Size);
TYPE AllocStackProc = PROCEDURE(VAR ptr: Address; size: Size; mode: SHORTINT);
TYPE GarbageCollectionProc = PROCEDURE;
TYPE EnableProc = PROCEDURE;
TYPE DisableProc = PROCEDURE;
TYPE GetStatusProc = PROCEDURE (VAR status: Status);
TYPE IntensityProc = PROCEDURE (offset: INTEGER) : INTEGER;
TYPE ChunkSizeProc = PROCEDURE (size: Size) : Size;
TYPE Interface =
   RECORD
      alloc: AllocProc;
      allocStack: AllocStackProc;
      garbageCollection: GarbageCollectionProc;
      enable: EnableProc;
      disable: DisableProc;
      intensity: IntensityProc;
      getStatus: GetStatusProc;
      chunkSize: ChunkSizeProc;
   END;
.sp 0.7
VAR next: Address; left: Size;
.sp 0.7
TYPE Event = POINTER TO EventRec;
TYPE EventRec =
   RECORD
      (Events.EventRec)
      errors: RelatedEvents.Object;
   END;
VAR outOfMemory: Events.EventType;
.sp 0.7
PROCEDURE AllocateWithTag(VAR ptr: Address; tag: Address; size: Size);
PROCEDURE AllocateStack(VAR ptr: Address; size: Size; mode: SHORTINT);
.sp 0.7
PROCEDURE GarbageCollection;
PROCEDURE EnableCollection;
PROCEDURE DisableCollection;
.sp 0.7
PROCEDURE Intensity(offset: INTEGER) : INTEGER;
PROCEDURE GetStatus(VAR status: Status);
PROCEDURE ChunkSize(size: Size) : Size;
.sp 0.7
PROCEDURE Init(if: Interface);
.Pe
.SH DESCRIPTION
.I Storage
provides a system-independent storage allocating interface for
the compiler and should not be used otherwise except as noted below.
There may be different implementations for this interface,
e.g. with or without garbage collector.
.PP
.I Init
is to be called during startup by the module which is
responsible for storage allocation.
All interface procedures have to follow the semantics described below.
.PP
The variables \fInext\fP and \fIleft\fP define an interval
\fB[\fP\fInext\fP, \fInext\fP\fB+\fP\fIleft\fP\fB)\fP
which may be consumed by the inline code of \fBNEW\fP without
calling any of the allocation procedures.
The runtime start sets up an initial region which should be
sufficient to satisfy the memory requests in the early
initialization stage.
The module which calls \fIInit\fP is free to modify \fInext\fP
and \fIleft\fP.
For all other modules these variables are to be considered read-only.
Stacks must not be allocated by use of this region,
and consequently coroutines must not be created during the
early startup phase, i.e. before the storage allocator is initialized.
.PP
.I AllocateWithTag
is to be called by the inline code of \fBNEW\fP and \fBSYSTEM.NEW\fP
if the interval marked by \fInext\fP and \fIleft\fP is not sufficient.
\fIsize\fP specifies the total number of bytes needed to store
the record or array and the tag field and, if necessary, the dummy tag.
The type tag is specified by \fItag\fP which may be zero in
case of \fBSYSTEM.NEW\fP.
In this case a dummy tag record will be put behind the allocated area.
The returned \fIptr\fP points behind the stored type tag.
.PP
.I AllocateStack
allocates a redzone-protected stack area for a coroutine with the given
growing mode. Fixed redzone-protected regions may be requested by
giving mode \fB0\fP, but \fIAllocateStack\fP does not expect that
such a region will become a coroutine stack.
A negative value of \fImode\fP specifies a backward growing stack.
A positive value is to be given for forward growing stacks.
On return, \fIptr\fP points to the begin of the stack.
For backward growing stacks this is the end address of the allocated
region.
The calling procedure or inline code is responsible for adjusting \fIptr\fP
and storing a tag reference to \fICoroutines.tag\fP.
.PP
A call of \fIGarbageCollection\fP requests an immediate run of a
garbage collection. Before the garbage collector is invoked, the
event \fIProcess.startOfGarbageCollection\fP is raised, while
\fIProcess.endOfGarbageCollection\fP signals the end of a collection.
Normally, there is no need to call \fIGarbageCollection\fP, because
the storage management is responsible for activating the garbage
collector from time to time, but every module is free to do this, too.
.PP
.I GarbageCollection
will have no effect, if there was a call of \fIDisableCollection\fP
earlier. A single call of \fIDisableCollection\fP guarantees that
the garbage collector is switched off. More than one calls in a row
make it necessary that \fIEnableCollection\fP must be called as many
times as \fIDisableCollection\fP before to switch on garbage collection.
The status record component \fIcollection\fP can be interpreted as the
number of times \fIEnableCollection\fP must be called to enable a
garbage collection.
At the beginning (i.e. after the storage management is initialized),
garbage collection is enabled and \fIcollection\fP is \fB0\fP.
.PP
The status record component \fIintensity\fP is an indicator for the current
garbage collection frequency. This indicator can be interpreted as a clue
to the amount of storage which is allowed to be consumed between two
garbage collections. By default, when the intensity indicator is set to
\fB0\fP, that limit is equal to the current size of new memory chunks.
.I Intensity
allows to change the frequency of garbage collections by adding \fIoffset\fP
to the current frequency indicator.
If \fIoffset\fP is positive, the current collection frequency is decreased,
while a negative value increases it. Please note, that \fIIntensity(-1)\fP
causes the current garbage collection frequency to be doubled and
\fIIntensity(1)\fP halves it!
\fIIntensity\fP always returns the new frequency indicator. The following
example sets the current intensity indicator to default value \fB0\fP:
.Pg
.sp 0.3
VAR defaultFrequency: INTEGER;
.sp 0.3
(* ... *)
.sp 0.3
defaultFrequency := Storage.Intensity(-Storage.Intensity(0));
.sp 0.3
.Pe
.PP
.I GetStatus
returns a pointer to a record which contains information
about the current storage status. A positive value of component
\fIcollection\fP signals, that garbage collection is currently disabled.
Garbage collection is enabled when \fIcollection\fP is \fB0\fP.
The current garbage collection intensity indicator is returned in
\fIintensity\fP. The \fIchunksize\fP component contains the size of new
memory regions which will be requested from the operating system when more
memory is needed. The value returned in \fIallocated\fP represents the
total number of bytes which are currently under control of the storage
allocator, while \fIconsumed\fP contains the number of bytes which are
currently in use (\fIconsumed\fP<=\fIallocated\fP).
.PP
.I ChunkSize
allows to change the current chunk size. The chunk size is the size
of new memory chunks which the storage allocator requests from the system.
There may be several system-dependent requirements which the chunk size has
to meet, such as concerning address space utilization or the system's
page size:
\fIChunkSize\fP rounds \fIsize\fP to the next higher possible value, if
the given parameter can not be used as new chunk size
(generally, it should be a good idea when \fIsize\fP is a power of 2 and
greater than the page size).
As result, the computed value is returned.
In case of \fIsize\fP = \fB0\fP, \fIChunkSize\fP only returns the
current chunk size and no change is made.
.br
Especially, when allocating objects with sizes greater than
the page size, changing the chunk size can reduce the amount of memory
needed from the operating system and increase performance.
Using \fIChunkSize\fP normally effects the current collection
frequency, too, because it is not only dependent on the intensity indicator but
also on the chunk size (\fIIntensity(0)\fP is performed).
.SH DIAGNOSTICS
.I AllocateWithTag
and
.I AllocateStack
always return valid pointers which need not to be checked against \fBNIL\fP.
The storage allocator is responsible to raise the event
\fIoutOfMemory\fP short before it runs out of memory.
The \fIerrors\fP component of \fIStorage.Event\fP contains,
if not equal to \fBNIL\fP, a queue of error events which were
responsible for the ``out of memory'' event.
The remaining memory should be sufficient to allow some event
handling and a controlled termination.
The storage allocator is expected to terminate the process immediately
if, after raising \fIoutOfMemory\fP, the last memory resources get consumed.
.PP
Calls to all interface procedures before \fIInit\fP
lead to immediate program termination.
.SH "SEE ALSO"
.Tb UntaggedStorage(3)
.Tp Coroutines(3)
exports \fICoroutines.tag\fP which marks coroutines.
.Tp Process(3)
exports storage message events
.Tp SysStorage(3)
storage allocator with copying garbage collection.
.Tp UntaggedStorage(3)
alternative interface for storage unaffected by garbage collection
.Te
.SH ADAPTATION
Hansj\*org N\*agele, University of Ulm
.\" ---------------------------------------------------------------------------
.\" $Id: Storage.3,v 1.5 2003/07/10 09:21:45 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: Storage.3,v $
.\" Revision 1.5  2003/07/10 09:21:45  borchert
.\" typo fixed
.\"
.\" Revision 1.4  1995/11/17 13:23:38  naegele
.\" interface procedure SetChunkSize (size: Size) : BOOLEAN
.\" changed to          ChunkSize (size: Size) : Size
.\"
.\" Revision 1.3  1995/11/09  14:50:41  borchert
.\" some minor changes (for the HTML conversion)
.\"
.\" Revision 1.2  1994/07/01  09:03:32  borchert
.\" adaptation to GC by Hansjoerg Naegele
.\"
.\" Revision 1.1  1993/06/10  12:42:29  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
