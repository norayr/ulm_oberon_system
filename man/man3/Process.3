.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-2005 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH Process 3 "Last change: 9 August 2006" "Release 0.5" "Ulm's Oberon System"
.SH NAME
Process \- suspension and termination of the current process
.SH SYNOPSIS
.Pg
TYPE Name = ARRAY 128 OF CHAR;
VAR name: Name;
VAR id: Name;
VAR host: Name;
.sp 0.3
TYPE ExitCode = INTEGER;
VAR indicateSuccess: ExitCode;
VAR indicateFailure: ExitCode;
.sp 0.3
TYPE ExitEvent = POINTER TO ExitEventRec;
TYPE ExitEventRec =
   RECORD
      (Events.EventRec)
      exitcode: ExitCode;
   END;
VAR softTermination: Events.EventType;
VAR termination: Events.EventType;
VAR abort: Events.EventType;
VAR startOfGarbageCollection: Events.EventType;
VAR endOfGarbageCollection: Events.EventType;
.sp 0.3
TYPE ExitProc = PROCEDURE (code: ExitCode);
TYPE AbortProc = PROCEDURE;
TYPE PauseProc = PROCEDURE;
TYPE Interface = POINTER TO InterfaceRec;
TYPE InterfaceRec =
   RECORD
      exit: ExitProc;
      abort: AbortProc;
      pause: PauseProc;
   END;
.sp 0.7
PROCEDURE SetHandlers(if: Interface);
.sp 0.3
PROCEDURE TerminateSoftly;
PROCEDURE Terminate;
PROCEDURE Abort;
PROCEDURE Exit(code: ExitCode);
PROCEDURE Pause;
.Pe
.SH DESCRIPTION
.I Process
interfaces the system-dependent calls
which allow to suspend or to terminate the current process.
Calls to the standard procedure \fBHALT\fP
are converted to calls of \fIProcess.Exit\fP
by the Oberon compiler.
Further,
.I Process
causes \fIEvents(3)\fP to call \fIAbort\fP in case
of abortions.
.LP
Three string variables are provided that are possibly initialized
by more system-dependant modules. These strings can be empty in
case they are unknown or not yet initialized.
.Tb name
.Tp name
contains a user-readable name of the current process.
The process name is suitable for error messages.
.Tp id
is similar but attempts to be a more formal identification
of the current process.
.Tp host
a string that identifies our host.
.Te
.LP
\fIExit\fP raises an event of type \fItermination\fP
and causes the current process to be terminated.
The exit code is passed to the invocation environment.
\fITerminate\fP calls \fIExit\fP with an exit code
of \fIindicateSuccess\fP.
\fIProcess\fP exits immediately without event handling
in case of recursive calls of \fIExit\fP or \fIAbort\fP.
.LP
\fITerminateSoftly\fP raises an event of type \fIsoftTermination\fP
that asks all running tasks to terminate. In comparison
to \fITerminate\fP, this method gives all tasks the opportunity
to terminate gracefully. However, this termination succeeds only
if all tasks honor directly or indirectly a \fIsoftTermination\fP
event.
.LP
\fIAbort\fP raises an event of type \fIabort\fP
and causes the current process to be aborted.
This is suitable in case of serious programming errors
where post mortem debugging could be of interest.
.LP
\fIPause\fP suspends the execution of the current process.
Some system dependent events which are raised from
external sources are able to resume suspended processes.
.LP
\fISetHandlers\fP is to be called during initialization time
by a module which implements these operations for
the given environment.
The default interface of \fIProcess\fP
consists of procedures with endless loops.
.LP
Additionally, \fIProcess\fP offers the event types
\fIstartOfGarbageCollection\fP and \fIendOfGarbageCollection\fP
which may be used by garbage collectors to indicate start
and end of their work (see \fIStorage(3)\fP).
.SH "SEE ALSO"
.Tb UnixProcess(3)
.Tp Events(3)
event handling
.Tp Storage(3)
storage allocating interface
.Tp UnixProcess(3)
initializes \fIProcess(3)\fP during startup
.Te
.\" ---------------------------------------------------------------------------
.\" $Id: Process.3,v 1.4 2006/08/09 15:59:23 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: Process.3,v $
.\" Revision 1.4  2006/08/09 15:59:23  borchert
.\" id and host added
.\"
.\" Revision 1.3  2004/06/03 08:17:15  borchert
.\" softTermination and TerminateSoftly added
.\"
.\" Revision 1.2  1995/12/30 20:09:18  borchert
.\" event types startOfGarbageCollection and endOfGarbageCollection added
.\"
.\" Revision 1.1  92/03/25  09:43:25  borchert
.\" Initial revision
.\" 
.\" ---------------------------------------------------------------------------
