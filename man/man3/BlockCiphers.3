.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-1995 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH BlockCiphers 3 "Last change: 17 September 1996" "Release 0.5" "Ulm's Oberon System"
.SH NAME
BlockCiphers \- general abstraction for block ciphers
.SH SYNOPSIS
.Pg
TYPE Cipher = POINTER TO CipherRec;
TYPE CipherRec = RECORD (Ciphers.CipherRec) END;
PROCEDURE Init (key: Cipher; if: Ciphers.Interface; 
               inLength, outLength: INTEGER);
PROCEDURE GetInLength (key: Cipher) : INTEGER;
PROCEDURE GetOutLength (key: Cipher) : INTEGER;
PROCEDURE EncryptBlock (in: Streams.Stream; key: Cipher;
                       out: Streams.Stream) : BOOLEAN;
PROCEDURE DecryptBlock (in: Streams.Stream; key: Cipher;
                       out: Streams.Stream) : BOOLEAN;
.Pe
.SH DESCRIPTION
.I BlockCiphers 
provides an abstraction for the use of block ciphers. Block
ciphers do not operate on whole streams but rather on blocks of a
defined length.
.PP
\fIInit\fP connects the block cipher \fIkey\fP with the interface \fIif\fP
(see \fICiphers(3)\fP). Besides it sets the corresponding input and output
block lengths for \fIkey\fP which must be positive.
.PP
\fIGetInLength\fP returns the length of an input block for the cipher
\fIkey\fP. \fIGetOutLength\fP does the same for the output block.
.PP
\fIEncryptBlock\fP and \fIDecryptBlock\fP work much the same like 
\fICiphers.Encrypt\fP and \fICiphers.Decrypt\fP but instead of dealing
with whole streams these procedures operate only on a single block.
.SH "SEE ALSO"
.Tb AsymmetricCiphers(3)
.Tp AsymmetricCiphers(3)
abstraction for the use of public key ciphers
.Tp CBCMode(3)
a special mode of operation for block ciphers
.Tp Ciphers(3)
abstraction for general ciphers and crypto systems
.Tp StreamCiphers(3)
abstraction for the use of stream ciphers
.Te
.SH AUTHOR
Michael Szczuka, University of Ulm
.\" ---------------------------------------------------------------------------
.\" $Id: BlockCiphers.3,v 1.2 1996/09/17 08:08:55 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: BlockCiphers.3,v $
.\" Revision 1.2  1996/09/17  08:08:55  borchert
.\" module reference fixed for man3tohtml
.\"
.\" Revision 1.1  1995/11/14  18:03:32  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
