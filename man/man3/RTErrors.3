'\" t
.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-1995 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH RTErrors 3 "Last change: 16 September 1996" "Release 0.5" "Ulm's Oberon System"
.SH NAME
RTErrors \- handling of runtime errors
.SH SYNOPSIS
.Pg
CONST case = 1;         (* attempt to find case failed *)
CONST return = 2;       (* function does not return any value *)
CONST range = 3;        (* index out of range *)
CONST typeguard = 4;    (* failure of type guard *)
CONST conversion = 5;   (* conversion error *)
CONST crend = 6;        (* RETURN of coroutine *)
CONST assertion = 7;    (* assertion failed *)
CONST errorcodes = 8;
.sp 0.7
TYPE Name = ARRAY 32 OF CHAR;
TYPE Event = POINTER TO EventRec;
TYPE EventRec =
   RECORD
      (Events.EventRec)
      errorcode: INTEGER; (* one of case..assertion *)
      val,                (* defined for range and conversion *)
      limit: LONGINT;     (* defined for range *)
      (* valid only if errorcode # crend: *)
      moduleName,
      procedureName: Name;
      lineNumber: LONGINT;
   END;
.sp 0.3
VAR error: ARRAY errorcodes OF Events.EventType;
VAR errors: Events.EventType; (* catches all runtime errors *)
VAR errormsg: ARRAY errorcodes OF Events.Message;
.sp 0.7
.ne 2v
PROCEDURE CaseError(moduleName, procedureName: ARRAY OF CHAR;
                    lineNumber: LONGINT);
.sp 0.2
.ne 2v
PROCEDURE NoReturn(moduleName, procedureName: ARRAY OF CHAR;
                   lineNumber: LONGINT);
.sp 0.2
.ne 2v
PROCEDURE TypeGuardFailure(moduleName, procedureName: ARRAY OF CHAR;
                           lineNumber: LONGINT);
.sp 0.2
.ne 3v
PROCEDURE RangeError(limit: LONGINT; val: LONGINT;
                     moduleName, procedureName: ARRAY OF CHAR;
                     lineNumber: LONGINT);
.sp 0.2
.ne 3v
PROCEDURE ConversionError(val: LONGINT;
                          moduleName, procedureName: ARRAY OF CHAR;
                          lineNumber: LONGINT);
.sp 0.2
PROCEDURE CoroutineReturn;
.sp 0.2
.ne 3v
PROCEDURE FailedAssertion(code: INTEGER;
                          moduleName, procedureName: ARRAY OF CHAR;
                          lineNumber: LONGINT);
.Pe
.SH DESCRIPTION
.I RTErrors
serves as interface between the runtime system and
.I Events(3)
and thus allows customized runtime error handling.
.LP
All procedures raise \fIerrors\fP and \fIerror\fP[\fIcode\fP].
The default reaction for these events is \fIEvents.default\fP
(program termination with core dump).
Handlers of runtime errors must not return.
.LP
.TS
box;
l l l
l l l
lfI lfI l.
error	procedure called	description
code	by runtime system	\^
_
case	CaseError	attempt to find case failed
return	NoReturn	function does not return any value
range	RangeError	array index out of bounds
typeguard	TypeGuardFailure	type guard failure
conversion	ConversionError	\fBSHORT\fP(\fIval\fP) failed
crend	CoroutineReturn	coroutine terminates with \fBRETURN\fP
assertion	FailedAssertion	\fBASSERT\fP(\fIassertion\fP) failed
.TE
.SH "SEE ALSO"
\fIEvents(3)\fP
.\" ---------------------------------------------------------------------------
.\" $Id: RTErrors.3,v 1.6 1996/09/16 16:51:17 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: RTErrors.3,v $
.\" Revision 1.6  1996/09/16  16:51:17  borchert
.\" run time error entries extended with parameters which specify
.\" module, procedure and line number of the error position;
.\" FailedAssertion added
.\"
.\" Revision 1.5  1992/07/31  14:47:18  borchert
.\" range checks are now implemented
.\"
.\" Revision 1.4  1992/03/17  07:33:59  borchert
.\" errormsg added
.\"
.\" Revision 1.3  1991/11/14  08:18:15  borchert
.\" event types are now defined by RTErrors (instead of SysEvents)
.\"
.\" Revision 1.2  1991/06/21  15:29:56  borchert
.\" table now in box
.\"
.\" Revision 1.1  90/08/31  17:02:17  borchert
.\" Initial revision
.\" 
.\" ---------------------------------------------------------------------------
