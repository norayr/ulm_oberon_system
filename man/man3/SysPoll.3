.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-2005 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH SysPoll 3 "Last change: 25 August 2005" "Release 0.5" "Ulm's Oberon System"
.SH NAME
SysPoll \- synchronous I/O multiplexing
.SH SYNOPSIS
.Pg
(* bits for events and revents *)
CONST pollIn =       1H; (* fd is readable *)
CONST pollPri =      2H; (* high priority info at fd *)
CONST pollOut =      4H; (* fd is writable (won't block) *)
CONST pollRdNorm =  40H; (* normal data is readable *)
CONST pollWrNorm = pollOut;
CONST pollRdBand =  80H; (* out-of-band data is readable *)
CONST pollWrBand = 100H; (* out-of-band data is writable *)
CONST pollNorm = pollRdNorm;
CONST pollErr =      8H; (* fd has error condition *)
CONST pollHup =     10H; (* fd has been hung up on *)
CONST pollNval =    20H; (* invalid pollfd entry *)
.sp 0.7
(* struct pollfd of Solaris 2, see <sys/poll.h> *)
TYPE Flags = SYSTEM.INT16;
TYPE Entry = POINTER TO EntryRec;
TYPE EntryRec =
   RECORD
      (Objects.ObjectRec)
      fd: SysTypes.File;
      events: Flags;
      revents: Flags;
   END;
.sp 0.3
FdSet = POINTER TO FdSetRec;
FdSetRec = RECORD (Objects.ObjectRec) END;
.sp 0.7
PROCEDURE ConvertTimeout(timeout: SysTime.TimeVal) : LONGINT;
.sp 0.7
PROCEDURE CreateSet(VAR fdset: FdSet);
PROCEDURE Incl(fdset: FdSet; entry: Entry);
PROCEDURE Card(fdset: FdSet) : INTEGER;
PROCEDURE ExamineEntries(fdset: FdSet);
PROCEDURE Next(fdset: FdSet; VAR entry: Entry) : BOOLEAN;
.sp 0.7
PROCEDURE Poll(fdset: FdSet; timeout: LONGINT;
               VAR ready: INTEGER;
               errors: RelatedEvents.Object;
               retry: BOOLEAN;
               VAR interrupted: BOOLEAN) : BOOLEAN;
.Pe
.SH DESCRIPTION
.I SysPoll
interfaces the \fIpoll(2)\fP system call.
This interface is significantly more efficient and more flexible
than the older interface of \fISysSelect(3)\fP:
.IP \(bu
The size of a set depends only on the number of file descriptors
that are actually included in the set.
.IP \(bu
Newer UNIX variants like Solaris or Linux do no longer provide a native
select system call. On these systems \fISysSelect(3)\fP is required
to convert the file descriptor set data structures into the new
format which consumes considerable time.
.PP
.I ConvertTimeout
allows to convert a tuple consisting of seconds and micro seconds
(\fISysTime.TimeVal\fP) into milliseconds. This is
the scale that is expected for the timeout value of \fIPoll\fP.
.PP
File descriptor sets for \fIPoll\fP are actually linear lists
of tuples consisting of a file descriptor, a set of conditions on
which \fIPoll\fP should wait for to become true (field \fIevents\fP)
and a set that is set on return of \fIPoll\fP to those conditions
that are actually true (field \fIrevents\fP).
.I CreateSet
creates a new list of file descriptors that is initially empty.
.I Incl
adds the given entry to the list.
.I Card
returns the number of entries within \fIfdset\fP.
.I ExamineEntries
and
.I Next
allow to iterate through a linear list of entries.
.PP
.I Poll
waits up to \fItimeout\fP seconds until one of the conditions
within \fIfdset\fP is true. If \fItimeout\fP is 0, \fIPoll\fP
returns immediately. In case of -1, \fIPoll\fP blocks until
one of the conditions is true or the process is interrupted.
In the latter case, \fIinterrupted\fP is set to \fBTRUE\fP
and the call is automatically repeated if \fIretry\fP is \fBTRUE\fP.
In case of a successful return, \fIready\fP is set to the number
of file descriptors in \fIfdset\fP for which at least one condition
is true.
.SH DIAGNOSTICS
In case of errors,
\fIPoll\fP returns \fBFALSE\fP and raises events of \fISysErrors(3)\fP.
The \fIerrors\fP parameter is passed to \fISysErrors.Raise\fP.
.LP
The poll system call may be interrupted.
Usually (if \fIretry\fP = \fBFALSE\fP),
this causes the appropriate error event to be raised
(error code \fISysErrors.intr\fP) and the system call to be aborted.
However, if \fIretry\fP is \fBTRUE\fP,
the system call will be repeated until no interrupt occurs.
\fIinterrupt\fP indicates in both cases whether interrupts
occurred or not.
.SH "SEE ALSO"
.Tb UnixFileConditions(3)
.Tp poll(2)
underlying system call
.Tp SysErrors(3)
error handling
.Tp SysIO(3)
read and write operations
.Tp SysSelect(3)
deprecated interface for synchronous I/O multiplexing
.Tp SysSockets(3)
creation and preparation of sockets
.Tp UnixFileConditions(3)
conditions which base on \fISysPoll\fP
.Te
.\" ---------------------------------------------------------------------------
.\" $Id: SysPoll.3,v 1.1 2005/08/25 15:54:44 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: SysPoll.3,v $
.\" Revision 1.1  2005/08/25 15:54:44  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
