.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-2004 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH Proxies 3 "Last change: 22 September 2004" "Release 0.5" "Ulm's Oberon System"
.SH NAME
Proxies \- support of proxies for local objects
.SH SYNOPSIS
.Pg
TYPE CreateProxyProc = PROCEDURE (VAR object: Services.Object;
                                  orig: Services.Object);
TYPE InitProxyProc = PROCEDURE (object: Services.Object;
                                orig: Services.Object);
TYPE Interface = POINTER TO InterfaceRec;
TYPE InterfaceRec =
      RECORD
         (Objects.ObjectRec)
         createProxy: CreateProxyProc;
         initProxy: InitProxyProc;
      END;
.sp 0.7
PROCEDURE Register(type: Services.Type; if: Interface);
PROCEDURE Supported(type: Services.Type) : BOOLEAN;
PROCEDURE GetSupportedBaseType(type: Services.Type;
                               VAR baseType: Services.Type);
.sp 0.7
PROCEDURE CreateProxy(VAR proxy: Services.Object;
                      orig: Services.Object);
.sp 0.7
PROCEDURE CreateUninitializedProxy(VAR proxy: Services.Object;
                                   orig: Services.Object);
PROCEDURE InitializeAllInterfacesUpTo(proxy: Services.Object;
                                      type: Services.Type);
PROCEDURE InitializeAllInterfacesBeyond(proxy: Services.Object;
                                        type: Services.Type);
.sp 0.7
PROCEDURE GetOrig(proxy: Services.Object; VAR orig: Services.Object);
.Pe
.SH DESCRIPTION
A proxy object delegates all operations to another object, possibly after
some filtering has taken place. Most proxy implementations just take care
of one primary abstraction (i.e. an abstraction that is based upon the
static type).  A framework is needed to support extended abstractions.
The delegation of secondary abstractions (i.e. abstractions based on
dynamic type extensions as provided by \fIDisciplines(3)\fP) is supported
by \fIForwarders(3)\fP. A framework for delegations to remote objects is
provided by \fIRemoteObjects(3)\fP.  This module provides the framework
that supports the delegation of primary abstractions to local objects.
.PP
Assume a base type \fIT\fP, an extension of \fIT\fP named \fIT1\fP,
which itself has been extended by \fIT2\fP. All of them come with their
own set of operations. A proxy implementation for \fIT1\fP is obviously
aware of the operations of \fIT\fP. Hence, it can implement easily all
delegating operations for \fIT\fP and \fIT1\fP. However, it cannot foresee
the extension \fIT2\fP. \fIProxies\fP allows proxy implementations to
focus on just one abstraction layer (e.g. that of \fIT1\fP), assuming
that another proxy module takes care of the base type (e.g. \fIT\fP)
and other modules of the possible extensions (e.g. \fIT2\fP). Each proxy
module has to provide two interface procedures to \fIRegister\fP:
.Is ""
.If createProxy "\fBVAR\fP \fIobject\fP: \fIServices.Object\fP; \fIorig\fP: \fIServices.Object\fP"
creates but does not initialize a proxy object of the associated
type extension. \fIServices.Init\fP, however, needs to be called
for \fIobject\fP. The original object is provided through \fIorig\fP.
.If initProxy "\fIobject\fP: \fIServices.Object\fP; \fIorig\fP: \fIServices.Object\fP"
initialize \fIobject\fP at the associated abstraction layer.
All interface procedures have simply to delegate the operation to the
original object \fIorig\fP.  Initializations according to the base
types have already been performed.
.Ef
.PP
Assume we have proxy modules \fIProxyT\fP, \fIProxyT1\fP, and
\fIProxyT2\fP. Then let us have a \fIFilterT1\fP module that somehow
filters all operations on \fIT1\fP objects at the layer of \fIT1\fP
(not touching the operations at the \fIT\fP layer).  Now, \fIFilterT1\fP
just needs to take care of the \fIT1\fP operations.  If the original
object is an extension of \fIT2\fP, \fIProxyT\fP and \fIProxyT2\fP will
do the rest. \fIProxyT1\fP will be left out as this part is taken by
\fIFilterT1\fP.
.PP
Note that none of the proxy modules can rely on an own static
type extension even if they may have to create objects through the
\fIcreateProxy\fP interface procedure. However, their delegating
implementations have to work for anything that extends the type they
are associated with. Hence, they will have to be based on disciplines
(see \fIDisciplines(3)\fP) instead of static type extensions if they
need some bookkeeping. The link to the original target object does
not need to be maintained, however, as \fIGetOrig\fP allows to
retrieve it.
.PP
.I Supported
tells if a given type has proxy support and
.I GetSupportedBaseType
returns the associated base type.
Assume in the example above that the abstraction \fIT2\fP is implemented
by an extension \fIT3\fP. Then, if \fIProxyT\fP, \fIProxyT1\fP,
and \fIProxyT2\fP registered themselves for \fIT\fP, \fIT1\fP,
and \fIT2\fP, respectively, \fISupported\fP would return \fBTRUE\fP
for \fIT3\fP and \fIGetSupportedBaseType\fP would return \fIT2\fP.
.PP
.I CreateProxy
creates a proxy object \fIproxy\fP that delegates all operations
to \fIorig\fP. Note that this creates a pure proxy object. None
of the supported operations of the primary abstractions are filtered
or changed in any way. The relation of \fIproxy\fP to \fIorig\fP
is registered to \fIForwarders(3)\fP.
.PP
A filtering module that filters operations at some abstraction layer
needs the initializations for all abstraction layers by the regular
proxy modules but its own layer.
This can be done by starting with
.I CreateUninitializedProxy
which returns a \fIproxy\fP object that has been created
by the \fIcreateProxy\fP interface procedure of the most-extended
proxy module. In the second step, all interfaces have to
be initialized that are more basic than our abstraction layer
using \fIInitializeAllInterfacesUpTo\fP which initializes
all layers up to that of \fItype\fP which is included.
In the third step, the initialization on the own abstraction
layer has to be performed. Finally,
\fIInitializeAllInterfacesBeyond\fP has to be invoked
to initialize all interfaces for the extensions of \fItype\fP
(excluding \fItype\fP). \fIInitializeAllInterfacesBeyond\fP
also registers the relationship between \fIproxy\fP and \fIorig\fP
to \fIForwarders(3)\fP.
.PP
.I GetOrig
returns the original target object \fIproxy\fP is linked to.
.SH DIAGNOSTICS
Established proxy relations are announced to \fIForwarders(3)\fP
which in turn registers the relationship with \fIResources.DependsOn\fP
to \fIResources(3)\fP. This causes all error events that are raised
at the original object to be forwarded to the proxy object.
.SH "SEE ALSO"
.Tb TranslucentNames(3)
.Tp Forwarders(3)
forward secondary abstractions through proxy objects
.Tp ProxyNodes(3)
example for a proxy module at the \fINames(3)\fP abstraction layer
.Tp RemoteObjects(3)
delegations to remote objects
.Tp TranslucentNames(3)
example for a filtering module at the \fINames(3)\fP abstraction layer
.Te
.\" ---------------------------------------------------------------------------
.\" $Id: Proxies.3,v 1.1 2004/09/22 06:49:22 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: Proxies.3,v $
.\" Revision 1.1  2004/09/22 06:49:22  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
