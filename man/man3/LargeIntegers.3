.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-1999 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH LargeIntegers 3 "Last change:   " "Release 0.5" "Ulm's Oberon System"
.SH NAME
LargeIntegers \- implementation of almost arbitrary large integers
.SH SYNOPSIS
.Pg
TYPE LargeInteger = POINTER TO LargeIntegerRec;
TYPE LargeIntegerRec = RECORD (IntOperations.OperandRec) END;
.sp 0.7
PROCEDURE Create(VAR op: Operations.Operand);
.sp 0.3
PROCEDURE ReadS(s: Streams.Stream; VAR op: Operations.Operand);
PROCEDURE Read(VAR op: Operations.Operand);
PROCEDURE WriteS(s: Streams.Stream; op: Operations.Operand);
PROCEDURE Write(op: Operations.Operand);
.sp 0.3
PROCEDURE GCD(a, b: Operations.Operand; VAR res, c, d: Operations.Operand);
PROCEDURE Inverse(a, b: Operations.Operand; VAR res: Operations.Operand);
.Pe
.SH DESCRIPTION
\fILargeIntegers\fP is an implementation of \fIOperations(3)\fP and
\fIIntOperations(3)\fP. It provides arithmetic operations for
almost arbitrary large integers. Each number is stored in a block
allocated with \fISYSTEM.NEW\fP and treated as an array of \fBLONGINT\fP
(or any other whole-numbered variable type). Only the unsigned part of
such a variable type is used and therefore one bit is vasted when using
signed variable types. To avoid a lot of slow memory reallocations, memory
is often not freed if the integers absolute value is decreased.
.LP
.I Create
creates and initializes an operand \fIop\fP of type \fILargeInteger\fP.
.LP
In addition to the procedures required by the interfaces
\fIOperations(3)\fP and \fIIntOperations(3)\fP the following functions
have been implemented:
.Is
.If Inverse "\fIa, b\fP: \fIOperations.Operand\fP; \fBVAR\fP \fIres\fP: \fIOperations.Operand\fP"
calculate a * res = 1 (mod b).
.If GCD "\fIa, b\fP: \fIOperations.Operand\fP; \fBVAR\fP \fIres, c, d\fP: \fIOperations.Operand\fP"
solves the equation a * c + b * d = res for the smallest possible absolute
value of res (which is the greatest common divisor of a and b).
.Ef
The other procedures provide in- and output functionality. \fIRead\fP
and \fIWrite\fP use \fIStreams.stdin\fP resp. \fIStreams.stdout\fP, \fIReadS\fP
and \fIWriteS\fP require any stream derived from \fIStreams.Stream\fP.
.SH DIAGNOSTICS
Two kinds of assertions might fail in \fILargeIntegers\fP:
.Tb DivMod
.Tp DivMod
Divisions by zero cannot be recovered right now, but this can easily be
changed in the future.
.Tp Log2
The logarithm of none positive numbers also leads to a program termination.
.Te
.SH "SEE ALSO"
.Tb IntOperations(3)
.Tp Operations(3)
generic interface for arithmetic operations
.Tp IntOperations(3)
generic interface for arithmetic integer operations
.Tp Card1024s(3)
implementation of 1024 bit cardinals
.Tp SYSTEM(3)
system-dependent built-ins of Ulm's Oberon Compiler
.Te
.SH BUGS
Due to a low number of tests, there are most likely a lot of them left.
Also \fILargeIntegers\fP has been written to work with signed and
unsigned blocks. This has never been tested with unsigned variables which
has to be done as soon as an unsigned integer base type is available.
.SH AUTHOR
Ingo Melzer
.\" ---------------------------------------------------------------------------
.\" $Id$
.\" ---------------------------------------------------------------------------
.\" $Log$
.\" ---------------------------------------------------------------------------
