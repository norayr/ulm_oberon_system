.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-1999 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH Scopes 3 "Last change: 27 May 2000" "Release 0.5" "Ulm's Oberon System"
.SH NAME
Scopes \- flat but nestable persistent name spaces
.SH SYNOPSIS
.Pg
TYPE Identifier = ConstStrings.String;
TYPE Object = CompilerObjects.Object;
TYPE Location = CompilerObjects.Location;
.sp 0.7
TYPE Scope = POINTER TO ScopeRec;
TYPE ScopeRec = RECORD (CompilerObjects.ObjectRec) END;
.sp 0.7
TYPE OpenProc = PROCEDURE (scope: Scope; VAR innerScope: Scope);
TYPE CloseProc = PROCEDURE (scope: Scope);
TYPE AddProc = PROCEDURE (scope: Scope; ident: Identifier;
                          loc: Location; object: Object);
TYPE UseProc = PROCEDURE (scope: Scope; ident: Identifier;
                          loc: Location; VAR object: Object);
TYPE LookupProc = PROCEDURE (scope: Scope; ident: Identifier;
                             VAR object: Object) : BOOLEAN;
TYPE LocalLookupProc = PROCEDURE (scope: Scope; ident: Identifier;
                                  VAR object: Object) : BOOLEAN;
TYPE CutProc = PROCEDURE (scope: Scope);
TYPE GetIteratorProc = PROCEDURE (scope: Scope; VAR it: Iterators.Iterator);
TYPE Interface = POINTER TO InterfaceRec;
TYPE InterfaceRec =
   RECORD
      (Objects.ObjectRec)
      open: OpenProc;
      close: CloseProc;
      add: AddProc;
      use: UseProc;
      lookup: LookupProc;
      localLookup: LocalLookupProc;
      cut: CutProc;
      getIterator: GetIteratorProc;
   END;
.sp 0.7
PROCEDURE Init(scope: Scope; if: Interface);
.sp 0.7
PROCEDURE Open(scope: Scope; VAR innerScope: Scope);
PROCEDURE Close(scope: Scope);
PROCEDURE Cut(scope: Scope);
.sp 0.7
PROCEDURE Level(scope: Scope) : INTEGER;
PROCEDURE Add(scope: Scope; ident: Identifier;
              loc: Location; object: Object);
PROCEDURE Use(scope: Scope; ident: Identifier; loc: Location;
              VAR object: Object);
PROCEDURE Lookup(scope: Scope; ident: Identifier;
                 VAR object: Object) : BOOLEAN;
PROCEDURE LocalLookup(scope: Scope; ident: Identifier;
                      VAR object: Object) : BOOLEAN;
PROCEDURE GetIterator(scope: Scope; VAR it: Iterators.Iterator);
.Pe
.SH DESCRIPTION
.I Scopes
provides a general abstraction for flat but nestable persistent
name spaces that are suited for compilers of programming languages.
A standard implementation is given by \fIStdScopes(3)\fP.
.LP
.I Init
initializes \fIscope\fP and associates it with the given
interface \fIif\fP. The interface procedures
are expected to meet the specifications following:
.Is "\fIscope\fP: \fIScope\fP"
.If open "; \fBVAR\fP \fIinnerScope\fP: \fIScope\fP"
create a nested scope of \fIscope\fP and return it in \fIinnerScope\fP.
Nested scopes have the property that identifiers that were not found
in them will be looked up in the parent scope.
.If close ""
freeze \fIscope\fP (i.e. further additions to it must not be accepted),
and generate error events if necessary.
.If add "; \fIident\fP: \fIIdentifier\fP; \fIloc\fP: \fILocation\fP; \fIobject\fP: \fIObject\fP"
add \fIobject\fP under the name of \fIident\fP to \fIscope\fP. The location
\fIloc\fP, if non-\fBNIL\fP, may later be used as reference in case of
error messages.
.If use "; \fIident\fP: \fIIdentifier\fP; \fIloc\fP: \fILocation\fP; \fBVAR\fP \fIobject\fP: \fIObject\fP"
perform a lookup of \fIident\fP in \fIscope\fP and mark this identifier
as used in this scope if found. Note that implementations are expected
to detect scope overlaps, i.e. identifiers that have been used from an
outer scope must not be later added to the same scope. Example:
.Pg
PROCEDURE OuterScope;
   TYPE Outer = INTEGER;
   PROCEDURE InnerScope;
      TYPE Inner = Outer; (* using ``Outer'' in inner scope *)
      TYPE Outer = INTEGER; (* redefining ``Outer'' in inner scope *)
   END InnerScope;
END OuterScope;
.Pe
\fIobject\fP must be set to \fBNIL\fP if the lookup was not successful.
.If lookup "; \fIident\fP: \fIIdentifier\fP; \fBVAR\fP \fIobject\fP: \fIObject\fP" "\fBBOOLEAN\fP"
lookup for \fIident\fP in \fIscope\fP (and its outer scopes) without
marking it. If successful, \fBTRUE\fP is to be returned and the object
found to be stored into \fIobject\fP.
.If localLookup "; \fIident\fP: \fIIdentifier\fP; \fBVAR\fP \fIobject\fP: \fIObject\fP" "\fBBOOLEAN\fP"
lookup for \fIident\fP in \fIscope\fP without considering its outer
scopes and without marking it. If successful, \fBTRUE\fP is to be
returned and the object found to be stored into \fIobject\fP.
.If cut ""
untie the association of \fIscope\fP to its outer scope,
i.e. lookups will be performed locally only.
.If getIterator "; \fBVAR\fP \fIit\fP: \fIIterators.Iterator\fP"
store an iterator into \fIit\fP that allows to iterate through all
objects added to \fIscope\fP.
.Ef
.LP
.I Open
creates a scope of the same implementation as \fIscope\fP that
is nested into it, i.e. lookups that do not succeed in the
current scope will be continued in the outer scope.
.I Close
freezes and finishes a scope, i.e. further additions of
identifiers to \fIscope\fP are no longer permitted and
error events will be generated.
.I Cut
unties a scope from its outer scope, i.e. lookups will be
performed locally on \fIscope\fP only. Note that \fICut\fP
does not change the nesting level of a scope.
.LP
.I Level
returns the nesting level of a scope. Outmost scopes
(i.e. those initialized by \fIInit\fP) have a nesting level of 0.
.LP
.I Add
inserts \fIobject\fP (declared at \fIloc\fP) with
name \fIident\fP into \fIscope\fP. \fIloc\fP may be \fBNIL\fP
if not available. An error event is generated immediately or
later on \fIClose\fP in case of errors.
.LP
.I Use
looks for \fIident\fP in \fIscope\fP (referenced at \fIloc\fP)
and marks it as used. The object, if found, is stored into
\fIobject\fP; otherwise, it is set to \fBNIL\fP. \fIloc\fP
may be \fBNIL\fP if not available. An error event is generated
immediately or later on \fIClose\fP in case of errors.
.LP
.I Lookup
looks for \fIident\fP in \fIscope\fP and its associated
outer scopes without marking it
and without generating any error events. If successful,
\fBTRUE\fP is returned and the object is stored into \fIobject\fP.
.I LocalLookup
works like \fILookup\fP but does not consider the outer scopes
of \fIscope\fP.
.LP
.I GetIterator
returns an iterator in \fIit\fP that allows to iterate through
all objects (not names!) added to \fIscope\fP. \fIGetIterator\fP
must not be called before \fIClose\fP has been called for \fIscope\fP.
.SH DIAGNOSTICS
Implementations of \fIScopes\fP are expected to raise error events
(usually those of \fICompilerErrors(3)\fP)
and to relate them to \fIscope\fP if
.IP \(bu
an identifier is added twice to the same scope,
.IP \(bu
an identifier is added that was used before from the outer scope
(scope overlap), or if
.IP \(bu
an identifier is used that was not declared before.
.LP
Implementations are free to postpone the generation of error events
until \fIClose\fP is called for a scope to allow for enhanced
error reports.
.SH "SEE ALSO"
.Tb PersistentObjects(3)
.Tp CompilerErrors(3)
events for compilation errors
.Tp CompilerObjects(3)
base type of compiler objects
.Tp PersistentObjects(3)
operations for persistent objects
.Tp StdScopes(3)
standard implementation of \fIScopes\fP using hashes and
\fICompilerErrors(3)\fP
.Te
.\" ---------------------------------------------------------------------------
.\" $Id: Scopes.3,v 1.2 2000/05/27 11:04:51 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: Scopes.3,v $
.\" Revision 1.2  2000/05/27  11:04:51  borchert
.\" StdScopes does not use AVLTrees but hashes
.\"
.\" Revision 1.1  2000/05/22  07:52:19  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
