.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-1999 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH CompilerSources 3 "Last change: 28 April 2000" "Release 0.5" "Ulm's Oberon System"
.SH NAME
CompilerSources \- reference objects for program text sources
.SH SYNOPSIS
.Pg
CONST definition = 0;
CONST module = 1;
CONST defmod = 2;
TYPE SourceKind = SHORTINT; (* definition .. defmod *)
.sp 0.7
TYPE Header = POINTER TO HeaderRec;
TYPE HeaderRec =
   RECORD
      (PersistentDisciplines.ObjectRec)
      modname: ConstStrings.String;
      kind: SourceKind;
      date: Times.Time; (* date of last modification *)
      srcid: ConstStrings.String; (* sth unique *)
      args: Args.Arguments; (* for compilation *)
   END;
.sp 0.7
Source = POINTER TO SourceRec;
SourceRec =
   RECORD
      (PersistentDisciplines.ObjectRec)
      header: Header;
   END;
.sp 0.7
TYPE OpenProc = PROCEDURE (source: Source; VAR s: Streams.Stream) : BOOLEAN;
TYPE Interface = POINTER TO InterfaceRec;
TYPE InterfaceRec =
   RECORD
      (Objects.ObjectRec)
      open: OpenProc;
   END;
.sp 0.7
PROCEDURE Init(source: Source; if: Interface);
PROCEDURE CreateHeader(VAR header: Header;
                       modname: ConstStrings.String;
                       kind: SourceKind;
                       date: Times.Time;
                       srcid: ConstStrings.String;
                       args: Args.Arguments);

PROCEDURE Open(source: Source; VAR s: Streams.Stream) : BOOLEAN;
PROCEDURE GetSource(s: Streams.Stream; VAR source: Source);
.Pe
.SH DESCRIPTION
.I CompilerSources
provides a storage-independent interface to program text sources.
This interface allows compilers to be independent from the choice
how program texts are represented and stored, be it in a traditional
file system, an object data base, or somewhere across the network.
.LP
Sources consist of a byte sequence (accessible as stream) and
a header record containing following fields:
.Tb modname
.Tp modname
Module name of the source file. In traditional file systems
this name is usually derived from the base name (the part of
the file name before the dot-separated suffix).
.Tp kind
Programming languages like Modula-2 and some variants of
Oberon have two separate source files per module: one specifying its
interface (\fIdefinition\fP) and the other one giving its
implementation (\fImodule\fP). Other languages like Java
have these parts merged into one source file (\fIdefmod\fP).
.Tp date
This time stamp should carry the date of the last modification.
.Tp srcid
This component should provide an identifying string that must
be different for different source texts of the same module.
Cryptographic hash sums as those provided by \fIOneWayHashes(3)\fP,
\fIMD5(3)\fP, and \fIMD5Names(3)\fP are to be preferred.
.Tp args
Set of compilation options that apply for this source.
Usually, \fICompilers.DefineArgs\fP is used to define the set of
valid options accepted by a particular compiler.
.Te
.LP
.I Init
initializes a source object (that has to be created before) and
associates it with \fIif\fP. The \fIopen\fP procedure of \fIif\fP
is expected to open a source for reading and should return a
stream capable of seek operations (important for printing
error messages that include source code). Multiple independent
stream connections to the same source object must be supported.
.I CreateHeader
creates and initializes a persistent header object.
.LP
.I Open
opens \fIsource\fP for reading. Multiple open operations are
permitted.
.I GetSource
returns the source object associated with \fIs\fP, if any.
Note that \fIGetSource\fP works even for streams imported
by \fIRemoteObjects(3)\fP.
.SH DIAGNOSTICS
.I Open
is free to return \fBFALSE\fP in case of errors and relate
its error events to \fIsource\fP. Note, however, that \fICompilerSources\fP
does not generate any error events on its own.
.LP
.I GetSource
sets \fIsource\fP to \fBNIL\fP if it is not associated with a source.
.SH "SEE ALSO"
.Tb PersistentObjects(3)
.Tp Args(3)
general abstraction for arguments
.Tp MD5Names(3)
generation of source ids
.Tp PersistentObjects(3)
operations for persistent objects
.Te
.\" ---------------------------------------------------------------------------
.\" $Id: CompilerSources.3,v 1.1 2000/04/28 13:21:11 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: CompilerSources.3,v $
.\" Revision 1.1  2000/04/28  13:21:11  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
