'\" t
.\" --------------------------------------
.\" Oberon System Documentation   AFB 8/90
.\" (c) University of Ulm, SAI, D-7900 Ulm
.\" --------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH Scan 3 "Last change: 18 November 1991" "Release 0.5" "Ulm's Oberon System"
.SH NAME
Scan \- formatted input from streams
.SH SYNOPSIS
.Pg
PROCEDURE F(fmt: ARRAY OF CHAR);
PROCEDURE F1(fmt: ARRAY OF CHAR; VAR p1: ARRAY OF BYTE);
PROCEDURE F2(fmt: ARRAY OF CHAR; VAR p1, p2: ARRAY OF BYTE);
PROCEDURE F3(fmt: ARRAY OF CHAR; VAR p1, p2, p3: ARRAY OF BYTE);
PROCEDURE F4(fmt: ARRAY OF CHAR; VAR p1, p2, p3, p4: ARRAY OF BYTE);
PROCEDURE F5(fmt: ARRAY OF CHAR; VAR p1, p2, p3, p4, p5: ARRAY OF BYTE);
PROCEDURE F6(fmt: ARRAY OF CHAR; VAR p1, p2, p3, p4, p5, p6: ARRAY OF BYTE);
PROCEDURE F7(fmt: ARRAY OF CHAR;
             VAR p1, p2, p3, p4, p5, p6, p7: ARRAY OF BYTE);
PROCEDURE F8(fmt: ARRAY OF CHAR;
             VAR p1, p2, p3, p4, p5, p6, p7, p8: ARRAY OF BYTE);
PROCEDURE F9(fmt: ARRAY OF CHAR;
             VAR p1, p2, p3, p4, p5, p6, p7, p8, p9: ARRAY OF BYTE);
.sp 0.7
PROCEDURE S(in: Streams.Stream; fmt: ARRAY OF CHAR);
PROCEDURE S1(in: Streams.Stream; fmt: ARRAY OF CHAR; VAR p1: ARRAY OF BYTE);
PROCEDURE S2(in: Streams.Stream; fmt: ARRAY OF CHAR; VAR p1, p2: ARRAY OF BYTE);
PROCEDURE S3(in: Streams.Stream; fmt: ARRAY OF CHAR;
	     VAR p1, p2, p3: ARRAY OF BYTE);
PROCEDURE S4(in: Streams.Stream; fmt: ARRAY OF CHAR;
             VAR p1, p2, p3, p4: ARRAY OF BYTE);
PROCEDURE S5(in: Streams.Stream; fmt: ARRAY OF CHAR;
             VAR p1, p2, p3, p4, p5: ARRAY OF BYTE);
PROCEDURE S6(in: Streams.Stream; fmt: ARRAY OF CHAR;
             VAR p1, p2, p3, p4, p5, p6: ARRAY OF BYTE);
PROCEDURE S7(in: Streams.Stream; fmt: ARRAY OF CHAR;
             VAR p1, p2, p3, p4, p5, p6, p7: ARRAY OF BYTE);
PROCEDURE S8(in: Streams.Stream; fmt: ARRAY OF CHAR;
             VAR p1, p2, p3, p4, p5, p6, p7, p8: ARRAY OF BYTE);
PROCEDURE S9(in: Streams.Stream; fmt: ARRAY OF CHAR;
             VAR p1, p2, p3, p4, p5, p6, p7, p8, p9: ARRAY OF BYTE);
.Pe
.SH DESCRIPTION
.I Scan
offers formatted reading in \fIscanf(3)\fP style from \fIStreams.stdin\fP
(\fIF\fP through \fIF9\fP) or from
.I in
(\fIS\fP through \fIS9\fP).
The procedures scan input in dependence of the format string
.I fmt
and put read items into parameters
.I p1
through
.IR p9 .
The number of parameters determine the procedure name.
.PP
The format string
.I fmt
is interpreted as follows:
Any character not belonging to
an escape sequence introduced by
.B \e
or a format element
introduced by
.B %
must match the next input character.
.I Scan
skips the next input character on success and
aborts processing otherwise.
A blank character in the format string matches
a possibly empty sequence of white space characters in
.I Streams.stdin
resp.
.IR in .
White space is given by \fIStreamDisciplines\fP.
.PP
Escape sequences encode one character which must match the next
input character.
Following escape sequences are understood:
.IP "\e[0-9A-F]+"
character in hex representation.
.IP "\eb"
backspace character (08X).
.IP "\ee"
escape character (1BX).
.IP "\ef"
form feed (0CX).
.IP "\en"
new line (as defined by \fIStreamDisciplines\fP).
.IP "\eq"
single quote ("'").
.IP "\eQ"
quote character (\fIASCII.quote\fP).
.IP "\er"
carriage return (0DX).
.IP "\et"
horizontal tab (09X).
.IP "\e&"
audible bell (07X).
.PP
It is important to note that in despite to \fIscanf(3)\fP
"\en" and "\et" does not lead to white space skipping.
Instead, they match a new line resp. a tab character.
.PP
Format elements must conform to following syntax:
.Pg
FormatElement = "%" [Flags] [Width] Conversion .
Flags = "*" .
Width = { DecDigits } .
DecDigits = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" .
Conversion = "c" | "d" | "e" | "f" | "g" | "o" | "s" | "x" | ScanSet .
ScanSet = "[" CharSet "]" .
CharSet = Complement | Set .
Complement = "^" Set .
Set = [ "]" ] { Range | AnyChar } .
Range = AnyChar "-" AnyChar .
.Pe
Conversions of integer and real numbers accept leading white space.
A positive width (default: 0) limits the number of characters read
(after skipping white space).
.PP
All format elements assigns the read item to the next parameter
(\fIp1\fP through \fIp9\fP).
Assignment can be suppressed by use of the "*" flag.
.PP
Following conversions are supported:
.IP "c"
read next character.
.IP "d"
read integer in decimal notation.
.IP "e,f,g"
read real number in Oberon syntax.
"e" and "d" instead of "E" and "D" are accepted.
.IP "o"
read integer in octal notation.
.IP "s"
read string. Leading white space is skipped.
String scanning is stopped on the first white space character or
if the given parameter is filled.
0X-termination is guaranteed.
.IP "x"
read integer in hexadecimal notation.
.IP "[...]"
read sequence of characters according to given character set.
String scanning is stopped on the first character which is not
member of the given character set,
or if the given parameter is filled.
0X-termination is guaranteed.
.PP
Termination characters are put back to the input stream if possible.
.SH DIAGNOSTICS
If the input does not match the given format string
.I Scan
stops scanning and returns immediately.
.I Scan
returns the number of stored items in \fIStreams.stdin.count\fP resp.
\fIin.count\fP.
.SH "SEE ALSO"
.TS
lfI l.
Read(3)	alternative routines for formatted input
StreamDisciplines(3)	definition of white space and line terminator
Streams(3)	stream operations
.TE
.SH BUGS
The current version does not raise events for some common errors,
e.g. if the number of parameters and format elements does not match.
.PP
.I Streams
does not support
.I Streams.Back
for unbuffered streams.
Thus termination characters are lost by reading from streams
with buffering mode
.IR Streams.nobuf .
.\" ---------------------------------------------------------------------------
.\" $Id: Scan.3,v 1.3 91/11/18 08:14:04 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log:	Scan.3,v $
.\" Revision 1.3  91/11/18  08:14:04  borchert
.\" Scan depends now from StreamDisciplines
.\" 
.\" Revision 1.2  1991/06/19  16:12:52  borchert
.\" definition of Scan.Stream removed
.\"
.\" Revision 1.1  90/08/31  17:02:18  borchert
.\" Initial revision
.\" 
.\" ---------------------------------------------------------------------------
