'\" t
.\" --------------------------------------
.\" Oberon System Documentation   AFB 8/90
.\" (c) University of Ulm, SAI, D-7900 Ulm
.\" --------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH MC68881 3 "Last change: 22 April 1992" "Release 0.5" "Ulm's Oberon System"
.SH NAME
MC68881 \- library interface to MC68881 instructions
.SH SYNOPSIS
.Pg
CONST available = TRUE;
.sp 0.7
(* rounding modes *)
CONST toNearest = 0;
CONST towardZero = 1;
CONST towardMinusInfinity = 2;
CONST towardPlusInfinity = 3;
.sp 0.7
(* rounding precision *)
CONST extended = 0; single = 1; double = 2;
.sp 0.7
(* exceptions *)
CONST branchOnUnordered = 0;
CONST signalingNotANumber = 1;
CONST operandError = 2;
CONST overflow = 3;
CONST underflow = 4;
CONST divideByZero = 5;
CONST inexactOperation = 6;
CONST inexactDecimalInput = 7;
.sp 0.3
CONST floatlen = 4; (* length of a single precision real number *)
.sp 0.7
PROCEDURE FACOS(x: LONGREAL) : LONGREAL;
PROCEDURE FASIN(x: LONGREAL) : LONGREAL;
PROCEDURE FATAN(x: LONGREAL) : LONGREAL;
PROCEDURE FATANH(x: LONGREAL) : LONGREAL;
PROCEDURE FCOS(x: LONGREAL) : LONGREAL;
PROCEDURE FCOSH(x: LONGREAL) : LONGREAL;
PROCEDURE FETOX(x: LONGREAL) : LONGREAL;
PROCEDURE FETOXM1(x: LONGREAL) : LONGREAL;
PROCEDURE FGETEXP(x: LONGREAL) : LONGREAL;
PROCEDURE FGETMAN(x: LONGREAL) : LONGREAL;
PROCEDURE FLOG10(x: LONGREAL) : LONGREAL;
PROCEDURE FLOG2(x: LONGREAL) : LONGREAL;
PROCEDURE FLOGN(x: LONGREAL) : LONGREAL;
PROCEDURE FLOGNP1(x: LONGREAL) : LONGREAL;
PROCEDURE FSIN(x: LONGREAL) : LONGREAL;
PROCEDURE FSINH(x: LONGREAL) : LONGREAL;
PROCEDURE FSQRT(x: LONGREAL) : LONGREAL;
PROCEDURE FTAN(x: LONGREAL) : LONGREAL;
PROCEDURE FTANH(x: LONGREAL) : LONGREAL;
PROCEDURE FTENTOX(x: LONGREAL) : LONGREAL;
PROCEDURE FTWOTOX(x: LONGREAL) : LONGREAL;
.sp 0.7
PROCEDURE GetExceptionEnable(VAR exceptions: SET);
PROCEDURE SetExceptionEnable(exceptions: SET);
.sp 0.7
PROCEDURE GetRoundingMode(VAR precision, mode: INTEGER);
PROCEDURE SetRoundingMode(precision, mode: INTEGER);
.sp 0.7
PROCEDURE RealToFloat(real: LONGREAL; VAR float: ARRAY OF BYTE);
PROCEDURE FloatToReal(float: ARRAY OF BYTE; VAR real: LONGREAL);
.Pe
.SH DESCRIPTION
The implemenation of this module is written in assembler
and offers a library interface to some MC68881
instructions.
.PP
The constant
.I available
is
.B TRUE
if a MC68881 or upward compatible processor is present.
Otherwise
.I available
is
.B FALSE
and all operations are no-operations.
This allows some system modules to take advantage of known
floating processors in a portable manner.
.PP
The procedures
.I FACOS
to
.I FTWOTOX
execute the equally named instructions.
.PP
The MC68881 supports 8 exceptions which can be separately enabled or
disabled:
.Tb signalingNotANumber
.Tp branchOnUnordered
comparison of defined values against undefined values
.Tp signalingNotANumber
a signaling not-a-number was used as operand,
see \fIIEEE(3)\fP for details
.Tp operandError
operation has no mathematical interpretation for the given operands,
e.g. operand is less than zero for \fBFLOGN\fP
.Tp overflow
the result of an operation equals plus or minus infinity
.Tp underflow
a non-zero result gets zero
.Tp divideByZero
division by zero
.Tp inexactOperation
the exact result of an operation is not representable
.Tp inexactDecimalInput
decimal format cannot be represented exactly;
this exception does not arise in Oberon programs
.Te
All exceptions are disabled by default.
\fISysSignals.FPE\fP is raised if an enabled exception arises.
The faulting instruction is re-executed if execution continues.
Thus a floating point exception handler must either not return
or disable the arised exception to avoid an infinite loop.
.PP
The MC68881 supports four rounding modes:
.TS
box tab(:);
l   l s s s
l   n n n n
lfI n n n n.
rounding mode:examples for real to integer conversion
\^:-1.9:-1.1:1.1:1.9
_
toNearest:-2:-1:1:2
towardZero:-1:-1:1:1
towardMinusInfinity:-2:-2:1:1
towardPlusInfinity:-1:-1:2:2
.TE
.PP
Note that
.B ENTIER
is a conversion with rounding mode towards minus infinity.
The inline code of the compiler for
.B ENTIER
saves the current rounding mode,
sets the rounding mode towards minus infinity,
executes the conversion, and restores the old rounding mode.
The rounding precision is either
.IR extended ,
.IR single ,
or
.IR double .
The rounding precision is set to
.I extended
at beginning of execution and must not be changed
(else floating point operations would behave unexpected,
e.g. the precision of
.B LONGREAL
and
.B REAL
differs from the specifications of \fIReals(3)\fP).
.I GetRoundingMode
returns current rounding mode and precision.
.I SetRoundingMode
sets the rounding precision to
.I precision
and the rounding mode to
.IR mode .
.PP
The Oberon compiler maps \fBREAL\fP to the 8-byte double precision format
and \fBLONGREAL\fP to the 12-byte extended precision format and
does not provide a basic datatype for the 4-byte single precision format.
\fIRealToFloat\fP and \fIFloatToReal\fP allow to convert to and from
the 4-byte single precision format (e.g. to export or import
real values in binary format to other programming languages).
Both procedures use \fBARRAY OF BYTE\fP for the 4-byte real value
for convenience.
The constant \fIfloatlen\fP specifies the necessary number of bytes
to hold a single precision real value.
.SH "SEE ALSO"
.TS
lfI l.
IEEE(3)	IEEE floating point formats
Reals(3)	real conversions
SysSignals(3)	floating point exceptions
.TE
.\" ---------------------------------------------------------------------------
.\" $Id: MC68881.3,v 1.4 1992/04/22 10:36:46 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: MC68881.3,v $
.\" Revision 1.4  1992/04/22  10:36:46  borchert
.\" minor layout change
.\"
.\" Revision 1.3  1992/03/24  08:27:53  borchert
.\" Signals renamed to SysSignals
.\"
.\" Revision 1.2  1992/03/17  07:33:39  borchert
.\" conversion from and to 4-byte single precision format added
.\"
.\" Revision 1.1  1990/08/31  17:02:15  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
