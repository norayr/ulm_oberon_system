.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-2006 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH HostPorts 3 "Last change: 11 August 2006" "Release 0.5" "Ulm's Oberon System"
.SH NAME
HostPorts \- support of host/port tuple specifications according to RFCs 2373, 2396, and 2732
.SH SYNOPSIS
.Pg
TYPE HostPort = POINTER TO HostPortRec;
TYPE HostPortRec =
   RECORD
      (Disciplines.ObjectRec)
      port: INTEGER;
      host: DNSRecords.Name;
   END;
TYPE IPv4HostPort = POINTER TO IPv4HostPortRec;
TYPE IPv4HostPortRec =
   RECORD
      (HostPortRec)
      address: IPv4Addresses.SocketAddress;
   END;
TYPE IPv6HostPort = POINTER TO IPv6HostPortRec;
TYPE IPv6HostPortRec =
   RECORD
      (HostPortRec)
      address: IPv6Addresses.SocketAddress;
   END;
.sp 0.7
TYPE AddIPv4Address =
      PROCEDURE (service: Disciplines.Object;
		 address: IPv4Addresses.SocketAddress) : BOOLEAN;
TYPE AddIPv6Address =
      PROCEDURE (service: Disciplines.Object;
		 address: IPv6Addresses.SocketAddress) : BOOLEAN;
TYPE Interface = POINTER TO InterfaceRec;
TYPE InterfaceRec =
   RECORD
      (Objects.ObjectRec)
      addIPv4Address: AddIPv4Address;
      addIPv6Address: AddIPv6Address;
   END;
.sp 0.7
CONST unexpectedEOF = 0;
CONST closingBracketMissing = 1;
CONST hostnameTooLong = 2;
CONST tooManyDots = 3;
CONST invalidPort = 4;
CONST errors = 5;
TYPE ErrorCode = SHORTINT; (* unexpectedEOF... *)
TYPE ErrorEvent = POINTER TO ErrorEventRec;
TYPE ErrorEventRec =
   RECORD
      (Events.EventRec)
      errorcode: ErrorCode;
   END;
VAR errormsg: ARRAY errors OF Events.Message;
VAR error: Events.EventType;
.sp 0.7
PROCEDURE SetDefaultPort(s: Streams.Stream; port: INTEGER);
PROCEDURE SetPort(s: Streams.Stream; port: INTEGER);
.sp 0.7
PROCEDURE ReadText(s: Streams.Stream; VAR hostport: HostPort) : BOOLEAN;
PROCEDURE WriteText(s: Streams.Stream; hostport: HostPort); 
.sp 0.7
PROCEDURE CreateAddress(VAR address: Networks.Address; hostport: HostPort);
.sp 0.7
PROCEDURE ReadAddress(s: Streams.Stream;
		      VAR address: Networks.Address) : BOOLEAN;
.sp 0.7
PROCEDURE Init(service: Disciplines.Object; if: Interface);
PROCEDURE Add(service: Disciplines.Object; hostport: HostPort) : BOOLEAN;
PROCEDURE ReadAndAdd(s: Streams.Stream;
		     service: Disciplines.Object) : BOOLEAN;
.Pe
.SH DESCRIPTION
.I HostPorts
supports the textual specification of hosts, either in domain style or as
numerical IP address, and an optional port number. The term \fIhostport\fP
was coined within RFC 2396 which provides the generic syntax for Uniform
Resource Identifiers (URI). This syntax was extended by RFC 2732 to
support IPv6 addresses which were already specified in RFC 2373.
There exist other modules to parse and convert domain names
(\fIDNSResolvers(3)\fP, and \fIInetResolver(3)\fP), and numeric
IP addresses (\fIIPv4Addresses(3)\fP, \fIIPv6Addresses(3)\fP). The goal
of this module is to provide a uniform interface for all these variants
which allow to specify a host/port tuple by giving
.IP \(bu
a hostname whose A or AAAA record is looked up,
.IP \(bu
a numeric IPv4 address, or
.IP \(bu
a numeric IPv6 address,
.IP \(bu
optionally followed by a colon-separated port number.
.LP
Following syntax is given by RFCs 2396 and 2732:
.Tb ipv6reference
.Tp hostport
= \fIhost\fP [ ":" \fIport\fP ]
.Tp host
= \fIhostname\fP | \fIIPv4address\fP | \fIIPv6reference\fP
.Tp hostname
= *( \fIdomainlabel\fP "." ) \fItoplabel\fP [ "." ]
.Tp domainlabel
= \fIalphanum\fP | \fIalphanum\fP *( \fIalphanum\fP | "-" ) \fIalphanum\fP
.Tp toplabel
= \fIalpha\fP | \fIalpha\fP *( \fIalphanum\fP | "-" ) \fIalphanum\fP
.Tp IPv4address
= 1*\fIdigit\fP "." 1*\fIdigit\fP "." 1*\fIdigit\fP "." 1*\fIdigit\fP
.Tp port
= *\fIdigit\fP
.Tp ipv6reference
= "[" \fIIPv6address\fP "]"
.Tp IPv6address
= see RFC 2373
.Te
Note that the colon is used as separator between the host and the
port specification but also as delimiter within IPv6 addresses.
For this reason, RFC 2732 requires numeric IPv6 addresses to be
enclosed in brackets. \fIHostPorts\fP allows the brackets to be
omitted if the port number is no longer part of the address.
This can be achieved by invoking \fISetPort\fP for the input
stream before calling \fIReadText\fP.
.LP
.I SetDefaultPort
sets the default port of a specification for the given input
stream if the port is omitted.
.I SetPort
causes \fIReadText\fP not to look for a port in the input
specification and to take the given value instead.
.LP
Read host/port tuples are represented by \fIHostPort\fP objects
which come in two extensions: \fIIPv4HostPort\fP and \fIIPv6HostPort\fP.
The common fields \fIhost\fP and \fIport\fP are close to the actual
input seen by \fIReadText\fP, i.e. if a numerical IP address was
given, \fIhost\fP provides the corresponding text represenation
(without the brackets in case of IPv6 addresses). The extensions
provide the associated address specifications which can be passed
on to \fIIPv4TCPSockets(3)\fP, \fIIPv6TCPSockets(3)\fP,
\fIInetTCP(3)\fP, \fIInet6TCP(3)\fP, or, after a conversion to the
internal format, to \fISysSockets(3)\fP.
\fIHostPort\fP objects are to be created only by \fIReadText\fP.
.LP
.I ReadText
parses a hostport specification from the given input specification,
and, if successful, creates a \fIHostPort\fP object for it.
.I WriteText
prints a textual representation of \fIhostport\fP to \fIs\fP which
is close to the original input.
.LP
.I CreateAddress
uses \fIInetTCP(3)\fP or \fIInet6TCP(3)\fP to create an abstract
network address object of \fINetworks(3)\fP.
.I ReadAddress
combines \fIReadText\fP and \fICreateAddress\fP.
.LP
To ease the specification of IPv4 or IPv6 addresses to other modules, an
interface is provided which allows \fIAdd\fP to pass on the address to
the corresponding procedure. For this to work, the module that accepts
addresses has to define an interface consisting of \fIaddIPv4Address\fP
and \fIaddIPv6Address\fP and to associate it with its newly created object
using \fIInit\fP. Afterwards, client modules are free to use \fIAdd\fP
or \fIReadAndAdd\fP to pass hostport specifications to an object.
.SH EXAMPLE
Following code snippet demonstrates how hostport specifications out
of command line arguments can be forwarded to a \fIserver\fP object
that supports the interface that is required by \fIReadAndAdd\fP:
.Pg
UnixArguments.Fetch(args);
RelatedEvents.Forward(args, server);
HostPorts.SetDefaultPort(args, 53);
IF ~HostPorts.ReadAndAdd(args, server) THEN
   Conclusions.Conclude(server, Errors.fatal, "");
END;
.Pe
.SH DIAGNOSTICS
Error events can be generated by the underlying modules
(including \fIIPv4Addresses(3)\fP and \fIIPv6Addresses(3)\fP).
In addition, following errors can be raised by \fIReadText\fP:
.Tb closingBracketMissing
.Tp unexpectedEOF
the input stream ended before a complete hostport specification
could be read
.Tp closingBracketMissing
an bracketed IPv6 address was given but the closing bracket
is missing
.Tp hostnameTooLong
the hostname part was longer than permitted by RFC 1035
.Tp tooManyDots
more dots were found in the hostname specification that
permitted by the corresponding syntax, i.e. consecutive or
leading dots were found
.Tp invalidPort
an invalid port was specified which was outside the
range of [0,65535].
.Te
.SH "SEE ALSO"
.Tb IPv4Addresses(3)
.Tp IPv4Addresses(3)
parsing of IPv4 addresses
.Tp IPv4TCPSockets(3)
IPv4 TCP sockets
.Tp IPv6Addresses(3)
parsing of IPv6 addresses
.Tp IPv6TCPSockets(3)
IPv6 TCP sockets
.Te
.\" ---------------------------------------------------------------------------
.\" $Id: HostPorts.3,v 1.1 2006/08/11 16:13:11 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: HostPorts.3,v $
.\" Revision 1.1  2006/08/11 16:13:11  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
