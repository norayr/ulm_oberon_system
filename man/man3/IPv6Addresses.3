.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-2006 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH IPv6Addresses 3 "Last change: 9 August 2006" "Release 0.5" "Ulm's Oberon System"
.SH NAME
IPv6Addresses \- support of IPv6 addresses
.SH SYNOPSIS
.Pg
CONST nbytes = 16;
TYPE Address = ARRAY nbytes OF CHAR;
.sp 0.3
TYPE PortNumber = IPv4Addresses.PortNumber;
TYPE SocketAddress =
      RECORD
         (Objects.ObjectRec)
         host: Address;
         portnum: PortNumber;
      END;
.sp 0.7
CONST addrlen = 32; (* size of struct sockaddr_in6 in <sys/socket.h> *)
TYPE SysAddress = ARRAY addrlen OF BYTE;
.sp 0.7
CONST invalidInputChar = 0;
CONST multipleDoubleColons = 1;
CONST unexpectedEOF = 2;
CONST valueOutOfRange = 3;
CONST tripleColon = 4;
CONST errors = 5;
TYPE ErrorCode = SHORTINT; (* invalidInputChar... *)
TYPE ErrorEvent = POINTER TO ErrorEventRec;
TYPE ErrorEventRec =
      RECORD
	 (Events.EventRec)
	 errorcode: ErrorCode;
	 pos: Streams.Count;
      END;
VAR errormsg: ARRAY errors OF Events.Message;
VAR error: Events.EventType;
.sp 0.7
PROCEDURE GetPort(address: SocketAddress) : INTEGER;
PROCEDURE SetPort(VAR address: SocketAddress; portnum: INTEGER);
PROCEDURE IsAnyAddr(address: Address) : BOOLEAN;
PROCEDURE SetAnyAddr(VAR address: Address);
.sp 0.7
PROCEDURE ConvertToSys(address: SocketAddress; VAR sysaddr: SysAddress);
PROCEDURE ConvertFromSys(sysaddr: SysAddress; VAR address: SocketAddress);
.sp 0.7
PROCEDURE ReadText(s: Streams.Stream; VAR ipaddr: Address) : BOOLEAN;
PROCEDURE WriteText(s: Streams.Stream; ipaddr: Address);
PROCEDURE CreateAddress(VAR ipaddr: Address; text: ARRAY OF CHAR);
.Pe
.SH DESCRIPTION
.I IPv6Addresses
provides support for IPv6 addresses. \fISocketAddress\fP represents IPv6
addresses in an easily accessible way. Note however, that the fields
\fIhost\fP and \fIportnum\fP must be kept or are to be interpreted in
network order, i.e. in big-endian byte order. The routines \fIGetPort\fP
and \fISetPort\fP can be used to convert the port number from and to
network order. \fISetAnyAddr\fP zeroes \fIaddress\fP and \fIIsAnyAddr\fP
tests if \fIaddress\fP consists of zeroes only.
.PP
\fISysAddress\fP represents IPv6 addresses in an internal form which
can be passed to the operations of \fISysSockets(3)\fP.
\fIConvertToSys\fP and \fIConvertFromSys\fP allow IPv6 addresses to be
converted to and from the internal form.
.PP
IPv6 addresses in a textual representation that conforms to RFC
1884, section 2.2, paragraphs 1 and 2 (but not 3) can be read by
\fIReadText\fP. \fIWriteText\fP prints \fIipaddr\fP in the compressed
notation to \fIs\fP.  \fICreateAddress\fP allows to create an IPv6
address directly from a string that is accepted by \fIReadText\fP.
.SH DIAGNOSTICS
\fIReadText\fP generates following error events and relates them
to \fIs\fP (see \fIRelatedEvents(3)\fP) in case of syntax errors:
.Tb invalidInputChar
.Tp invalidInputChar
The text representation of an IPv6 address is not yet complete but a
character was found which is neither a colon nor a hexadecimal digit.
.Tp multipleDoubleColons
More than one ``::'' construct was found.
.Tp unexpectedEOF
End of the input stream was detected while the textual representation
of the IPv6 address was not yet complete.
.Tp valueOutOfRange
One of the values did not fit into 16 bit, i.e. exceeded 0FFFFH.
.Tp tripleColon
Three or more consecutive colons where found.
.Te
Note that the stream position \fIpos\fP that is given in the error
events is to be interpreted relative to the stream position where
\fIReadText\fP starts reading.
.PP
\fICreateAddress\fP asserts that \fItext\fP is accepted by \fIReadText\fP.
.SH "SEE ALSO"
.Tb IPv4Addresses(3)
.Tp IPv4Addresses(3)
support of IPv4 addresses
.Tp SysSockets(3)
system calls for sockets
.Te
.\" ---------------------------------------------------------------------------
.\" $Id: IPv6Addresses.3,v 1.4 2006/08/09 15:49:08 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: IPv6Addresses.3,v $
.\" Revision 1.4  2006/08/09 15:49:08  borchert
.\" IsAnyAddr added
.\"
.\" Revision 1.3  2006/08/09 09:22:24  borchert
.\" - SocketAddress is no longer a pointer but a record
.\" - SetAnyAddr added
.\"
.\" Revision 1.2  2005/02/09 19:21:53  borchert
.\" table fixed
.\"
.\" Revision 1.1  2004/03/04 22:40:08  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
