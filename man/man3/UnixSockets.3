.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-2005 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH UnixSockets 3 "Last change: 21 January 2005" "Release 0.5" "Ulm's Oberon System"
.SH NAME
UnixSockets \- general interface for UNIX sockets
.SH SYNOPSIS
.Pg
TYPE Socket = POINTER TO SocketRec;
TYPE SocketRec = RECORD (Networks.SocketRec) END;
.sp 0.7
PROCEDURE Open(VAR s: Streams.Stream;
               addressFamily: INTEGER;
               type: INTEGER;
               address: ARRAY OF BYTE;
               bind: BOOLEAN; bindto: ARRAY OF BYTE;
               bufmode: Streams.BufMode;
               errors: RelatedEvents.Object) : BOOLEAN;
PROCEDURE OpenL(VAR s: Streams.Stream;
                addressFamily: INTEGER;
                type: INTEGER;
                address: ARRAY OF BYTE;
                len: SysTypes.Size;
                bind: BOOLEAN; bindto: ARRAY OF BYTE;
                bindtolen: SysTypes.Size;
                bufmode: Streams.BufMode;
                errors: RelatedEvents.Object) : BOOLEAN;
.sp 0.7
PROCEDURE CreateOpenCondition(VAR condition: Conditions.Condition;
                              addressFamily: INTEGER;
                              type: INTEGER;
                              address: ARRAY OF BYTE;
                              bind: BOOLEAN; bindto: ARRAY OF BYTE);
PROCEDURE CreateOpenConditionL(VAR condition: Conditions.Condition;
                               addressFamily: INTEGER;
                               type: INTEGER;
                               address: ARRAY OF BYTE;
                               len: SysTypes.Size;
                               bind: BOOLEAN; bindto: ARRAY OF BYTE;
                               bindtolen: SysTypes.Size);
PROCEDURE TestAndOpen(VAR s: Streams.Stream;
                      condition: Conditions.Condition;
                      bufmode: Streams.BufMode;
                      errors: RelatedEvents.Object) : BOOLEAN;
PROCEDURE Drop(condition: Conditions.Condition);
.sp 0.7
PROCEDURE Listen(VAR socket: Socket;
                 addressFamily: INTEGER;
                 type: INTEGER;
                 port: ARRAY OF BYTE;
                 errors: RelatedEvents.Object) : BOOLEAN;
PROCEDURE ListenL(VAR socket: Socket;
                  addressFamily: INTEGER;
                  type: INTEGER;
                  port: ARRAY OF BYTE;
                  len: SysTypes.Size;
                  errors: RelatedEvents.Object) : BOOLEAN;
PROCEDURE Accept(socket: Socket;
                 VAR s: Streams.Stream; bufmode: Streams.BufMode;
                 VAR peer: ARRAY OF BYTE) : BOOLEAN;
PROCEDURE Release(socket: Socket);
.sp 0.7
PROCEDURE CreateAcceptCondition(VAR condition: Conditions.Condition;
                                socket: Socket);
.sp 0.7
PROCEDURE GetName(socket: Socket; VAR address: ARRAY OF BYTE;
                  errors: RelatedEvents.Object) : BOOLEAN;
.Pe
.SH DESCRIPTION
.I UnixSockets
provides an interface for \fISysSockets(3)\fP
which is used by socket-specific extensions
(e.g. \fIIPv4TCPSockets(3)\fP and \fIUnixDomainSockets(3)\fP).
.LP
Socket streams are opened either by connecting to
an already existing socket
or by accepting a new connection on a port where other
sockets may connect to.
Both variants of opening a socket stream are supported
in blocking (\fIOpen\fP and \fIAccept\fP)
and non-blocking form
(\fICreateOpenCondition\fP/\fITestAndOpen\fP and
\fICreateAcceptCondition\fP).
.LP
Address families are enumerated in \fISysSockets(3)\fP.
Usually, three address families supported only:
.Tb SysSockets.afUNIX
.Tp SysSockets.afUNIX
UNIX domain sockets \(em supported by \fIUnixDomainSockets(3)\fP
.Tp SysSockets.afINET
IPv4 sockets \(em supported by \fIIPv4TCPSockets(3)\fP
.Tp SysSockets.afINET6
IPv6 sockets
.Te
The underlying system calls which get address parameters
have an additional parameter that specifies the exact
length of the address in bytes.
This length is constant for IPv4 or IPv6 domain sockets but
not for UNIX domain sockets where it depends on the
length of the path.
.LP
The \fItype\fP parameter specifies the socket type.
\fISysSockets.stream\fP is to be used for stream sockets.
Other possible types are \fISysSockets.dgram\fP,
\fISysSockets.rdm\fP, and \fISysSockets.seqpacket\fP.
.LP
All procedures which accept an address as
\fBARRAY OF BYTE\fP are offered in two variants:
one which implicitly takes \fBLEN\fP of the dynamic
array to calculate the length
(\fIOpen\fP, \fICreateOpenCondition\fP, and \fIListen\fP)
and one which has
an explicit length parameter
(\fIOpenL\fP, \fICreateOpenConditionL\fP, and \fIListenL\fP).
.LP
All connecting procedures (\fIOpen\fP, \fIOpenL\fP,
\fICreateOpenCondition\fP, and \fICreateOpenConditionL\fP)
accept an optional address in \fIbindto\fP where the socket
is to be bound locally. The \fIbind\fP parameter is to
be set to \fBTRUE\fP to take the address of \fIbindto\fP,
otherwise a default address selected by the underlying
operating system is taken. This specification is mainly
useful for services running on virtual IP addresses.
In case of \fIOpenL\fP and \fICreateOpenConditionL\fP,
the parameter \fIbindtolen\fP specifies the length of \fIbindto\fP.
.LP
\fIDrop\fP may be used to get rid of conditions created
by \fICreateOpenCondition\fP or \fICreateOpenConditionL\fP
which have not yet been successfully opened using \fITestAndOpen\fP.
.LP
Some socket options are set that override less useful defaults
of the underlying operating system:
.IP \(bu
\fISysSockets.optKeepAlive\fP and \fISysSockets.optOOBinline\fP are
set for all connections to get notified when a communication
partner no longer responds and to receive out-of-band-data in
the normal communication channel. The latter option is mainly
useful for protocols that still use telnet codes (telnet and FTP).
.IP \(bu
\fISysSockets.optReuseAddr\fP is set for all listening sockets
to avoid the trouble with the otherwise enforced time period
within a formerly used port must not be used again. This is
painful in case of network services that are to be restarted.
.LP
.I CreateOpenCondition
creates a condition which allows to wait for
the connection to \fIaddress\fP to be established or until
the try to connect fails.
When the condition returned by \fICreateOpenCondition\fP
evaluates to \fBTRUE\fP,
\fITestAndOpen\fP is to be used to test for success,
and if successful, to open the established connection 
as stream.
.I Open
serves as shorthand notation for
\fICreateOpenCondition\fP, followed by \fITasks.WaitFor\fP,
and \fITestAndOpen\fP.
.LP
\fIListen\fP
creates a port where other parties may connect to.
\fICreateAcceptCondition\fP allows to wait for
incoming connections which may be opened by \fIAccept\fP.
\fIRelease\fP allows to close a port
if no more connections are to be accepted.
.LP
\fIGetName\fP returns the address of a socket.
This is useful when a special address was used
which asked the UNIX kernel to choose an address.
.SH DIAGNOSTICS
Creating a condition is always successful,
\fIRelease\fP ignores any errors, and
all other operations return \fBFALSE\fP in case of errors.
.I UnixSockets
does not generate itself error events but propagates
those of \fISysSockets(3)\fP.
\fIAccept\fP relates its error events to \fIsocket\fP,
all other error events are related to \fIerrors\fP.
.SH "SEE ALSO"
.Tb UnixDomainSockets(3)
.Tp IPv4TCPSockets(3)
high-level interface for IPv4 TCP sockets
.Tp Networks(3)
general abstraction for network connections
.Tp SysSockets(3)
interfaces socket related system calls
.Tp UnixDomainSockets(3)
high-level interface for UNIX domain sockets
.Te
.\" ---------------------------------------------------------------------------
.\" $Id: UnixSockets.3,v 1.5 2005/01/21 11:06:58 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: UnixSockets.3,v $
.\" Revision 1.5  2005/01/21 11:06:58  borchert
.\" typo fixed
.\"
.\" Revision 1.4  2005/01/21 10:42:37  borchert
.\" Drop added
.\"
.\" Revision 1.3  2004/03/09 21:24:02  borchert
.\" UnixSockets is no longer restricted to SysSockets.stream;
.\" instead a type parameter has been added where necessary
.\"
.\" Revision 1.2  2001/04/30 09:30:47  borchert
.\" - bind, bindto, and bindtolen parameters added for connecting procedures
.\" - non-default socket options documented
.\"
.\" Revision 1.1  1995/03/13 10:00:52  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
