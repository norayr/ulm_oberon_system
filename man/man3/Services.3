.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-1995 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH Services 3 "Last change: 16 September 1996" "Release 0.5" "Ulm's Oberon System"
.SH NAME
Services \- type-independent definition of extensions
.SH SYNOPSIS
.Pg
TYPE Object = POINTER TO ObjectRec;
TYPE ObjectRec = RECORD (Disciplines.ObjectRec) END;
TYPE Type = POINTER TO TypeRec;
TYPE TypeRec = RECORD (Disciplines.ObjectRec) END;
TYPE Service = POINTER TO ServiceRec;
TYPE ServiceRec = RECORD (Disciplines.ObjectRec) END;
.sp 0.3
TYPE InstallProc = PROCEDURE (object: Object; service: Service);
.sp 0.7
TYPE LoadModuleProc = PROCEDURE (module: ARRAY OF CHAR) : BOOLEAN;
TYPE LoadServiceProc = PROCEDURE (service, for: ARRAY OF CHAR) : BOOLEAN;
TYPE LoaderInterface = POINTER TO LoaderInterfaceRec;
TYPE LoaderInterfaceRec =
   RECORD
      loadModule: LoadModuleProc;
      loadService: LoadServiceProc;
   END;
.sp 0.3
PROCEDURE InitLoader(if: LoaderInterface);
.sp 0.7
PROCEDURE CreateType(VAR type: Type; name, baseName: ARRAY OF CHAR);
PROCEDURE InitType(type: Type; name, baseName: ARRAY OF CHAR);
PROCEDURE Init(object: Object; type: Type);
PROCEDURE GetType(object: Object; VAR type: Type);
PROCEDURE GetTypeName(type: Type; VAR name: ARRAY OF CHAR);
PROCEDURE GetBaseType(type: Type; VAR baseType: Type);
PROCEDURE IsExtensionOf(type, baseType: Type) : BOOLEAN;
PROCEDURE SeekType(name: ARRAY OF CHAR; VAR type: Type);
.sp 0.7
PROCEDURE Create(VAR service: Service; name: ARRAY OF CHAR);
PROCEDURE Seek(name: ARRAY OF CHAR; VAR service: Service);
PROCEDURE Define(type: Type; service: Service; install: InstallProc);
PROCEDURE Install(object: Object; service: Service) : BOOLEAN;
PROCEDURE Supported(object: Object; service: Service) : BOOLEAN;
PROCEDURE Installed(object: Object; service: Service) : BOOLEAN;
PROCEDURE GetSupportedBaseType(object: Object; service: Service;
                               VAR baseType: Type);
.Pe
.SH DESCRIPTION
.I Services
associates objects which are an extension of
\fIServices.Object\fP with types.
The types of \fIServices\fP are first class objects
unlike the types of the Oberon language which only
allow for type tests and the \fBIS\fP operator.
Services are created independently of a particular type
and then implemented by different implementors for
different types and their extensions.
This mechanism allows to offer extensions for objects
without changing their implementation and without
adding object-specific code to modules which are
interested in using these extensions.
Implementing modules of services may even be loaded
dynamically, if supported by \fILoader(3)\fP.
.SS "Type system"
Modules which define extensions of \fIServices.Object\fP
must call \fICreateType\fP or \fIInitType\fP
during their initialization.
The parameters \fIname\fP and \fIbaseName\fP are strings
which should correspond to the names of the types
in dot notation, e.g. "Events.EventType" or "Streams.Stream".
If \fIServices.Object\fP is extended directly,
"" should be given instead of "Services.Object".
Note that \fIPersistentObjects.RegisterType\fP does
this already for extensions of \fIPersistentObjects.Object\fP.
\fIInitType\fP is an option when an extension
of \fIServices.Type\fP has been declared.
Later, any object which is created by this module must
be initialized by \fIInit\fP to connect objects with
their type.
Note that \fIPersistentObjects.Init\fP does this
already for extensions of \fIPersistentObjects.Object\fP.
The type system of \fIServices\fP does not include
\fIServices.Object\fP because this type is considered as
an abstract type which must not be instantiated.
.LP
Based on these initializations a couple of type oriented
operations are possible which extend the built-in
type test and the \fBIS\fP operator.
\fIGetType\fP retrieves the type of the given object.
\fIGetTypeName\fP returns the name previously given
to \fICreateType\fP or \fIInitType\fP.
\fIGetBaseType\fP returns the base type of a given type.
\fBNIL\fP is returned if the type is a direct
extension of \fIServices.Object\fP.
\fIIsExtensionOf\fP allows to perform a type test.
Giving the name of a type (e.g. "Streams.Stream"),
\fISeekType\fP returns the associated type.
The empty string (i.e. "") and "Services.Object" must not
be given because \fIServices.Object\fP itself is not
covered by the type system.
.LP
The combination of \fIGetType\fP and \fIIsExtensionOf\fP
allows to perform checks at runtime which are similar to
type checks for anchored types in Eiffel:
.Pg
Services.GetType(refObject, refType);
Services.GetType(otherObject, otherType);
IF Services.IsExtensionOf(otherType, refType) THEN
   (* otherObject has a type which extends that of refObject *)
END;
.Pe
.SS "Creating a Service"
Services are abstractions which are created independently
of a particular type but need type-specific implementations.
They are always extensions which are (in principle)
not known by the static implementors of a type.
Each service abstraction is represented by a module and
the name of the service is usually the name of this module.
\fICreate\fP is to be called by this module during the
initialization.
.LP
Additionally, this module usually defines an interface
and a per-object initialization procedure which has
this interface as parameter.
This initialization procedure is then later to be called
by service providers if their \fIinstall\fP interface
procedure of \fIService\fP gets called.
The other exported operations of this abstraction
should check for a valid interface,
and if not yet provided, call \fIInstall\fP for
this object, which in turn, causes the type-specific
service provider to invoke the service-specific
per-object initialization procedure.
.LP
There is no guarantee, however, that a service provider
for a specific type exists.
Consequently, each operation of a service abstraction
may fail just due to the missing availability of
a service provider.
This possibility may be checked for by \fISupported\fP
which returns \fBTRUE\fP for the given object when
the service abstraction is applicable.
\fIInstalled\fP returns \fBTRUE\fP if the object
is already prepared for the given service.
.LP
In some cases there is no necessity for a object-specific
initialization to access the service.
Then the service abstraction should offer
a type-specific initialization procedure which is to be called
by service providers during their initialization phase.
This type-specific init procedure is then free to
attach a discipline to the type which references the
interface of the provider.
\fIDefine\fP may then be called by the service abstraction
instead of the service provider with \fIinstall\fP
set to \fBNIL\fP.
The operations of the abstraction can now check
for the type of an object
(by using \fIGetSupportedBaseType\fP)
and seek for the interface at the
previously attached discipline.
\fIGetSupportedBaseType\fP must be used instead of
\fIGetType\fP because service offers extend to all
extensions of a type (if not overridden by service offers
for specific derived types).
.SS "Service providers"
Implementors of a service for a specific type
should always consult the manual page
which describes the service abstraction.
While usually \fIDefine\fP has to be called by the
service provider there may exist cases where this
is done by the service abstraction.
.LP
\fIDefine\fP should be called during the initialization phase.
The offered service does not only cover the given type
but all its extensions, if not overridden by
other providers of the same service for more specific types.
The \fIinstall\fP interface procedure gets called
once only for each object.
\fIInstalled\fP allows to test whether \fIinstall\fP
has been called for the given object or not.
.SS "Support for dynamic loading"
To avoid reference cycles, \fIServices\fP doesn't
import \fILoader(3)\fP but expects \fILoader(3)\fP
to call \fIInitLoader\fP during the startup and
to provide some hooks which allow to load dynamically
services.
.SH DIAGNOSTICS
.I Services
does not generate any error events
(to avoid a reference cycle problem because \fIEvents(3)\fP
imports \fIServices\fP).
There a couple of assertions which check for various
preconditions:
.IP \(bu
\fICreateType\fP and \fIInitType\fP:
the type \fIbaseName\fP must have been declared before
and \fIname\fP must not be declared twice.
.IP \(bu
\fIInit\fP: must not be called twice
for the same object and \fItype\fP must be non-NIL.
.IP \(bu
\fIIsExtensionOf\fP:
\fIbaseType\fP must be non-NIL.
.IP \(bu
\fICreate\fP:
\fIname\fP must not be declared twice.
.IP \(bu
\fIDefine\fP:
must not be called twice for the same combination of
\fItype\fP and \fIservice\fP;
\fIservice\fP must be non-NIL.
.IP \(bu
\fIInitLoader\fP must not be called twice and the
passed interface must be non-NIL.
.LP
Note that naming conflicts can be easily avoided
by adopting the naming conventions,
i.e. by prefixing all names with the module name.
.LP
Some errors are indicated by returning a \fBNIL\fP-value:
.IP \(bu
\fIGetType\fP returns \fBNIL\fP when \fIInit\fP
has not been called for this object.
.IP \(bu
\fIGetBaseType\fP returns \fBNIL\fP for the type
of \fIServices.Object\fP.
.IP \(bu
\fISeekType\fP returns \fBNIL\fP for unknown type names.
.IP \(bu
\fISeek\fP returns \fBNIL\fP for unknown service names.
.IP \(bu
\fIGetSupportedBaseType\fP returns \fBNIL\fP if
\fIservice\fP is not supported for \fIobject\fP.
.SH "SEE ALSO"
.Tb PersistentObjects(3)
.Tp Disciplines(3)
defines the base type of \fIServices.Object\fP
.Tp Keys(3)
definition of a meta service
.Tp Loader(3)
interface to dynamic loading of modules
.Tp PersistentObjects(3)
defines an important extension of \fIServices.Object\fP
.Tp RemoteObjects(3)
defines the "RemoteObjects" service
.Te
.\" ---------------------------------------------------------------------------
.\" $Id: Services.3,v 1.3 1996/09/16 16:58:33 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: Services.3,v $
.\" Revision 1.3  1996/09/16  16:58:33  borchert
.\" minor typo corrected
.\"
.\" Revision 1.2  1995/03/20  08:50:04  borchert
.\" hint added that Services.Object itself does not belong to the
.\" type system of Services
.\"
.\" ---------------------------------------------------------------------------
