.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-2005 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH DNSRecords 3 "Last change: 20 February 2005" "Release 0.5" "Ulm's Oberon System"
.SH NAME
DNSRecords \- support of DNS resource records according to RFC 1035
.SH SYNOPSIS
.Pg
(* non-obsolete record types from RFC 1035, 3.2.2 *)
CONST a = 1; ns = 2; cname = 5;
CONST soa = 6; ptr = 12; mx = 15;
CONST txt = 16;
.sp 0.3
CONST loc = 29; (* RFC 1876 *)
.sp 0.3
CONST aaaa = 28; (* RFC 1886 *)
.sp 0.3
CONST sig = 24; key = 25; nxt = 30; (* RFC 2065 *)
.sp 0.3
CONST srv = 33; (* RFC 2782 *)
.sp 0.3
CONST naptr = 35; (* RFC 2915 *)
.sp 0.3
(* QTYPE values = RFC 1035 = 3.2.3 *)
CONST axfr = 252; all = 255;
.sp 0.3
TYPE RRType = Types.Int32; (* unsigned 2-byte integer, a .. all *)
TYPE RRName = ARRAY 8 OF CHAR;
VAR rrName: ARRAY 256 OF RRName;
.sp 0.7
(* classes according to RFC 1035, section 3.2.4 *)
CONST classIN = 1; (* the Internet *)
CONST classCS = 2; (* obsolete CSNET class *)
CONST classCH = 3; (* the CHAOS class *)
CONST classHS = 4; (* Hesiod *)
CONST classNone = 254; (* RFC 2136 *)
CONST classAny = 255; (* any class *)
TYPE Class = Types.Int32;
TYPE ClassName = ARRAY 8 OF CHAR;
VAR className: ARRAY 256 OF ClassName;
.sp 0.7
CONST namelen = 512;
TYPE Name = ARRAY namelen OF CHAR; (* qualified DNS names *)
.sp 0.7
TYPE
   Record = POINTER TO RecordRec;
   RecordRec =
      RECORD
         (Objects.ObjectRec)
         next: Record;
         name: Name;
         type: RRType;
         class: Class;
         ttl: Types.Int32;
         rdata: Streams.Stream; (* data of this record *)
         pdata: Streams.Stream; (* entire response packet *)
         rpos: Streams.Count; (* position of rdata within pdata *)
      END;
.sp 0.7
TYPE ListOfTextRecords = POINTER TO ListOfTextRecordsRec;
TYPE ListOfTextRecordsRec =
      RECORD
         (Objects.ObjectRec)
         text: Name;
         next: ListOfTextRecords;
      END;
.sp 0.7
PROCEDURE ReadQuestion(s: Streams.Stream;
                       VAR name: ARRAY OF CHAR;
                       VAR type: RRType;
                       VAR class: Class) : BOOLEAN;
PROCEDURE WriteQuestion(s: Streams.Stream;
                        name: ARRAY OF CHAR;
                        type: RRType;
                        class: Class) : BOOLEAN;
.sp 0.7
PROCEDURE ReadRecord(s: Streams.Stream;
                     VAR name: ARRAY OF CHAR;
                     VAR type: RRType;
                     VAR class: Class;
                     VAR ttl: Types.Int32;
                     VAR rdata: Streams.Stream;
                     VAR rpos: Streams.Count) : BOOLEAN;
PROCEDURE WriteRecord(s: Streams.Stream;
                      name: ARRAY OF CHAR;
                      type: RRType;
                      class: Class;
                      ttl: Types.Int32;
                      rdata: Streams.Stream) : BOOLEAN;
.sp 0.7
PROCEDURE ReadRecords(s: Streams.Stream; count: INTEGER;
                      packetlen: Streams.Count;
                      VAR records: Record) : BOOLEAN;
.sp 0.7
PROCEDURE ReadName(s: Streams.Stream; VAR name: ARRAY OF CHAR) : BOOLEAN;
PROCEDURE WriteName(s: Streams.Stream; name: ARRAY OF CHAR) : BOOLEAN;
.sp 0.7
PROCEDURE ExtractName(record: Record; VAR name: ARRAY OF CHAR) : BOOLEAN;
PROCEDURE ExtractA(record: Record;
                   VAR ipaddr: IPv4Addresses.Address) : BOOLEAN;
PROCEDURE ExtractAAAA(record: Record;
                      VAR ipaddr: IPv6Addresses.Address) : BOOLEAN;
PROCEDURE ExtractMX(record: Record;
                    VAR preference: INTEGER;
                    VAR name: ARRAY OF CHAR) : BOOLEAN;
PROCEDURE ExtractTXT(record: Record;
                     VAR list: ListOfTextRecords) : BOOLEAN;
PROCEDURE ExtractSOA(record: Record;
                     VAR mname: ARRAY OF CHAR;
                     VAR rname: ARRAY OF CHAR;
                     VAR serial: Types.Int32;
                     VAR refresh: Types.Int32;
                     VAR retry: Types.Int32;
                     VAR expire: Types.Int32;
                     VAR minimum: Types.Int32) : BOOLEAN;
.sp 0.7
PROCEDURE WriteA(s: Streams.Stream;
                 ipaddr: IPv4Addresses.Address) : BOOLEAN;
PROCEDURE WriteAAAA(s: Streams.Stream;
                    ipaddr: IPv6Addresses.Address) : BOOLEAN;
PROCEDURE WriteMX(s: Streams.Stream;
                  preference: INTEGER;
                  name: ARRAY OF CHAR) : BOOLEAN;
PROCEDURE WriteTXT(s: Streams.Stream;
                   list: ListOfTextRecords) : BOOLEAN;
PROCEDURE WriteSOA(s: Streams.Stream;
                   mname: ARRAY OF CHAR;
                   rname: ARRAY OF CHAR;
                   serial: Types.Int32;
                   refresh: Types.Int32;
                   retry: Types.Int32;
                   expire: Types.Int32;
                   minimum: Types.Int32) : BOOLEAN;
.Pe
.SH DESCRIPTION
.I DNSRecords
supports the construction and extraction of DNS records within DNS
packets.  Note that the procedures that operate on streams need the
capabilities \fIStreams.seek\fP and \fIStreams.tell\fP due to the DNS
compression format that includes pointers to other parts within a DNS
packet. The position 0 of the stream must reflect the beginning of the
packet, i.e. the beginning of the header.  Hence, it is recommended
to use streams like \fIMemStreams(3)\fP or \fITexts(3)\fP that work on
in-memory buffers or represent in-memory buffers.
.PP
.I ReadQuestion
and
.I WriteQuestion
read or write a single question record from or to \fIs\fP.
Note that the actual number of question records is reflected
by the QR value within the header, see \fIDNSHeaders(3)\fP.
.PP
.I ReadRecord
and
.I WriteRecord
read or write a single resource record from or to \fIs\fP.  The stream
\fIrdata\fP that is returned by \fIReadRecord\fP is a substream
(see \fISubStreams(3)\fP) of \fIs\fP.  Note that \fIrdata\fP does not
necessarily cover the entire record if compression is used as it might
contain pointers to other parts of the DNS packet.
.PP
.I ReadRecords
allows to read an entire section of resource records from \fIs\fP
which is returned as a linear list. The returned records have following
additional fields:
.Tb pdata
.Tp next
points to the next record
(the original order is preserved).
.Tp rdata
sub stream of \fIs\fP that covers (the not necessarily complete)
record data.
.Tp pdata
substream of \fIs\fP that covers the entire packet. This allows
compressed names to be retrieved. Note that each of the substreams
maintains its own position. These substreams do not harm each other
but each of them manipulates the stream position of the underlying
stream \fIs\fP.
.Tp rpos
specifies the position of \fIrdata\fP within \fIpdata\fP.
.Te
The parameter \fIcount\fP specifies the number of records to
be read (the corresponding count is to be taken from the header
structure) and \fIpacketlen\fP gives the length of the entire
packet (this is used to create \fIpdata\fP from \fIs\fP).
.PP
Names can be read or written using
.I ReadName
and
.IR WriteName .
.I ReadName
supports the compression format but
.I WriteName
does not attempt to compress names.
.PP
The extraction of some popular records is supported.  \fIExtractName\fP
extracts compressed names for all record types that consist of a name
only like PTR, CNAME, or NS records. \fIExtractA\fP,
\fIExtractAAAA\fP, \fIExtractMX\fP, \fIExtractTXT\fP, and \fIExtractSOA\fP
extract the corresponding resource records. Note that in case of
\fIExtractTXT\fP multiple texts can be present within one resource record.
.PP
.I rrName
and
.I className
provide the printable names for all resource record types and
all classes. Unused (or yet unknown) values are represented
as decimal numbers.
.PP
Likewise, the generation of popular records is supported
by \fIWriteA\fP, \fIWriteAAAA\fP, \fIWriteMX\fP, \fIWriteTXT\fP,
and \fIWriteSOA\fP.
.SH DIAGNOSTICS
All procedures return \fBFALSE\fP in error case but do not
generate error events on their own.
.SH "SEE ALSO"
.Tb DNSHeaders(3)
.Tp DNSHeaders(3)
DNS packet header structure
.Te
.\" ---------------------------------------------------------------------------
.\" $Id: DNSRecords.3,v 1.3 2005/02/20 09:25:08 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: DNSRecords.3,v $
.\" Revision 1.3  2005/02/20 09:25:08  borchert
.\" write operations for popular records added
.\"
.\" Revision 1.2  2005/02/09 19:21:53  borchert
.\" table fixed
.\"
.\" Revision 1.1  2004/03/10 13:02:16  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
