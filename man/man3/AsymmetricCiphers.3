.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-1995 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH AsymmetricCiphers 3  "Last change: 17 September 1996" "Release 0.5" "Ulm's Oberon System"
.SH NAME
AsymmetricCiphers \- abstraction for public key ciphers
.SH SYNOPSIS
.Pg
CONST composed = 0; isPrivateKey = 1;
TYPE CapabilitySet = SET;
TYPE Cipher = POINTER TO CipherRec;
TYPE CipherRec = RECORD (BlockCiphers.CipherRec) END;
TYPE SplitProc = PROCEDURE (VAR public: Cipher; key: Cipher);
TYPE RandomStreamProc = PROCEDURE (s: Streams.Stream);
TYPE Interface = POINTER TO InterfaceRec;
TYPE InterfaceRec = 
   RECORD
      (Ciphers.InterfaceRec)
      compencrypt : Ciphers.CryptProc;
      split : SplitProc;
      randomStream : RandomStreamProc;
   END;
PROCEDURE Init (key: Cipher; if: Interface;
               cap: CapabilitySet; inLength, outLength: INTEGER);
PROCEDURE Capabilities (key: Cipher) : CapabilitySet;
PROCEDURE IsPublicKey (key: Cipher) : BOOLEAN;
PROCEDURE Split (VAR public: Cipher; key: Cipher);
PROCEDURE ComposedEncrypt (in: Streams.Stream; key: Cipher;
                 out: Streams.Stream) : BOOLEAN;
PROCEDURE ComposedEncryptPart (in: Streams.Stream; key: Cipher;
                 length: INTEGER; out: Streams.Stream) : BOOLEAN;
PROCEDURE ComposedEncryptBlock (in: Streams.Stream; key: Cipher;
                 out: Streams.Stream) : BOOLEAN;
PROCEDURE RandomStream(s: Streams.Stream; key: Cipher);
.Pe
.SH DESCRIPTION
\fIAsymmetricCiphers\fP provides an abstraction for the use of public key
ciphers. In general a public key consists basically of two parts: a public 
cipher which can encrypt data and a private cipher which can decrypt 
(hence the name asymmetric cipher since there are different keys for
encryption and decryption).
User A may send his public key over an insecure channel to another
user B for communication purposes. User B then encrypts the data using A's 
public key and sends it to him. Since only user A knows how to decrypt
data using his private key this communication can not wiretapped by an
intruder (at least in theory). 
.PP
Apart from an encryption and a decryption method an implementation has
to provide three other procedures for an asymmetric cipher:
\fIcompencrypt\fP is the composition of the encryption and decryption maps.
For most public key systems this will be the identical map. In this case it
may be given as \fBNIL\fP. \fIsplit\fP extracts the public part of a cipher.
\fIrandomStream\fP puts some random bytes onto the stream \fIs\fP which can be 
used as starting values for an encryption with the specific asymmetric cipher.
.PP
\fIInit\fP initializes the cipher \fIkey\fP with the given interface \fIif\fP,
the capabilities \fIcap\fP and the block lengths \fIinlength\fP and
\fIoutLength\fP.
.PP
\fICapabilites\fP returns the capabilities of an asymmetric cipher. The
supported capabilities are:
.Tb isPrivateKey
.Tp composed
is set when the composed map of the cipher is not the identity map
.Tp isPrivateKey
is set when the cipher is private
.Te
.PP
\fIIsPublicKey\fP returns \fBTRUE\fP if the cipher \fIkey\fP is a public
cipher, otherwise \fBFALSE\fP.
.PP
\fISplit\fP extracts the public part of the cipher \fIkey\fP and returns
it as a seperate cipher \fIpublic\fP. If \fIkey\fP itself is a public
cipher then \fIpublic\fP is set to \fIkey\fP.
.PP
\fIComposedEncrypt\fP, \fIComposedEncryptPart\fP and\fIComposedEncryptBlock\fP
encrypt the stream \fIin\fP using the composed map of the cipher \fIkey\fP.
If \fIcomposed\fP is not a capability of \fIkey\fP then the identiy map
is used instead. The use of these functions is similar to the use of 
\fICiphers.Encrypt\fP, \fICiphers.EncryptPart\fP and 
\fIBlockCiphers.EncryptBlock\fP. 
.PP
\fIRandomStream\fP puts some random bytes onto the stream \fIs\fP. These can
be used as the starting values of an encryption when the composed map of
the cipher is not the identical map.
.SH "SEE ALSO"
.Tb StreamCiphers(3)
.Tp BlockCiphers(3)
abstraction for the use of block ciphers
.Tp Ciphers(3)
abstraction for general ciphers and crypto systems
.Tp StreamCiphers(3)
abstraction for the use of stream ciphers
.Tp TCrypt(3)
implementation of the TCRYPT algorithm 
.Te
.SH AUTHOR
Michael Szczuka, University of Ulm
.\" ---------------------------------------------------------------------------
.\" $Id: AsymmetricCiphers.3,v 1.2 1996/09/17 08:09:21 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: AsymmetricCiphers.3,v $
.\" Revision 1.2  1996/09/17  08:09:21  borchert
.\" minor typos fixed
.\"
.\" Revision 1.1  1995/11/14  18:03:28  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
