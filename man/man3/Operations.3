.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-1995 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH Operations 3 "Last change: 16 September 1996" "Release 0.5" "Ulm's Oberon System"
.SH NAME
Operations \- generic interface for arithmetic operations
.SH SYNOPSIS
.Pg
CONST add = 0; sub = 1; mul = 2; div = 3; cmp = 4;
TYPE Operation = SHORTINT; (* [add..div] *)
TYPE Operand = POINTER TO OperandRec;
TYPE OperandRec = RECORD (PersistentDisciplines.ObjectRec) END;
.sp 0.3
TYPE CapabilitySet = SET; (* SET OF [add..cmp] *)
TYPE CreateProc = PROCEDURE (VAR op: Operand);
TYPE OperatorProc = PROCEDURE (op: Operation; op1, op2: Operand; VAR result: Operand);
TYPE AssignProc = PROCEDURE (VAR target: Operand; source: Operand);
TYPE CompareProc = PROCEDURE (op1, op2: Operand) : INTEGER;
TYPE Interface = POINTER TO InterfaceRec;
TYPE InterfaceRec =
   RECORD
      (Objects.ObjectRec)
      create: CreateProc;
      assign: AssignProc;
      op: OperatorProc;
      compare: CompareProc;
   END;
.sp 0.7
PROCEDURE Init(op: Operand; if: Interface; caps: CapabilitySet);
PROCEDURE Capabilities(op: Operand) : CapabilitySet;
PROCEDURE Compatible(op1, op2: Operand) : BOOLEAN;
.sp 0.3
PROCEDURE Add(op1, op2: Operand) : Operand;
PROCEDURE Add2(VAR op1: Operand; op2: Operand);
PROCEDURE Add3(VAR result: Operand; op1, op2: Operand);
.sp 0.3
PROCEDURE Sub(op1, op2: Operand) : Operand;
PROCEDURE Sub2(VAR op1: Operand; op2: Operand);
PROCEDURE Sub3(VAR result: Operand; op1, op2: Operand);
.sp 0.3
PROCEDURE Mul(op1, op2: Operand) : Operand;
PROCEDURE Mul2(VAR op1: Operand; op2: Operand);
PROCEDURE Mul3(VAR result: Operand; op1, op2: Operand);
.sp 0.3
PROCEDURE Div(op1, op2: Operand) : Operand;
PROCEDURE Div2(VAR op1: Operand; op2: Operand);
PROCEDURE Div3(VAR result: Operand; op1, op2: Operand);
.sp 0.3
PROCEDURE Compare(op1, op2: Operand) : INTEGER;
.sp 0.3
PROCEDURE Assign(VAR target: Operand; source: Operand);
PROCEDURE Copy(source, target: Operand);
.Pe
.SH DESCRIPTION
.I Operations
provides a generic interface for arithmetic operators
which covers the most usual operations:
addition, subtraction, multiplication and division.
Comparison and assignment are also supported.
.LP
The interface describes the set of available operations
and contains the necessary procedures.
The interface procedures should meet the specifications following:
.Is
.If create "\fBVAR\fP \fIop\fP: \fIOperand\fP
create \fIop\fP and call \fIInit\fP for \fIop\fP.
Note that \fIOperand\fP is an extension of \fIPersistentObjects.Object\fP.
Thus, \fIPersistentObjects.Init\fP must be called for newly created
operands.
.If assign "\fBVAR\fP \fItarget\fP: \fIOperand\fP; \fIsource\fP: \fIOperand\fP"
copy the value of \fIsource\fP to \fItarget\fP;
\fItarget\fP is of the appropriate type and already initialized.
.If op "\fIop\fP: \fIOperation\fP; \fIop1\fP, \fIop2\fP: \fIOperand\fP; \fBVAR\fP \fIresult\fP: \fIOperand\fP"
execute the given operator for the given operands \fIop1\fP and \fIop2\fP
and store the result in the already initialized \fIresult\fP.
\fIop1\fP and \fIop2\fP are already checked for type equality and
\fIresult\fP is of the appropriate type.
This procedure is not called with \fIop\fP values outside the
capability set of the associated interface.
\fIresult\fP is guaranteed to be not equal to \fIop1\fP or \fIop2\fP.
.If compare "\fIop1\fP, \fIop2\fP: \fIOperand\fP" "\fBINTEGER\fP"
compare the given operands and return an integer value
less than zero if \fIop1\fP is less than \fIop2\fP,
or equal to zero if \fIop1\fP equals \fIop2\fP,
or greater than zero if \fIop1\fP is greater than \fIop2\fP.
This procedure needs not to be implemented if \fIcmp\fP is not
in the set of capabilities.
.Ef
.LP
\fIInit\fP is typically called by modules which implement an
arithmetic data type to connect the interface \fIif\fP to the operand \fIop\fP.
\fICapabilities\fP returns the set of capabilities of \fIop\fP.
\fICompatible\fP checks \fIop1\fP and \fIop2\fP for being compatible,
i.e. they share the same interface.
.LP
Arithmetic operations are implemented in three forms:
.IP "\fIXXX\fP(\fIop1\fP, \fIop2\fP: \fIOperand\fP) : \fIOperand\fP"
Executes the named operation and returns a newly created operand.
.IP "\fIXXX2\fP(\fBVAR\fP \fIop1\fP, \fIop2\fP: \fIOperand\fP)"
Operates on \fIop1\fP and \fIop2\fP and stores the result into \fIop1\fP.
.IP "\fIXXX3\fP(\fBVAR\fP \fIresult\fP: \fIOperand\fP; \fIop1\fP, \fIop2\fP: \fIOperand\fP)"
Operates on \fIop1\fP and \fIop2\fP and stores the result into \fIresult\fP.
.LP
This procedures are provided for \fIXXX\fP equal to
\fIAdd\fP, \fISub\fP, \fIMul\fP or \fIDiv\fP.
\fIXXX2\fP and \fIXXX3\fP allow \fIresult\fP to be equal to
\fIop1\fP or \fIop2\fP.
.LP
\fICompare\fP compares the given operands and returns an integer
value which corresponds to the comparison
(see interface description of \fIcompare\fP).
.LP
\fIAssign\fP
copies the value of \fIsource\fP to \fItarget\fP.
Remember, that operands are pointers and a
pointer-assignment (i.e. \fItarget\fP := \fIsource\fP)
does not copy the value of an operand.
.I target
is newly created unless it is not equal to \fBNIL\fP and
its type is identical to that of \fIsource\fP.
.LP
The \fBVAR\fP parameters of the operation procedures are always
newly created.
.LP
\fICopy\fP
copies the value of \fIsource\fP to \fItarget\fP
without recreating \fItarget\fP.
\fItarget\fP must be of the appropriate type and
already initialized.
This is useful if old references to \fItarget\fP should
reference the new value.
.SH DIAGNOSTICS
\fIOperations\fP checks for some errors which may
lead to failed assertions:
.IP \(bu
The interface of the given operands must match.
.IP \(bu
Operations which are not supported by the associated
interface must not be called.
.SH "SEE ALSO"
.Tb PersistentObjects(3)
.Tp PersistentObjects(3)
interface for persistent objects
.Tp Scales(3)
specialized variant of \fIOperations\fP for measures
.Te
.\" ---------------------------------------------------------------------------
.\" $Id: Operations.3,v 1.6 1996/09/16 16:48:58 borchert Exp borchert $
.\" ---------------------------------------------------------------------------
.\" $Log: Operations.3,v $
.\" Revision 1.6  1996/09/16  16:48:58  borchert
.\" - assertions of Assertions replaced by built-ins
.\" - formatting changed
.\"
.\" Revision 1.5  1994/02/12  16:57:00  borchert
.\" Operand is now an extension of PersistentDisciplines.Object
.\"
.\" Revision 1.4  1993/01/11  08:26:20  borchert
.\" procedure Copy added
.\"
.\" Revision 1.3  1992/01/07  07:25:35  borchert
.\" Assign & XXX3: result is an out-parameter
.\" AssignProc & OperatorProc changed
.\"
.\" Revision 1.2  1992/01/04  09:48:55  borchert
.\" AssignProc changed
.\" Cmp renamed to Compare
.\" OperatorProc changed
.\"
.\" Revision 1.1  1991/12/30  12:46:44  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
