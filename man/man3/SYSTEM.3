.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-1995 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH SYSTEM 3 "Last change: 27 May 2000" "Release 0.5" "Ulm's Oberon System"
.SH NAME
SYSTEM \- system-dependent built-ins of Ulm's Oberon Compiler
.SH SYNOPSIS
.Pg
TYPE INT16 = (* 2-byte integer type *);
TYPE ADDRESS = (* LONGINT-compatible & traced by the GC *);
TYPE UNTRACEDADDRESS = (* LONGINT-compatible & ignored by the GC *);
TYPE COROUTINE = (* coroutine of Ulm's coroutine scheme *);
.sp 0.7
(* function procedures *)
PROCEDURE ADR(VAR variable: AnyType) : ADDRESS;
PROCEDURE BIT(address: LONGINT; n: LONGINT) : BOOLEAN;
PROCEDURE LSH(value, n: LONGINT) : LONGINT;
PROCEDURE ROT(value, n: LONGINT) : LONGINT;
PROCEDURE SIZE(type: AnyTypeName) : LONGINT;
PROCEDURE TAS(VAR flag: BOOLEAN) : BOOLEAN;
PROCEDURE VAL(type: AnyTypeName; value: AnyType) : type;
.sp 0.7
(* proper procedures *)
PROCEDURE GET(address: LONGINT; VAR variable: AnyBasicType);
PROCEDURE PUT(address: LONGINT; value: AnyBasicType);
PROCEDURE HALT(exitcode: LONGINT);
PROCEDURE MOVE(VAR fromVariable, toVariable: AnyType; n: LONGINT);
PROCEDURE WMOVE(from, to: LONGINT; n: LONGINT);
PROCEDURE WCLEAR(address: LONGINT; n: LONGINT);
PROCEDURE NEW(VAR ptr: AnyPointerType; n: LONGINT);
.sp 0.7
(* Ulm's coroutine scheme *)
PROCEDURE CRSPAWN(VAR cr: COROUTINE);
PROCEDURE CRSWITCH(cr: COROUTINE);
.sp 0.7
(* UNIX system calls *)
PROCEDURE UNIXCALL(syscall: INTEGER; VAR d0, d1: LONGINT;
                   arg1, arg2, ...: LONGINT) : BOOLEAN;
PROCEDURE UNIXFORK(VAR pid: LONGINT) : BOOLEAN;
PROCEDURE UNIXSIGNAL(signo: INTEGER; p: PROCEDURE;
                     VAR old: PROCEDURE; VAR error: INTEGER) : BOOLEAN;
.Pe
.SH DESCRIPTION
\fBSYSTEM\fP is a built-in module of the
compiler which is not searched for in the compilation environment.
Each Oberon implementation is free to decide about the
contents of \fBSYSTEM\fP.
Modules importing \fBSYSTEM\fP are therefore implementation-dependent.
.PP
Because these procedures are implemented by the compiler
they do not necessarily follow the strong declaration
semantics of the Oberon language.
\fBSIZE\fP, for example, takes the name of a type,
and \fBNEW\fP accepts any pointer variable but nothing else.
Some ad-hoc type names have been used in the synopsis to
describe the semantics of parameters:
.IP \(bu
\fIAnyType\fP means that the parameter may be of any type.
\fBARRAY OF BYTE\fP is something similar.
.IP \(bu
\fIAnyPointerType\fP describes an arbitrary pointer type.
Addresses (i.e. \fBADDRESS\fP, \fBUNTRACEDADDRESS\fP, or \fBLONGINT\fP
are not permitted here).
.IP \(bu
\fIAnyBasicType\fP specifies that any of the base types may
be given,
i.e. \fBSHORTINT\fP, \fBINT16\fP, \fBINTEGER\fP, \fBLONGINT\fP,
\fBREAL\fP, \fBLONGREAL\fP, \fBBOOLEAN\fP, \fBCHAR\fP,
\fBSET\fP, and \fBBYTE\fP are accepted but not
arrays, records, pointers, or procedure types.
.IP \(bu
\fIAnyTypeName\fP tells that a type identifier may be
given (but not an elaborate type construction).
.PP
Note that parameters which are named \fIvariable\fP accept
a variable but not an arbitrary designator.
.SS "Types"
Ulm's Oberon Compiler implements \fBSHORTINT\fP
as 1-byte integer and \fBINTEGER\fP as 4-byte integer.
To fill the rarely needed gap,
a 2-byte integer is provided by \fBINT16\fP.
\fBSHORT\fP of an \fBINT16\fP-value yields a \fBSHORTINT\fP,
and \fBLONG\fP returns an \fBINTEGER\fP.
But note that neither \fBSHORT\fP of an \fBINTEGER\fP,
nor \fBLONG\fP of a \fBSHORTINT\fP return an \fBINT16\fP-value.
This is necessary to preserve the standard semantics of
\fBSHORT\fP and \fBLONG\fP.
Conversions to an \fBINT16\fP-value may be achieved by \fBVAL\fP.
.PP
\fBADDRESS\fP and \fBUNTRACEDADDRESS\fP are to be preferred
over \fBLONTINT\fP for holding address values.
Note that unlike the ETH implementations \fBADR\fP does
not return a \fBLONGINT\fP-value but \fBADDRESS\fP.
Ulm's Oberon Compiler produces tables which allow
the garbage collection to follow pointer and address references.
\fBADDRESS\fP-values will be recognized by the
garbage collection, i.e. the objects they point to will keep
alive if the address belongs to a living structure and
the addresses will be updated automatically by
copying garbage collectors (see \fISysStorage(3)\fP).
This works not only when addresses point to the
beginning of an object (like ordinary pointers)
but also if they point to an arbitrary component of an object.
.PP
Variables of type \fBUNTRACEDADDRESS\fP are fine to
hold address values but are never looked at by the garbage collection.
This is useful for addresses returned by the
address space management (see \fIMemory(3)\fP).
Both, \fBADDRESS\fP and \fBUNTRACEDADDRESS\fP, are compatible
to \fBLONGINT\fP.
Nevertheless, the compiler feels free to emit warnings when
addresses are assigned to \fBLONGINT\fP because this
is generally to be considered as an unsafe technique.
.PP
Note that because of portability problems none of these
types should be used directly.
It is recommended to use the type declarations of
\fITypes(3)\fP which may be easily adapted to any
implementation of Oberon.
.SS "Function procedures"
\fBADR\fP returns the address of the given variable.
\fBBIT\fP returns the \fIn\fP-th bit of the 32-bit word
at \fIaddress\fP.
\fBLSH\fP shifts \fIvalue\fP
(which is always seen as 32-bit value)
by \fIn\fP bits logically to the left.
Logically means that the sign bit is not treated special.
Shifts to the right side may be achieved by giving a negative
value of \fIn\fP.
\fBROT\fP works like \fBLSH\fP but rotates \fIvalue\fP,
i.e. bits which are shifted out appear on the other side again.
.PP
\fBSIZE\fP returns the number of bytes which are occupied
by objects of the given type.
Note that the size of composite types is sometimes larger
than the sum of the sizes of the parts.
.PP
\fBTAS\fP is an atomic operation which sets \fBflag\fP
to \fBTRUE\fP and returns the old value of \fBflag\fP.
\fBTAS\fP allows to avoid critical regions to be entered twice:
.Pg
(* enter critical region only if flag was not set *)
IF ~SYSTEM.TAS(flag) THEN
   (* critical region *)
   flag := FALSE;
END;
.Pe
.PP
\fBVAL\fP allows a large number of system-dependent type conversions.
It permits any numerical type to be converted to any other
numerical type.
Other type conversions are supported only if both,
\fItype\fP and the type of \fIvalue\fP, occupy the
same number of bytes.
.SS "Proper procedures"
\fBGET\fP and \fBPUT\fP allow to access memory at arbitrary
memory addresses.
\fBHALT\fP works like the standard procedure \fBHALT\fP
but does not initiate any termination handling
(see \fIProcess(3)\fP).
It should be used in emergencies only.
.PP
\fBMOVE\fP copies \fIn\fP bytes of \fIfrom\fP to \fIto\fP.
\fBMOVE\fP does not check \fIn\fP against the length
of \fIfrom\fP or \fIto\fP.
\fBWMOVE\fP copies \fIn\fP 4-byte words from \fIfrom\fP to
\fIto\fP.
Note that \fBWMOVE\fP takes addresses while \fBMOVE\fP
works for variables only.
\fBWCLEAR\fP zeroes \fIn\fP 4-byte words beginning at \fIaddress\fP.
.PP
\fBNEW\fP
allocates \fIn\fP bytes and returns the address in \fIptr\fP.
This variant of \fBNEW\fP does not allocate a type tag
(i.e. type tests and type guards are not permitted for \fIptr\fP)
and the allocated data is considered as pointer-free by
the garbage collection.
.SS "Ulm's coroutine scheme"
\fBCRSPAWN\fP creates and returns a new coroutine \fIcr\fP
which takes the calling procedure as body.
The new coroutine is initially suspended and the callee returns immediately.
\fBCRSWITCH\fP allows to switch to another coroutine.
Note that \fBCRSWITCH\fP causes some variables of \fICoroutines(3)\fP
to be set automatically.
Further, \fBCRSWITCH\fP needs usually not to be called because
of \fITasks(3)\fP.
.SS "Interface to UNIX"
\fBUNIXCALL\fP offers an interface to all UNIX system calls
with the exception of \fIfork(2)\fP and \fIsigvec(2)\fP which
are covered by \fBUNIXFORK\fP and \fBUNIXSIGNAL\fP.
The system call number \fIsyscall\fP which may be imported
from \fISys(3)\fP must be a constant value.
The values of \fId0\fP and \fId1\fP will be put into
the equally named registers,
and, after the call, the values of the registers \fId0\fP and \fId1\fP
will be copied back to the variables.
The return value or error code (see \fIerrno(2)\fP) is usually found
in \fId0\fP.
An arbitrary number of arguments may be given which must
follow C-conventions, i.e. integers should be passed
as 4-byte integers (\fBINTEGER\fP or \fBLONGINT\fP),
and array or structure references as addresses
(\fBADDRESS\fP or \fBUNTRACEDADDRESS\fP) but not as pointers.
\fBUNIXCALL\fP returns \fBTRUE\fP on success and \fBFALSE\fP
if the carry bit has been set by the kernel.
Note that all common system calls are covered by the
library (e.g. \fISysIO(3)\fP, \fISysFile(3)\fP, \fISysIPC(3)\fP,
\fISysSockets(3)\fP etc).
.PP
\fBUNIXFORK\fP performs a \fIfork(2)\fP operation,
and returns, on success, a positive \fIpid\fP value to the
parent process and zero to the child process.
\fIpid\fP contains in case of failures (return of \fBFALSE\fP)
the error number.
Note that \fISysProcess(3)\fP should usually be used instead.
.PP
\fBUNIXSIGNAL\fP registers \fIp\fP as new reaction for
the signal number \fIsigno\fP. Values of 0 (default reaction)
or 1 (ignore) are legal for \fIp\fP.
On success, \fBUNIXSIGNAL\fP returns \fBTRUE\fP and returns
the old reaction in \fIold\fP.
In case of failures, the error number is returned in \fIerror\fP.
.SH DIAGNOSTICS
With the exception of the UNIX system calls there is no
checking performed at runtime by code generated by the compiler.
So use these calls at your own risk.
.SH "SEE ALSO"
.Tb UntaggedStorage(3)
.Tp Sys(3)
collection of all supported system call numbers
.Tp SysConversions(3)
conversions of Oberon records into C structures and vice versa
(may be needed for system calls)
.Tp SysTypes(3)
collection of types which correspond to
C type definitions which are used for system calls
.Tp UntaggedStorage(3)
allocation of storage which is not covered by the garbage collection
.Te
.SH BUGS
\fBCC\fP is not supported by Ulm's Oberon Compiler.
.\" ---------------------------------------------------------------------------
.\" $Id: SYSTEM.3,v 1.3 2000/05/27 11:50:56 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: SYSTEM.3,v $
.\" Revision 1.3  2000/05/27  11:50:56  borchert
.\" typing errors corrected
.\"
.\" Revision 1.2  1996/09/16  16:56:31  borchert
.\" minor typo fixed
.\"
.\" Revision 1.1  1995/04/13  08:41:56  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
