.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-2006 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH PathConditions 3 "Last change: 21 August 2006" "Release 0.5" "Ulm's Oberon System"
.SH NAME
PathConditions \- wait until a path of \fINames(3)\fP becomes valid
.SH SYNOPSIS
.Pg
TYPE Condition = POINTER TO ConditionRec;
TYPE ConditionRec = RECORD (Conditions.ConditionRec) END;
.sp 0.7
CONST noRoot = 0; invalidPath = 1; serverFailure = 2;
CONST accessFailed = 3; termination = 4;
CONST errors = 5;
.sp 0.3
TYPE ErrorCode = SHORTINT;
TYPE ErrorEvent = POINTER TO ErrorEventRec;
TYPE ErrorEventRec =
   RECORD
      (Events.EventRec)
      errorcode: ErrorCode;
   END;
VAR error: Events.EventType;
VAR errormsg: ARRAY errors OF Events.Message;
.sp 0.7
PROCEDURE Create(VAR cond: Condition; path: ARRAY OF CHAR;
                 root: Names.Node; auth: Shards.Lid);
PROCEDURE CreateCS(VAR cond: Condition; path: ConstStrings.String;
                   root: Names.Node; auth: Shards.Lid);
.sp 0.3
PROCEDURE GetNode(cond: Condition; VAR node: Names.Node;
                  errors: RelatedEvents.Object) : BOOLEAN;
.Pe
.SH DESCRIPTION
.I PathConditions
offers conditions which allow to wait until
a path of \fINames(3)\fP becomes valid.
As in \fIPaths(3)\fP, a path is a string whose components
are separated by \fIPaths.separator\fP (a slash).
.PP
\fICreate\fP and \fICreateCS\fP
create a condition which evaluates to \fBTRUE\fP
when \fIpath\fP (taken relatively to \fIroot\fP)
becomes accessible or a fatal error occurs (see below).
The authorization lid \fIauth\fP is passed to all operations
of \fINames(3)\fP, namely \fINames.GetNode\fP and
\fINames.TakeInterest\fP.
Note that this condition cannot be recycled,
i.e. if it once becomes \fBTRUE\fP, it remains \fBTRUE\fP.
.PP
Please note that all conditions by
.I PathConditions
are aborted if the process terminates, i.e. if \fIProcess.termination\fP
or \fIProcess.softTermination\fP is raised.  This allows the tasks
associated with each condition to terminate as well.
.PP
\fIGetNode\fP waits for \fIcond\fP becoming \fBTRUE\fP
(if this has not been done already), and
returns on success the node, or, in case of fatal errors,
relates all error events to \fIerrors\fP.
.SH DIAGNOSTICS
If \fIPathConditions\fP is enforced to abort a condition,
it forwards the error events of \fINames(3)\fP and generates
always an error event of its own:
.Tb serverFailure
.Tp noRoot
The \fIroot\fP parameter of \fICreate\fP or \fICreateCS\fP
is terminated (see \fIResources(3)\fP).
.Tp invalidPath
One of the intermediate components of \fIpath\fP does not have
the \fINames.domainCap\fP capability.
.Tp serverFailure
The \fINames(3)\fP implementation of one of the nodes of \fIpath\fP
did not return error events of \fINames(3)\fP.
This makes it impossible to distinguish between \fINames.nodeNotFound\fP
and other access failures.
.Tp accessFailed
\fIPathConditions\fP was unable to access one of the path components \(em
probably due to insufficient authorization.
.Tp termination
The condition is aborted because \fIProcess.termination\fP
or \fIProcess.softTermination\fP is raised.
.Te
Note that error events of \fIPathConditions\fP
include the path if printed with
\fIErrors.Write\fP or \fIConclusions.Conclude\fP.
.SH "SEE ALSO"
.Tb RelatedEvents(3)
.Tp Tasks(3)
synchronisation primitives
.Tp Names(3)
abstraction for name hierarchies
.Tp Paths(3)
accessing objects by paths
.Tp Process(3)
process termination events
.Tp RelatedEvents(3)
error handling
.Te
.SH BUGS
\fIPathConditions\fP shares the path component separator
with \fIPaths(3)\fP but not the interpretation that pairs
of separators are considered as one separator which is part
of the name of a component.
Instead, sequences of separators are taken as one separator.
.PP
\fIPathConditions\fP expects from all implementations of \fINames(3)\fP
with domain capability that terminated objects (see \fIResources(3)\fP)
vanish automatically together with the correct generation of
member events if requested to do so.
Otherwise, the conditions of \fIPathConditions\fP may hang
longer than expected.
.\" ---------------------------------------------------------------------------
.\" $Id: PathConditions.3,v 1.4 2006/08/21 09:46:12 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: PathConditions.3,v $
.\" Revision 1.4  2006/08/21 09:46:12  borchert
.\" termination error code added
.\"
.\" Revision 1.3  1996/07/22 12:39:10  borchert
.\" spelling error fixed
.\"
.\" Revision 1.2  1995/12/30  07:47:02  borchert
.\" minor fixes of the manual page
.\"
.\" Revision 1.1  1995/12/29  16:53:26  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
