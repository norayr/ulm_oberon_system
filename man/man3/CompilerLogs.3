.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-2001 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH CompilerLogs 3 "Last change: 10 July 2003" "Release 0.5" "Ulm's Oberon System"
.SH NAME
CompilerLogs \- provide log about loading and compilation processes
.SH SYNOPSIS
.Pg
TYPE Log = POINTER TO LogRec;
TYPE LogRec = RECORD (Disciplines.ObjectRec) END;
.sp 0.7
PROCEDURE Create(VAR log: Log; s: Streams.Stream);
.sp 0.7
PROCEDURE Open(log: Log; loglevel: INTEGER;
               VAR s: Streams.Stream) : BOOLEAN;
.sp 0.7
PROCEDURE SetLogLevel(log: Log; maxlevel: INTEGER);
PROCEDURE SetMaximalNestLevel(log: Log; maxnestlevel: INTEGER);
PROCEDURE Flatten(log: Log);
PROCEDURE EnterLevel(log: Log; VAR key: INTEGER);
PROCEDURE LeaveLevel(log: Log; key: INTEGER);
.sp 0.7
PROCEDURE LogLevel(log: Log) : INTEGER;
PROCEDURE NestLevel(log: Log) : INTEGER;
.Pe
.SH DESCRIPTION
.I CompilerLogs
provides a filter and formatting tool for logs about loading
and compilation processes. Filtering and formatting depends
on two state variables belonging to each log:
.IP \(bu
The log level is the amount of detail that is requested.
The minimal level is 0 (no log at all is to be given).
Larger log levels may be given to ask for more detailed informations.
A log level of -1 means that all informations are to be given
without restrictions.
.IP \(bu
The nesting level depends on the current nesting of the
loading and compilation process.
Nesting levels are not limited due to the recursive
nature of compilation and loading processes.
.PP
.I Create
creates a log that emits its output onto \fIs\fP.
The output stream should be line buffered to avoid any
delays in seeing log messages.
.SS "Generating Logs"
Log messages by the compiler or loader are created
using \fIOpen\fP. The log level of a log message
must be positive and \fIOpen\fP returns \fBFALSE\fP
if this message is to be suppressed by the current filtering rules.
No more than one log message stream returned
by \fIOpen\fP for a particular log must be open at any time
to avoid mixups of different log messages.
.PP
The current nesting level is increased by \fIEnterLevel\fP
and decreased by \fILeaveLevel\fP. To assure proper
nesting a key must be given to \fILeaveLevel\fP that
was previously returned by \fIEnterLevel\fP.
.SS "Filtering Logs"
.I SetLogLevel
allows to set the current log level. All log messages
with a log level larger than \fImaxlevel\fP will be suppressed.
A \fImaxlevel\fP of \fB0\fP causes all messages to be dropped,
a \fImaxlevel\fP of \fB-1\fP asks for all messages regardless
of their log level.
.PP
.I SetMaximalNestLevel
requests all log messages to be suppressed with a nesting level
larger than \fImaxnestlevel\fP. A \fImaxnestlevel\fP of \fB-1\fP
removes restrictions regarding the nest level. This is the default
setting.
.PP
By default, \fICompilerLogs\fP intends its output according to
the nest level of the individual log messages. \fIFlatten\fP
suppresses any indentation and sets the maximal nesting level
to \fB-1\fP (unrestricted).
.PP
.I LogLevel
and
.I NestLevel
return the current log and nesting level, respectively.
.SH DIAGNOSTICS
.I CompilerLogs
does not generate any error events on its own.
.SH "SEE ALSO"
.Tb CompilerErrors(3)
.Tp obload(1)
command line interface for \fIObjectLoader(3)\fP that allows
a log level to be specified.
.Tp CompilerErrors(3)
standardized events for compilation errors that are usually
not distributed by logs.
.Tp ObjectLoader(3)
general object loader for compiler databases,
currently the main source of log messages from loading processes.
.Te
.\" ---------------------------------------------------------------------------
.\" $Id: CompilerLogs.3,v 1.3 2003/07/10 09:05:52 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: CompilerLogs.3,v $
.\" Revision 1.3  2003/07/10 09:05:52  borchert
.\" typo fixed
.\"
.\" Revision 1.2  2001/04/05 16:37:02  borchert
.\" "SEE ALSO" section fixed
.\"
.\" Revision 1.1  2001/04/04 09:00:46  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
