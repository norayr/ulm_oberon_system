.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-1995 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH PersistentEvents 3 "Last change: 13 December 1995" "Release 0.5" "Ulm's Oberon System"
.SH NAME
PersistentEvents \- support of persistent events
.SH SYNOPSIS
.Pg
TYPE WriteProc = PROCEDURE (s: Streams.Stream; event: Events.Event) : BOOLEAN;
TYPE ReadProc = PROCEDURE (s: Streams.Stream;
                           VAR event: Events.Event) : BOOLEAN;
.sp 0.3
TYPE Interface = POINTER TO InterfaceRec;
TYPE InterfaceRec =
   RECORD
      (Objects.ObjectRec)
      write: WriteProc;
      read: ReadProc;
   END;
.sp 0.7
CONST bogusInput = 0; unknownEventType = 1; errors = 2;
TYPE ErrorEvent = POINTER TO ErrorEventRec;
TYPE ErrorEventRec =
   RECORD
      (Events.EventRec)
      code: SHORTINT;
      typeName: ARRAY 80 OF CHAR; (* in case of unknownEventType *)
   END;
VAR errormsg: ARRAY errors OF Events.Message;
VAR error: Events.EventType;
.sp 0.7
PROCEDURE Init(eventType: Events.EventType;
               name: ARRAY OF CHAR; if: Interface);
.sp 0.3
PROCEDURE Write(s: Streams.Stream; event: Events.Event) : BOOLEAN;
PROCEDURE Read(s: Streams.Stream; VAR event: Events.Event) : BOOLEAN;
.sp 0.3
PROCEDURE WriteErrors(s: Streams.Stream;
                      errors: RelatedEvents.Object) : BOOLEAN;
PROCEDURE ReadErrors(s: Streams.Stream;
                     VAR errors: RelatedEvents.Object) : BOOLEAN;
.Pe
.SH DESCRIPTION
.I PersistentEvents
supports the exchange of events and error lists through
.I PersistentObjects(3)
or similar methods.
Events are not persistent objects in the sense of
\fIPersistentObjects(3)\fP but in cases of a close relationship
between event record types and event types it is possible
to attach the associated marshalling procedures at the event type.
In cases where no support for persistence is given,
only texts of error messages (including the output of
\fIErrors.Write\fP) are preserved.
.PP
.I Init
allows to attach marshalling procedures to an event type
which will be later used if this event type is given in
the \fItype\fP component of the event record.
The interface is expected to meet following specification:
.Is "\fIs\fP: \fIStreams.Stream\fP; "
.If write "\fIevent\fP: \fIEvents.Event\fP" "\fBBOOLEAN\fP"
convert the given event record into a sequence of bytes.
Note that the basic components of the event record
(i.e. \fImessage\fP and \fItype\fP)
are not saved by the calling environment and that there is no
guarantee about the type of \fIevent\fP.
\fBFALSE\fP is to be returned in case of errors.
.If read "\fBVAR\fP \fIevent\fP: \fIEvents.Event\fP" "\fBBOOLEAN\fP"
create and restore the event from the input.
.Ef
.PP
.I Write
outputs the given event to the stream \fIs\fP in a form
which may be later read by \fIRead\fP.
.PP
.I WriteErrors
is intended for error objects which have an event queue
(see \fIRelatedEvents(3)\fP) and
writes the list of queued error events which is attached to
\fIerrors\fP to the given stream.
Despite to \fIConclusions\fP, the error queue gets not removed
afterwards.
A error list written by \fIWriteErrors\fP may be later read
by \fIReadErrors\fP.
.SH DIAGNOSTICS
All procedures return \fBFALSE\fP in case of failures.
Errors are related to the given streams.
.Tb unknownEventType
.Tp bogusInput
is raised by \fIRead\fP (or \fIReadErrors\fP) in case
of invalid input (which does not look as it would have
been generated by the corresponding \fIWrite\fP operation).
.Tp unknownEventType
is raised by \fIRead\fP (or \fIReadErrors\fP) if the
event type is not supported by the reading side
even after trying to load the necessary modules dynamically.
.Te
.SH "SEE ALSO"
.Tb PersistentObjects(3)
.Tp Errors(3)
support of event specific formatting procedures
.Tp Events(3)
general abstraction for events
.Tp PersistentObjects(3)
input and output of persistent objects
.Tp RelatedEvents(3)
object oriented error handling and error lists
.Tp RemoteEvents(3)
allows event types to be exported and imported
.Tp Streams(3)
abstraction for byte oriented input and output
.Te
.SH BUGS
Unlike \fIPersistentObjects(3)\fP, \fIPersistentEvents\fP
is not able to skip events in the input correctly if it is
unable to read it (error \fIunknownEventType\fP).
Thus, events should be embedded in persistent objects
(in the sense of \fIPersistentObjects(3)\fP)
if error recovery is a concern.
.\" ---------------------------------------------------------------------------
.\" $Id: PersistentEvents.3,v 1.2 1995/12/13 18:49:01 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: PersistentEvents.3,v $
.\" Revision 1.2  1995/12/13  18:49:01  borchert
.\" - renamed from ForeignEvents to PersistentEvents
.\" - added generic support for add-on persistency of event types
.\"
.\" Revision 1.1  1993/06/11  09:37:56  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
