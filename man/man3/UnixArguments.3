.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-1995 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH UnixArguments 3 "Last change: 23 August 2005" "Release 0.5" "Ulm's Oberon System"
.SH NAME
UnixArguments \- scan command line arguments
.SH SYNOPSIS
.Pg
TYPE Argument = POINTER TO ArgumentRec;
TYPE ArgumentRec = RECORD (Streams.StreamRec) END;
.sp 0.7
VAR usagecode: INTEGER;
.sp 0.7
PROCEDURE Init(infostring: ARRAY OF CHAR);
PROCEDURE Usage;
PROCEDURE GetFlag(VAR flag: CHAR) : BOOLEAN;
PROCEDURE GetOpt(VAR flag: CHAR; VAR plus: BOOLEAN) : BOOLEAN;
PROCEDURE Fetch(VAR arg: Streams.Stream);
PROCEDURE FetchString(VAR string: ARRAY OF CHAR);
PROCEDURE GetArg(VAR string: ARRAY OF CHAR) : BOOLEAN;
PROCEDURE OpenArg(VAR arg: Streams.Stream) : BOOLEAN;
PROCEDURE UngetArg;
PROCEDURE UngetOpt;
PROCEDURE AllArgs;
PROCEDURE GetCommandName(VAR name: ARRAY OF CHAR);
PROCEDURE GetPathName(VAR path: ARRAY OF CHAR);
.Pe
.SH DESCRIPTION
The
.I UnixArguments
module
supports reading and interpreting command line arguments,
according to the following standard:
.RS
.TP \w'\f3\(mi\f2x\0value\f1\0'u
.BI \(mi x
Flags
are single characters preceded by a
.BR \(mi .
.TP
.BI \(pl x
Options,
however, can be preceded either by
.B \(mi
or
.BR \(pl .
.TP
.BI \(mi xy
Flags or options with the same prefix
may be concatenated to one command argument,
without repeating the prefix.
.TP
.BI \(mi "x value"
A
value
follows a
flag/option
as the rest of the command argument or as the next command argument.
Nothing can follow a value in the same command argument.
.TP
.B \(mi
as a command argument
is interpreted as a non-flag/non-option argument.
It should designate standard input or standard output
in place of a file.
.TP
.B \(mi\(mi
as a command argument
terminates flag/option processing
but is itself not interpreted as an argument.
Successing command arguments,
even when beginning with
.B \(mi
or
.B \(pl
are considered not to contain flags nor options.
.RE
.PP
The procedures are used as follows:
.PP
.I Init
specifies
.I infostring
for
.I Usage
and (re)starts the reading cycle,
i.e. makes the first command argument
the next one to be read.
.PP
.I Usage
prints 'Usage: command infostring' onto \fIStreams.stderr\fP and
terminates program execution
('command' stands here for the actual processes' name).
.I Usage
passes
.I usagecode
as parameter to
.IR SysProcess.Exit .
.PP
.I AllArgs
calls
.I Usage
if any command arguments are not yet read.
.PP
.I GetFlag
and
.I GetOpt
read one flag resp. option
from the argument list
or return
.SM
.B FALSE
if all of them have been read.
.I GetOpt
sets
.I plus
to
.SM
.B TRUE
if the actual option is of the kind \fB\(pl\fP\fIx\fP,
otherwise
.SM
.BR FALSE .
.PP
.I GetArg
reads one arbitrary argument and
.I OpenArg
opens one argument for reading.
Both return
.SM
.B FALSE
if all arguments have been read already.
The stream opened by
.I OpenArg
is closed automatically.
.PP
.I FetchString
reads an argument and
.I Fetch
opens an argument for reading.
If the selected argument (part) is missing
.I Usage
is called implicitly.
The stream opened by
.I Fetch
is closed automatically.
.PP
.I UngetOpt
and
.I UngetArg
push back one flag/option resp.  argument per call
to the list of not yet read command arguments.
Note that
.I UngetOpt
is not able to skip command arguments
that have been read using
.I GetArg
or
one of the
.I Fetch
procedures.
.PP
.I GetPathName
returns the first argument which is by convention the name of the executable.
.I GetCommandName
returns the basename of the first argument (i.e. without leading
directory path).
.PP
Streams returned by \fIFetch\fP and \fIOpenArg\fP
are of type \fIUnixArguments.Argument\fP.
.SH EXAMPLE
.Pg
PROCEDURE WorkupArguments;
   VAR
      arg: Streams.Stream;
      flag: CHAR;
BEGIN
   xflag := FALSE;
   number := 1;
   string := defaultstring;
   UnixArguments.Init("[-x] [-s string] [-nnn] [file]...");
   WHILE UnixArguments.GetFlag(flag) DO
      CASE flag OF
      | "x":      xflag := TRUE;
      | "s":      UnixArguments.FetchString(string);
      | "0".."9": UnixArguments.UngetOpt;
                  UnixArguments.Fetch(arg); Read.IntS(arg, number);
      ELSE
         UnixArguments.Usage
      END;
   END;
   WHILE UnixArguments.GetArg(filename) DO
      IF filename = "-" THEN
         (* process Streams.stdin *)
      ELSE
         (* process filename *)
      END;
   END;
END WorkupArguments;
.Pe
.SH "SEE ALSO"
.Tb UnixCommandLine(3)
.Tp Args(3)
more general interface for flags and options
.Tp Read(3)
formatted input for streams
.Tp Streams(3)
stream operations;
output of \fIUsage\fP is directed to \fIStreams.stderr\fP
.Tp SysArgs(3)
the arguments are read from \fISysArgs.argv\fP
.Tp UnixCommandLine(3)
interfaces the UNIX command line on base of this module for \fIArgs(3)\fP
.Te
.SH AUTHOR
Martin Hasch,
University of Ulm
.br
revised by Andreas Borchert
.\" ---------------------------------------------------------------------------
.\" $Id: UnixArguments.3,v 1.10 2005/08/23 13:11:18 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: UnixArguments.3,v $
.\" Revision 1.10  2005/08/23 13:11:18  borchert
.\" references to Args and UnixCommandLine added
.\"
.\" Revision 1.9  1996/09/16 16:13:06  borchert
.\" formatting changed
.\"
.\" Revision 1.8  1992/03/24  09:22:53  borchert
.\" Arguments renamed to UnixArguments
.\"
.\" Revision 1.7  1991/06/21  15:14:06  borchert
.\" example corrected
.\"
.\" Revision 1.6  91/06/19  15:51:01  borchert
.\" stream parameter types changed to Streams.Stream
.\" 
.\" Revision 1.5  90/12/17  08:05:41  oberon
.\" command argument changed to command line argument
.\" 
.\" Revision 1.4  90/10/08  14:06:03  oberon
.\" GetCommandName and GetPathName added
.\" 
.\" Revision 1.3  90/10/04  17:14:43  oberon
.\" detab of example
.\" 
.\" Revision 1.2  90/10/04  17:12:19  oberon
.\" bug fix of Example: Usage replaced by Arguments.Usage
.\" 
.\" Revision 1.1  90/08/31  17:02:12  borchert
.\" Initial revision
.\" 
.\" ---------------------------------------------------------------------------
