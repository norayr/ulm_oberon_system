.\" ------------------------------------------
.\" Oberon System Documentation  AFB, mh  5/94
.\" (c) University of Ulm, SAI, D-89069 Ulm
.\" ------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH Dates 3 "Last change: 2 August 1995" "Release 0.5" "Ulm's Oberon System:   9 May 1994 Release 0.4 Ulm's Oberon System"
.SH NAME
Dates \- date and time conversions
.SH SYNOPSIS
.Pg
CONST january = 1;   april = 4;     july = 7;      october = 10;
CONST february = 2;  may = 5;       august = 8;    november = 11;
CONST march = 3;     june = 6;      september = 9; december = 12;
.sp 0.7
CONST sunday = 0;    tuesday = 2;   thursday = 4;  saturday = 6;
CONST monday = 1;    wednesday = 3; friday = 5;
.sp 0.7
CONST absolute = Scales.absolute;   relative = Scales.relative;
.sp 0.7
TYPE Date = POINTER TO DateRec;
TYPE DateRec = RECORD (Times.TimeRec) END;
.sp 0.7
TYPE Value = POINTER TO ValueRec;
TYPE ValueRec =
   RECORD
      (Objects.ObjectRec)
      days:  Scales.Value;
      hours: SHORTINT;            (* 0..23 *)
      minutes: SHORTINT;          (* 0..59 *)
      seconds: SHORTINT;          (* 0..59 *)
      msecs: INTEGER;             (* 0..999 *)
   END;
.sp 0.7
TYPE Info = POINTER TO InfoRec;
TYPE InfoRec =
   RECORD
      (Objects.ObjectRec)
      year: Scales.Value;
      month: SHORTINT;            (* january..december *)
      day: SHORTINT;              (* 1..31 *)
      weekday: SHORTINT;          (* sunday..saturday *)
      hour: SHORTINT;             (* 0..23 *)
      minute: SHORTINT;           (* 0..59 *)
      second: SHORTINT;           (* 0..59 *)
      msec: INTEGER;              (* 0..999 *)
   END;
.sp 0.7
TYPE LongInfo = POINTER TO LongInfoRec;
TYPE LongInfoRec =
   RECORD
      (InfoRec)
      yearday: INTEGER;           (* 1..366 *)
      week: SHORTINT;             (* 1..53, week begins on Sunday *)
      mweek: SHORTINT;            (* 1..53, week begins on Monday *)
      leapyear: BOOLEAN;
      daysInMonth: SHORTINT;      (* usu. 28..31, length of month *)
      daysInYear: INTEGER;        (* usu. 365..366, length of year *)
      tzInfo: Timezones.GlimpseRec;
   END;
.sp 0.7
VAR scale: Scales.Scale;
.sp 0.7
CONST invalidTime = 0;
CONST invalidDate = 1;
CONST bogusValue = 2;
CONST timeOutOfRange = 3;
CONST errorcodes = 4;
.sp 0.2
TYPE ErrorCode = SHORTINT;
TYPE ErrorEvent = POINTER TO ErrorEventRec;
TYPE ErrorEventRec =
   RECORD
      (Events.EventRec)
      errorcode: ErrorCode;
   END;
.sp 0.2
VAR errormsg: ARRAY errorcodes OF Events.Message;
VAR error: Events.EventType;
.sp 0.7
PROCEDURE Create(VAR time: Times.Time; type: SHORTINT);
.sp 0.7
PROCEDURE CreateYMD(VAR time: Times.Time; year, month, day: Scales.Value);
.sp 0.7
PROCEDURE SetValue(time: Times.Time; value: ValueRec);
PROCEDURE GetValue(time: Times.Time; VAR value: ValueRec);
.sp 0.7
PROCEDURE Set(time: Times.Time; info: InfoRec);
PROCEDURE SetT(time: Times.Time; tz: Timezones.Timezone; info: InfoRec);
PROCEDURE SetO(time: Times.Time; off: Timezones.Offset; info: InfoRec);
.sp 0.7
PROCEDURE Get(time: Times.Time; VAR info: InfoRec);
PROCEDURE GetT(time: Times.Time; tz: Timezones.Timezone; VAR info: InfoRec);
PROCEDURE GetO(time: Times.Time; off: Timezones.Offset; VAR info: InfoRec);
.sp 0.7
PROCEDURE GetLong(time: Times.Time; VAR info: LongInfoRec);
PROCEDURE GetLongT(time: Times.Time; tz: Timezones.Timezone; VAR info: LongInfoRec);
.sp 0.7
PROCEDURE Valid(year, month, day: Scales.Value) : BOOLEAN;
.sp 0.7
PROCEDURE Weekday(year, month, day: Scales.Value) : SHORTINT;
.Pe
.SH DESCRIPTION
.I Dates
implements a time scale
.I scale
that belongs to the
.I Times.family
family and allows particular efficiency
for the date and time conversions it also offers.
The module can handle all kinds of time measures
compatible to
.I Times.Time.
Therefore, type
.I Date
is made visible only so that it can be used in type tests.
.LP
The time scale this module is based upon consists of only
two units: days (``days'') and milliseconds (``msecs'').
For convenience, milliseconds are unfolded into hours, minutes,
seconds and remaining msecs.
Legal values cover at least one million years in either direction.
Absolute values are considered to be relative to
Jan 1, 1970, 0:00:00 GMT (universal time).
Thus, values are always independent of locations, daylight corrections
etc.
The conversions from a time to a calendar date and time of day,
and vice versa,
however, do take care of all these things.
.LP
The implemented calendar is the Gregorian calendar,
which replaced Julius Caesar's calendar in October 1582.
Dates before the Gregorian calendar reformation,
no matter how far in the past,
are considered Julian dates (for the sake of astronomers).
The fact that some countries switched to Gregorian calendar
much later than in 1582
is not reflected (for the sake of simplicity).
.LP
.I Create
creates a new instance of
.I time,
where
.I type
is either
.I absolute
or
.I relative,
and initializes it to zero.
Of course, the data type of
.I time
will be
.I Date.
.LP
.I CreateYMD
creates an absolute time representing year, month, day, 12:00:00 GMT.
.LP
.I SetValue
sets
.I time
to
.I value.
Values with negative components
(besides
.IR value.days )
are normalized first.
.I GetValue
obtains a time value.
.LP
.I Set,
.I SetT
and
.I SetO
set
.I time
to the date and time of day given in
.I info,
ignoring
.IR info.weekday .
While
.I Set
determines the time zone and daylight saving time correction
according to
.I Timezones.local,
.I SetT
does this according to the given time zone
.I tz,
whereas
.I SetO
uses an explicit offset
.I off
in respect to universal time
instead.
.LP
.I Get,
.I GetT
and
.I GetO
translate
.I time
to
.I info
using
.I Timezones.local,
.I tz
or
.I off
respectively.
.I GetLong
and
.I GetLongT
do essentially the same,
but fill in the additional fields of
.I LongInfoRec,
too.
In particular,
.I info.week
and
.I info.mweek
are week numbers within the year, starting with the first week
containing at least four days of January;
where weeks are considered to begin on Sunday resp. Monday.
.LP
.I Valid
returns
.B TRUE
if
.I year,
.I month
and
.I day
form a correct date of the implemented calendar,
otherwise
.B FALSE.
.LP
.I Weekday
returns the weekday of the given date.
.SH DIAGNOSTICS
All conversion procedures raise an
.I error
event which is passed to
.I Events
if they encounter illegal values.
Returned, resp. modified, values
are always guaranteed to be valid anyway.
.LP
Error events carry in
.I errorcode
an error code which can be one of the following:
.Tb timeOutOfRange
.Tp invalidTime
An
.I info
parameter represented no valid date and time.
.Tp invalidDate
A
.I year/month/day
parameter triple represented no valid date.
.Tp bogusValue
An inconsistent date value was detected.
This can also happen as a consequence of
.IR PersistentObjects.Read .
.Tp timeOutOfRange
A time was outside the range that can be represented as a
.I Date
value.
.Te
.SH "SEE ALSO"
.Tb PersistentObjects(3)
.Tp Times(3)
reference scale for time measurement systems
.Tp TimeIO(3)
formatted input and output of times and dates
.Tp Timezones(3)
abstraction for time zones
.Tp UnixTimezones(3)
implementation of time zones known to the system
.Tp PersistentObjects(3)
abstraction for persistent objects
.Tp Events(3)
event handling for error events
.Te
.SH AUTHOR
Martin Hasch, University of Ulm
.br
credits to Markus Schauler, University of Ulm,
for some work on the subject
.\" ---------------------------------------------------------------------------
.\" $Id: Dates.3,v 1.5 1995/08/02 16:09:06 martin Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: Dates.3,v $
.\" Revision 1.5  1995/08/02  16:09:06  martin
.\" typo corrected
.\"
.\" Revision 1.4  1994/05/14  17:52:04  martin
.\" improved error handling now documented
.\"
.\" Revision 1.3  1994/05/10  15:42:33  martin
.\" manual page replaced since module was replaced, too
.\"
.\" Revision 1.2  1994/05/10  15:34:05  borchert
.\" spelling errors fixed
.\"
.\" Revision 1.1  1994/02/15  15:17:58  schauler
.\" Initial revision
.\"
