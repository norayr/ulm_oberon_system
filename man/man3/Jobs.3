.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-1995 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH Jobs 3 "Last change: 30 December 1995" "Release 0.5" "Ulm's Oberon System"
.SH NAME
Jobs \- initiation of background tasks
.SH SYNOPSIS
.Pg
TYPE Job = POINTER TO JobRec;
TYPE JobRec = RECORD (Disciplines.ObjectRec) END;
TYPE Procedure = PROCEDURE (job: Job);
.sp 0.7
PROCEDURE Submit(job: Job; proc: Procedure);
.sp 0.3
PROCEDURE CreateCondition(VAR condition: Conditions.Condition; job: Job);
.Pe
.SH DESCRIPTION
.I Jobs
allows to submit jobs which are running in the background,
i.e. they do not block the calling task.
.I Jobs
is more efficient in the use of memory operations
than usual background initiations
because it maintaines a pool of unused tasks.
That means that not each call of \fISubmit\fP
causes a task to be newly created.
.PP
.I Submit
passes \fIproc\fP to a separate task for invocation of \fIproc\fP
with the given job (which may be an arbitrary extension of \fIJob\fP)
as parameter.
The job but not necessarily the associated task terminate
when \fIproc\fP returns.
Note that the \fIjob\fP parameter must be newly created
for each call of \fISubmit\fP and
\fIproc\fP must not call directly or indirectly \fITasks.Terminate\fP.
.PP
.I CreateCondition
returns a condition which evaluates to \fBTRUE\fP when
\fIjob\fP is finished.
.I CreateCondition
is free to return \fBNIL\fP if \fIjob\fP is already finished.
.SH DIAGNOSTICS
.I Jobs
does not generate any error events on its own.
.SH "SEE ALSO"
.Tb Tasks(3)
.Tp Tasks(3)
general task management
.Te
.SH BUGS
.I Jobs
belongs to the set of modules which may delay program termination
because they maintain a set of tasks
(like, for example, \fIRemoteObjects(3)\fP).
The task pool is released if a garbage collection starts
(\fIProcess.startOfGarbageCollection\fP)
or on program termination (\fIProcess.termination\fP), though.
.\" ---------------------------------------------------------------------------
.\" $Id: Jobs.3,v 1.1 1995/12/30 20:09:12 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: Jobs.3,v $
.\" Revision 1.1  1995/12/30  20:09:12  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
