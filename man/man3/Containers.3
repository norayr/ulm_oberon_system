.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-1996 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH Containers 3 "Last change: 28 November 1996" "Release 0.5" "Ulm's Oberon System"
.SH NAME
Containers \- collections of persistent objects
.SH SYNOPSIS
.Pg
TYPE Container = POINTER TO ContainerRec;
TYPE ContainerRec = RECORD (Services.ObjectRec) END;
.sp 0.7
TYPE Transaction = Transactions.Transaction;
TYPE Ident = LONGINT;
TYPE Object = PersistentDisciplines.Object;
.sp 0.7
CONST first = 0; last = 1; this = 2; pred = 3; succ = 4;
TYPE SearchDir = SHORTINT; (* first..succ *)
.sp 0.7
TYPE InsertProc = PROCEDURE (cont: Container; trans: Transaction;
                             VAR id: Ident; object: Object) : BOOLEAN;
TYPE DeleteProc = PROCEDURE (cont: Container; trans: Transaction;
                             id: Ident) : BOOLEAN;
TYPE ReplaceProc = PROCEDURE (cont: Container; trans: Transaction;
                              id: Ident; object: Object) : BOOLEAN;
TYPE ObtainProc = PROCEDURE (cont: Container; trans: Transaction;
                             id: Ident; VAR object: Object) : BOOLEAN;
TYPE ElementsProc = PROCEDURE (cont: Container; trans: Transaction;
                               VAR nelems: LONGINT) : BOOLEAN;
TYPE FindProc = PROCEDURE (cont: Container; trans: Transaction;
                           dir: SearchDir; VAR id: Ident) : BOOLEAN;
TYPE ReorganizeProc = PROCEDURE (cont: Container;
                                 trans: Transaction) : BOOLEAN;
TYPE SetAnchorProc = PROCEDURE (cont: Container; trans: Transaction;
                                id: Ident) : BOOLEAN;
TYPE GetAnchorProc = PROCEDURE (cont: Container; trans: Transaction;
                                VAR id: Ident) : BOOLEAN;
TYPE CloseProc = PROCEDURE (cont: Container) : BOOLEAN;
.sp 0.3
TYPE Interface = POINTER TO InterfaceRec;
TYPE InterfaceRec =
   RECORD
      (Objects.ObjectRec)
      insert: InsertProc;
      delete: DeleteProc;
      replace: ReplaceProc;
      obtain: ObtainProc;
      elements: ElementsProc;
      find: FindProc;
      reorganize: ReorganizeProc;
      setAnchor: SetAnchorProc;
      getAnchor: GetAnchorProc;
      close: CloseProc;
   END;
.sp 0.7
CONST insert = 0; delete = 1; replace = 2; obtain = 3;
CONST elements = 4; find = 5; reorganize = 6;
CONST setAnchor = 7; getAnchor = 8; close = 9;
TYPE Capability = SHORTINT; (* insert..close *)
TYPE Operation = SHORTINT;  (* insert..close *)
TYPE CapabilitySet = SET;   (* OF Capability *)
.sp 0.7
CONST notSupported = 0;
CONST badParams = 1;
CONST alreadyClosed = 2;
CONST operationFailed = 3;
CONST errors = 4;
TYPE ErrorCode = SHORTINT; (* notSupported..operationFailed *)
TYPE ErrorEvent = POINTER TO ErrorEventRec;
TYPE ErrorEventRec =
   RECORD
      (Events.EventRec)
      errcode: ErrorCode;
      operation: Operation;
      trans: Transaction;
   END;
VAR error: Events.EventType;
VAR errormsg: ARRAY errors OF Events.Message;
.sp 0.7
PROCEDURE Init(cont: Container; if: Interface);
PROCEDURE Close(cont: Container) : BOOLEAN;
PROCEDURE Capabilities(cont: Container) : CapabilitySet;
.sp 0.7
PROCEDURE Insert(cont: Container; trans: Transaction;
                 VAR id: Ident; object: Object) : BOOLEAN;
PROCEDURE Delete(cont: Container; trans: Transaction;
                 id: Ident) : BOOLEAN;
PROCEDURE Replace(cont: Container; trans: Transaction;
                  id: Ident; object: Object) : BOOLEAN;
PROCEDURE Obtain(cont: Container; trans: Transaction;
                 id: Ident; VAR object: Object) : BOOLEAN;
.sp 0.7
PROCEDURE Elements(cont: Container; trans: Transaction;
                   VAR nelems: LONGINT) : BOOLEAN;
PROCEDURE Find(cont: Container; trans: Transaction; dir: SearchDir;
               VAR id: Ident) : BOOLEAN;
.sp 0.7
PROCEDURE Reorganize(cont: Container; trans: Transaction) : BOOLEAN;
.sp 0.7
PROCEDURE SetAnchor(cont: Container; trans: Transaction;
                    id: Ident) : BOOLEAN;
PROCEDURE GetAnchor(cont: Container; trans: Transaction;
                    VAR id: Ident) : BOOLEAN;
.sp 0.7
PROCEDURE Exchange(cont: Container; trans: Transaction; id: Ident;
                   new: Object; VAR old: Object) : BOOLEAN;
PROCEDURE Remove(cont: Container; trans: Transaction;
                 id: Ident; VAR object: Object) : BOOLEAN;
.Pe
.SH DESCRIPTION
.I Containers
defines an extensible abstraction for storing persistent objects
in collections. Members of such collections are identified by
a unique number
.I id
which is generated by the underlying implementations
when the object is inserted into the container.
.LP
Implementors of containers have to call
.I Init
during their opening process
providing their specific implementations
of the container operations in form of an interface record
.IR if .
.I Containers 
expects
the interface procedures to fulfill the following specifications: 
.Is "\fIcont\fP: \fIContainer\fP"
.If insert "; \fItrans\fP: \fITransaction\fP; \fBVAR\fP \fIid\fP: \fIIdent\fP; \fIobject\fP: \fIObject\fP" "\fBBOOLEAN\fP"
Insert a new object
.I object
into the container
.I cont
and return a unique
.I id
for accessing the stored object.
.If delete "; \fItrans\fP: \fITransaction\fP; \fIid\fP: \fIIdent\fP" "\fBBOOLEAN\fP"
Delete the object identified
by
.I id
from the container.
.If replace "; \fItrans\fP: \fITransaction\fP; \fIid\fP: \fIIdent\fP; \fIobject\fP: \fIObject\fP" "\fBBOOLEAN\fP"
Delete the object identified by
.I id
from the container and replace it by
.IR object .
.If obtain "; \fItrans\fP: \fITransaction\fP; \fIid\fP: \fIIdent\fP; \fBVAR\fP \fIobject\fP: \fIObject\fP" "\fBBOOLEAN\fP"
Retrieve the object identified
by
.I id
from the container.
.If elements "; \fItrans\fP: \fITransaction\fP; \fBVAR\fP \fInelems\fP: \fBLONGINT\fP" "\fBBOOLEAN\fP"
Return the number of elements currently stored in
.IR cont .
.If find "; \fItrans\fP: \fITransaction\fP; \fIdir\fP: \fISearchDir\fP; \fBVAR\fP \fIid\fP: \fIIdent\fP" "\fBBOOLEAN\fP"
Find out certain object identifications
dependent on
.I dir
and
.I id
where
.I dir
defines the direction and
.I id
the starting position of the search.
.Tb pred
.Tp this
Determine if
an object with
.I id
is stored.
.Tp succ
Increment
.I id
to the next greater object identification used.
.Tp pred
Decrement
.I id
to the next smaller identification used.
.Tp first
Return the lowest
.I id
in use.
.Tp last
Return the highest
.I id
in use.
.Te
Implementations should be aware that
in combination with
.IR this ,
.I succ 
and
.IR pred
the initial value of
.I id
has to be used for computation
(even if declared as
.BR VAR ).
.If reorganize "; \fItrans\fP: \fITransaction\fP" "\fBBOOLEAN\fP"
Reorganize the container in an
implementation-dependent manner.
.If setAnchor "; \fItrans\fP: \fITransaction\fP; \fIid\fP: \fIIdent\fP" "\fBBOOLEAN\fP"
Define or redefine an anchor
.I id
for the container (see below).
.If getAnchor "; \fItrans\fP: \fITransaction\fP; \fBVAR\fP \fIid\fP: \fIIdent\fP" "\fBBOOLEAN\fP"
Return the anchor
.I id
of the container.
.If close "" "\fBBOOLEAN\fP"
Execute necessary clean-up activities before the container is
closed.
.Ef
.LP
Implementations are free to implement all of the listed operations
or only a subset of them.
Note, however, that the set of implemented operations must
not be empty.
The set of capabilities is computed by
.I Containers
from the interface procedures not set to
.B NIL
and can be accessed by
.IR Capabilities .
All accessing operations are always associated to a
running transaction which is given by \fItrans\fP
(see \fITransactions(3)\fP).
There may be implementations of \fIContainers\fP which
ignore \fItrans\fP and accept any value for it,
including \fBNIL\fP.
.LP
Applications can access a container by the
exported procedures which in general follow the specifications
of the corresponding interface procedures.
.I SetAnchor
and 
.I GetAnchor
are intended to maintain the identification of an anchor object
for the container.
This feature is very helpful for implementations that want to
organize the objects in a certain way and need some handles
for this goal (e.g. the beginning of a list or the root of a tree).
.LP
.I Remove 
is equivalent to
.I Obtain 
+ 
.I Delete,
.I Exchange
has the same effect as
.I Obtain
and
.IR Replace .
Any other procedure call is directly delegated to the corresponding
interface procedure.
.SH DIAGNOSTICS
Insufficient capabilities of the underlying implementations,
providing an illegal
.I dir
parameter to
.IR Find ,
an attempt to operate on closed containers,
or any failures on the implementation level
will cause
.I Containers
to return
.B FALSE
and to raise an event of type
.I error
and relate it to
.IR cont .
Additionally,
the underlying implementations
are expected to generate more detailed error events.
.LP
.I Init
checks its parameters for validity by assertions.
.SH "SEE ALSO"
.Tb PersistentDisciplines(3)
.Tp RelatedEvents(3)
error handling
.Tp PersistentDisciplines(3)
definition of persistent objects with additional data structures
.Tp PersistentObjects(3)
basic definition of persistent objects
.Tp RemoteContainers(3)
remote access to containers
.Tp Services(3)
type system of the library
.Tp StandardContainers(3)
standard implementation of containers
.Tp Transactions(3)
abstraction for distributed transactions
.Te
.SH AUTHOR
Werner Stanglow (stanglow@mathematik.uni-ulm.de),
revisions are due to Andreas Borchert.
.\" ---------------------------------------------------------------------------
.\" $Id: Containers.3,v 1.3 1996/11/28 10:48:24 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: Containers.3,v $
.\" Revision 1.3  1996/11/28  10:48:24  borchert
.\" signatures added to the if descriptions
.\"
.\" Revision 1.2  1996/11/21  19:14:04  borchert
.\" - extended error handling
.\" - some identifiers renamed
.\" - synopsis reformatted
.\"
.\" Revision 1.1  1996/11/21  14:02:19  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
