.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-2004 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH LinearizedStructures 3 "Last change: 3 June 2004" "Release 0.5" "Ulm's Oberon System"
.SH NAME
LinearizedStructures \- save and load cyclic data structures
.SH SYNOPSIS
.Pg
TYPE Object = PersistentObjects.Object;
.sp 0.7
CONST missingReset = 0;      (* Reset must be called before switching mode *)
CONST cannotReadHeader = 1;  (* failed to read object header *)
CONST invalidHeader = 2;     (* corrupted/invalid object header *)
CONST cannotReadObject = 3;  (* failed to read object *)
CONST unknownKey = 4;        (* unknown key encountered *)
CONST cannotWriteHeader = 5; (* failed to write object header *)
CONST cannotWriteObject = 6; (* failed to write object *)
CONST typeGuardFailure = 7;
CONST errors = 8;
.sp 0.3
TYPE ErrorCode = SHORTINT; (* missingReset.. *)
TYPE ErrorEvent = POINTER TO ErrorEventRec;
TYPE ErrorEventRec =
   RECORD
      (Events.EventRec)
      errorcode: ErrorCode;
   END;
.sp 0.3
VAR error: Events.EventType;
VAR errormsg: ARRAY errors OF Events.Message;
.sp 0.7
PROCEDURE Reset(s: Streams.Stream);
.sp 0.3
PROCEDURE Read(s: Streams.Stream; VAR object: Object) : BOOLEAN;
PROCEDURE GuardedRead(s: Streams.Stream; guard: Services.Type;
                      VAR object: Object) : BOOLEAN;
PROCEDURE Write(s: Streams.Stream; object: Object) : BOOLEAN;
.Pe
.SH DESCRIPTION
.I LinearizedStructures
supports the export and import of persistent data structures which
may contain reference cycles.
Just replace \fIPersistentObjects.Read\fP by
\fILinearizedStructures.Read\fP,
\fIPersistentObjects.GuardedRead\fP by
\fILinearizedStructures.GuardedRead\fP, and
\fIPersistentObjects.Write\fP by \fILinearizedStructures.Write\fP.
Additionally, \fBNIL\fP can be given to \fILinearizedStructures.Write\fP
and \fILinearizedStructures.Read\fP may return \fBNIL\fP.
.PP
.I LinearizedStructures
works by attaching disciplines to the given stream and
the objects being read.
.I Reset
allows to remove these disciplines and is required on
switching from reading to writing and vice versa.
.PP
Please note that the objects must be read in the same order
as they have been written before.
It's wise to call \fIReset\fP before and after
a sequence of read and write operations and to avoid seek operations
during saving/loading and stream positioning inside a group of objects.
.SH DIAGNOSTICS
Errors and failures detected by
.I LinearizedStructures
lead to events which are related to the stream.
Following error codes are implemented:
.Tb cannotWriteHeader
.Tp missingReset
.I Reset
wasn't called before switching from reading to writing mode.
.Tp cannotReadHeader
.I Read
wasn't able to read an object header.
.Tp invalidHeader
An invalid or corrupted header was read by \fIRead\fP.
.Tp cannotReadObject
\fIPersistentObjects.Read\fP failed for some reason.
.Tp unknownKey
An object header references a yet unknown object.
This may happen if reading didn't start at the beginning of the list
or some objects were skipped.
.Tp cannotWriteHeader
.I Write
was unable to write an object header.
.Tp cannotWriteObject
\fIPersistentObjects.Write\fP failed for some reason.
.Tp typeGuardFailure
The guard of \fIGuardedRead\fP did not match the type of the object read.
.Te
.SH "SEE ALSO"
.Tb ModularizedStructures(3)
.Tp ModularizedStructures(3)
distributed graphs of persistent objects across multiple byte sequences
.Tp PersistentObjects(3)
input and output of persistent objects
.Tp RelatedEvents(3)
error handling
.Te
.\" ---------------------------------------------------------------------------
.\" $Id: LinearizedStructures.3,v 1.4 2004/06/03 08:23:24 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: LinearizedStructures.3,v $
.\" Revision 1.4  2004/06/03 08:23:24  borchert
.\" error typeGuardFailure added
.\"
.\" Revision 1.3  1996/09/16 16:23:00  borchert
.\" GuardedRead added
.\"
.\" Revision 1.2  1994/08/01  15:15:28  borchert
.\" NIL can now be given to Write and Read may return NIL
.\"
.\" Revision 1.1  1994/08/01  14:29:18  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
