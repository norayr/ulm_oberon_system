.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-1996 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH ObjectTransactions 3 "Last change: 28 November 1996" "Release 0.5" "Ulm's Oberon System"
.SH NAME
ObjectTransactions \- transactions which involve one object only
.SH SYNOPSIS
.Pg
TYPE Object = Services.Object;
.sp 0.7
TYPE BeginProc = PROCEDURE (object: Object;
                            trans: Transactions.Transaction) : BOOLEAN;
TYPE TransProc = PROCEDURE (object: Object) : BOOLEAN;
TYPE Interface = POINTER TO InterfaceRec;
TYPE InterfaceRec =
   RECORD
      (Objects.ObjectRec)
      begin: BeginProc;
      commit, abort, release: TransProc;
   END;
.sp 0.7
CONST notSupported = 0;
CONST oneObjectOnly = 1;
CONST alreadyAttached = 2;
CONST authorizationFailed = 3;
CONST invalidTransition = 4;
CONST noObjectAttached = 5;
CONST transReleased = 6;
CONST errors = 7;
.sp 0.3
TYPE ErrorCode = SHORTINT; (* notSupported..transReleased *)
TYPE ErrorEvent = POINTER TO ErrorEventRec;
TYPE ErrorEventRec =
   RECORD
      (Events.EventRec)
      errorcode: ErrorCode;
   END;
.sp 0.3
VAR error: Events.EventType;
VAR errormsg: ARRAY errors OF Events.Message;
.sp 0.7
(* implementors side *)
PROCEDURE Register(type: Services.Type; if: Interface);
.sp 0.7
(* client side *)
PROCEDURE Supported(object: Object) : BOOLEAN;
PROCEDURE Create(VAR trans: Transactions.Transaction;
                 object: Object; pot: Shards.Pot;
                 errors: RelatedEvents.Object) : BOOLEAN;
.Pe
.SH DESCRIPTION
.I ObjectTransactions
is a trivial implementation of \fITransactions(3)\fP
which interfaces those objects which do not support distributed
transactions.
.SS Supporting a Type for \fIObjectTransactions\fP
Implementors which offer transactions for one specific kind
of objects only have to register themselves at initialization time
by calling \fIRegister\fP.
The given interface \fIif\fP is a great simplification in
comparison to that of \fITransactions\fP and is expected to
meet following specifications:
.Is "\fIobject\fP: \fIObject\fP"
.If begin "; \fItrans\fP: \fITransactions.Transaction\fP"
Begin a transaction in the sense of \fITransactions(3)\fP
for \fIobject\fP.
Note that \fIObjectTransactions\fP guarantees that the transaction
is neither already running nor released.
\fBFALSE\fP is to be returned if the implementation is for
other reasons unable to start a transaction.
Those operations of \fIobject\fP which have a
transaction parameter (e.g. implementations of \fIContainers(3)\fP)
should check it against \fItrans\fP
and fail if it does not match.
.If commit ""
Commit the running transaction for \fIobject\fP.
In case of failures, \fBFALSE\fP is to be returned and the
transaction is considered as aborted, then.
.If abort ""
Abort the running transaction for \fIobject\fP.
\fBFALSE\fP may be returned in case of problems \(em
but the transaction is to be considered aborted
afterwards independent from the return value, though.
.If release ""
Final operation on a transaction \fIobject\fP which
should cause all resources to be released.
.Ef
.SS Running Transactions
.I Supported
allows to check whether an object supports the interface of
this module or not.
.PP
.I Create
creates a transaction in the sense of \fITransactions(3)\fP
with \fIobject\fP attached (if non-\fBNIL\fP) which is
protected by \fIpot\fP (which may be \fBNIL\fP if the
transaction should run unprotected).
If \fIobject\fP was not given initially,
one and only one supported object may be attached later by
\fITransactions.Attach\fP.
Note that objects supported by \fIObjectTransactions\fP
are not allowed to participate in more than one transaction
concurrently.
.PP
All operations of \fITransactions\fP with the exception
of \fITransactions.GetName\fP may be applied later under
the restriction that just one object may be attached to it.
.SS Termination of Transactions
.I ObjectTransactions
supports \fIResources(3)\fP:
.IP \(bu
Released transactions will terminate.
.IP \(bu
If a transaction becomes \fIResources.unreferenced\fP
or \fIResources.terminated\fP, it will be released
automatically (if this has not been done already).
This includes an implicit abortion if the transaction was active.
.IP \(bu
The termination of transaction objects is propagated
to the associated transaction.
.PP
Note that terminations by means of \fIResources.Notify\fP
may bypass the authorization which is needed for
\fITransactions.Release\fP. This works, however,
only if there are no filter objects involved
because proxy termination is (usually)
not propagated to the original object
(see, for example, \fIRemoteObjects(3)\fP).
.SH DIAGNOSTICS
All operations return \fBFALSE\fP in error cases
and generate appropriate error events in addition to those
generated by underlying levels.
Following error events may be generated by \fIObjectTransactions\fP:
.Tb authorizationFailed
.Tp notSupported
The given object has no support for this module,
i.e. nobody has called \fIRegister\fP for its type or one
of its base types.
.Tp oneObjectOnly
Transactions created by \fIObjectTransactions\fP accept one
supported object only.
.Tp alreadyAttached
Parallel transactions on one object are not supported.
.Tp authorizationFailed
This error gets raised if the given lid \fIauth\fP does
not match the \fIpot\fP which has been passed to \fICreate\fP.
.Tp invalidTransition
\fIObjectTransactions\fP checks all state transitions for
validity, e.g. an aborted transaction must not be committed, or
a not yet begun transaction cannot be aborted.
.Tp noObjectAttached
\fIObjectTransactions\fP does not allow transactions to
be started as long there is no object attached to it.
.Tp transReleased
None of the operations must be called after a
transaction has been released.
.Te
.SH "SEE ALSO"
.Tb Transactions(3)
.Tp Resources(3)
termination of objects
.Tp Transactions(3)
general abstraction of distributed transactions for
which \fIObjectTransactions\fP offers a trivial implementation
.Tp TransStreams(3)
transaction streams support \fIObjectTransactions\fP
.Te
.\" ---------------------------------------------------------------------------
.\" $Id: ObjectTransactions.3,v 1.2 1996/11/28 10:49:01 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: ObjectTransactions.3,v $
.\" Revision 1.2  1996/11/28  10:49:01  borchert
.\" - transReleased error code added
.\" - notes about termination and support of Resources(3) added
.\" - references to Resources and TransStreams added
.\"
.\" Revision 1.1  1996/11/23  17:35:38  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
