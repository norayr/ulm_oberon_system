.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-1995 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH SysSignals 3 "Last change: 17 September 1996" "Release 0.5" "Ulm's Oberon System"
.SH NAME
SysSignals \- event interface for UNIX signals
.SH SYNOPSIS
.Pg
TYPE Signal = INTEGER; (* signal number: [1..nsigs-1] *)
TYPE EventType = POINTER TO EventTypeRec;
TYPE EventTypeRec =
   RECORD
      (Events.EventTypeRec)
      signo: Signal;
   END;
TYPE Event = POINTER TO EventRec;
TYPE EventRec =
   RECORD
      (Events.EventRec)
      signo: Signal;
      sigcode: INTEGER;
      sigcontext: SysTypes.UntracedAddress;
      addr: SysTypes.UntracedAddress;
      fixed: BOOLEAN;
   END;
.sp 0.7
CONST nsigs     = 32;   (* number of valid signals *)
CONST sigHUP    = 1;    (* hangup *)
CONST sigINT    = 2;    (* interrupt *)
CONST sigQUIT   = 3;    (* quit *)
CONST sigILL    = 4;    (* illegal instruction *)
CONST sigTRAP   = 5;    (* trace trap *)
CONST sigABRT   = 6;    (* used by abort, replace SIGIOT in the future *)
CONST sigEMT    = 7;    (* EMT instruction *)
CONST sigFPE    = 8;    (* floating point exception *)
CONST sigKILL   = 9;    (* kill *)
CONST sigBUS    = 10;   (* bus error *)
CONST sigSEGV   = 11;   (* segmentation violation *)
CONST sigSYS    = 12;   (* bad argument to system call *)
CONST sigPIPE   = 13;   (* write on a pipe with no one to read it *)
CONST sigALRM   = 14;   (* alarm clock *)
CONST sigTERM   = 15;   (* software termination signal from kill *)
CONST sigURG    = 16;   (* urgent condition on IO channel *)
CONST sigSTOP   = 17;   (* sendable stop signal not from tty *)
CONST sigTSTP   = 18;   (* stop signal from tty *)
CONST sigCONT   = 19;   (* continue a stopped process *)
CONST sigCHLD   = 20;   (* to parent on child stop or exit *)
CONST sigTTIN   = 21;   (* to readers pgrp upon background tty read *)
CONST sigTTOU   = 22;   (* like TTIN for output if *)
CONST sigIO     = 23;   (* input/output possible signal *)
CONST sigXCPU   = 24;   (* exceeded CPU time limit *)
CONST sigXFSZ   = 25;   (* exceeded file size limit *)
CONST sigVTALRM = 26;   (* virtual time alarm *)
CONST sigPROF   = 27;   (* profiling time alarm *)
CONST sigWINCH  = 28;   (* window changed *)
CONST sigLOST   = 29;   (* resource lost *)
CONST sigUSR1   = 30;   (* user defined signal 1 *)
CONST sigUSR2   = 31;   (* user defined signal 2 *)
CONST allsigs   = 32;   (* number of all signals *)
CONST ncodes    = 1;    (* number of sigcodes *)
.sp 0.7
VAR HUP INT, QUIT, ILL, TRAP, ABRT, EMT, FPE, KILL, BUS, SEGV,
    SYS, PIPE, ALRM, TERM, URG, STOP, TSTP, CONT, CHLD, TTIN,
    TTOU, IO, XCPU, XFSZ, VTALRM, PROF, WINCH, LOST, USR1, USR2:
       EventType;
.sp 0.7
VAR unknownSignal: Events.EventType;
VAR eventType: ARRAY nsigs OF EventType;
.sp 0.3
TYPE Name = ARRAY 12 OF CHAR; (* traditional name, e.g. "SIGHUP" *)
VAR name: ARRAY allsigs OF Name;
VAR text: ARRAY allsigs OF Events.Message;
VAR codetext: ARRAY ncodes OF Events.Message;
.Pe
.SH DESCRIPTION
.I SysSignals
initializes all signal events and defines their priority.
Further
.I SysSignals
acts as event manager (see \fIEvents(3)\fP for details) and
interfaces \fBSYSTEM.UNIXSIGNAL\fP.
.PP
A UNIX signal with the number \fIsigno\fP causes
\fIeventType\fP[\fIsigno\fP] to be raised.
A signal event contains \fIsigno\fP
(one of \fIsigHUP\fP..\fIsigUSR2\fP) and \fIsigcode\fP.
\fIsigcode\fP contains some additional informations but is to be
considered as very system-dependent.
An example is given by the floating point exception of
\fISysSignals.FPE\fP:
the MC68881 processor supports eight different exceptions which are
all mapped to \fISysSignals.FPE\fP with different \fIsigcode\fP values
by the UNIX system.
.PP
In addition, the Sun version supports following components:
\fIsigcontext\fP which points to a structure containing the
saved registers and \fIaddr\fP which contains the offending
address in case of memory faults or similar events.
.PP
It is important to note that there are some fundamental differences
between usual signal handling and event handling:
With the exception of some few signals the reaction is reset to
default (program termination) on receipt of a signal.
The signal handler of \fISysSignals\fP redeclares itself as signal
handler and thus ensures that the reaction is not affected by
signal receiving.
.PP
Signals have a priority like other events of \fIEvents(3)\fP.
The priority is \fIPriorities.interrupts\fP for signals like
\fISysSignals.INT\fP, \fISysSignals.ALRM\fP etc. and
\fIPriorities.fatalsignals\fP for signals which indicate faults
like \fISysSignals.SEGV\fP, \fISysSignals.BUS\fP,
\fISysSignals.ILL\fP, and \fISysSignals.FPE\fP.
Signals are queued on \fIEvents.func\fP reaction if the current
priority is equal or greater than the priority of the event.
Event handlers for fault indicating signals must not return because
this would cause re-execution of the faulting instruction and thus
an infinite loop.
.PP
The component \fIfixed\fP may be set to \fBTRUE\fP
if an event handler is able to fix a hard event in a way
which assures that the execution may be continued without
getting the same event raised again.
.PP
Signal reactions are inherited to subprocesses and
in some restricted form inherited beyond \fIexec(2)\fP.
\fIexec(2)\fP causes all \fIEvents.funcs\fP reactions to be reset
to \fIEvents.default\fP. \fIEvents.default\fP and \fIEvents.ignore\fP
is inherited in both cases (\fIfork(2))\fP and \fIexec(2)\fP).
.I SysSignals
sets the reactions during initialization to those which has been
inherited: \fIEvents.default\fP or \fIEvents.ignore\fP.
Typically \fISysSignals.INT\fP and \fISysSignals.QUIT\fP are ignored
if the process
runs in background (the shell does not wait for the process to
terminate).
.SH EXAMPLE
The following signal handler causes program termination
(with ordinary cleanup):
.Pg
PROCEDURE Die(event: Events.Event);
BEGIN
   SysProcess.Exit(1);
END Die;

PROCEDURE SetUp;
BEGIN
   Events.Handler(SysSignals.INT, Die);
END SetUp;
.Pe
.PP
The example following demonstrates how to allow time-consuming processing
to be aborted by the use of \fISysSignals.INT\fP.
This is very useful for interactive programs,
e.g. a typical editor stops searching on \fISysSignals.INT\fP.
.Pg
PROCEDURE TimeConsumingProcessing(VAR completed: BOOLEAN);
   VAR newcr: SYSTEM.COROUTINE;
BEGIN
   completed := FALSE;
   SYSTEM.CRSPAWN(newcr);
   (* ... *)
   completed := TRUE;
   SYSTEM.CRSWITCH(Coroutines.source);
END TimeConsumingProcessing;

PROCEDURE CatchInterrupt(event: Events.Event);
BEGIN
   (* we assume that Setup was called by the main coroutine *)
   IF Coroutines.current # Coroutines.main THEN
      SYSTEM.CRSWITCH(Coroutines.main);
   END;
   (* SysSignals.INT has been raised outside of TimeConsumingProcessing *)
END CatchInterrupt;

PROCEDURE Setup;
   VAR completed: BOOLEAN;
BEGIN
   Events.Handler(SysSignals.INT, CatchInterrupt);
   TimeConsumingProcessing(completed);
   SYSTEM.CRSWITCH(Coroutines.source);
   IF completed THEN
      (* ordinary return of TimeConsumingProcessing *)
   ELSE
      (* TimeConsumingProcessing has been interrupted *)
   END;
END Setup;
.Pe
.SH "SEE ALSO"
.Tb SysStorage(3)
.Tp Events(3)
event handling
.Tp Math(3)
defines handler for \fISysSignals.FPE\fP event
.Tp SysStorage(3)
defines handler for \fISysSignals.SEGV\fP event
.Te
.SH BUGS
Signals with default reaction cause immediate termination
(without raise of termination events) when they occur.
.\" ---------------------------------------------------------------------------
.\" $Id: SysSignals.3,v 1.6 1996/09/17 07:57:30 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: SysSignals.3,v $
.\" Revision 1.6  1996/09/17  07:57:30  borchert
.\" - components sigcontext and addr are of type SysTypes.UntracedAddress
.\"   (not SysTypes.Address)
.\" - minor typo fixed
.\"
.\" Revision 1.5  1993/06/13  14:34:02  borchert
.\" components sigcontext, addr and fixed added to EventRec
.\"
.\" Revision 1.4  1992/11/25  11:51:44  borchert
.\" typo error fixed
.\"
.\" Revision 1.3  1992/03/24  09:21:34  borchert
.\" Signals renamed to SysSignals
.\"
.\" Revision 1.2  1991/11/14  08:18:44  borchert
.\" merge of Sig and Signals
.\"
.\" Revision 1.1  1990/08/31  17:02:20  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
