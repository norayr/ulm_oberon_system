.\" --------------------------------------
.\" Oberon System Documentation  AFB 11/91
.\" (c) University of Ulm, SAI, D-7900 Ulm
.\" --------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
.TH StreamConditions 3 "Oberon System"
.SH NAME
StreamConditions \- wait until a stream becomes ready for input or output
.SH SYNOPSIS
.Pg
CONST read = 0; write = 1; (* operations *)
TYPE Operation = SHORTINT; (* read or write *)
TYPE CreateConditionMessage =
   RECORD
      (Streams.Message)
      (* in-parameters *)
      operation: Operation; (* read or write *)
      (* out-parameters *)
      condition: Conditions.Condition; (* return value *)
      stream: Streams.Stream; (* message processed for this stream *)
      msgProcessed: BOOLEAN; (* initially FALSE; has to be set to TRUE *)
   END;
TYPE TestConditionMessage =
   RECORD
      (Streams.Message)
      (* in-parameters *)
      operation: Operation; (* read or write *)
      errors: RelatedEvents.Object; (* relate errors to this object *)
      (* out-parameters *)
      wouldblock: BOOLEAN;
      msgProcessed: BOOLEAN;
   END;
.sp 0.7
CONST msgFailed = 0;
CONST invalidOp = 1;
CONST errorcodes = 2;
TYPE ErrorEvent = POINTER TO ErrorEventRec;
TYPE ErrorEventRec =
   RECORD
      (Events.EventRec)
      errorcode: SHORTINT;
   END;
VAR errormsg: ARRAY errorcodes OF Events.Message;
VAR error: Events.EventType;
.sp 0.7
PROCEDURE Create(VAR condition: Conditions.Condition;
                 s: Streams.Stream; operation: Operation);
.Pe
.SH DESCRIPTION
.I StreamConditions
creates conditions which allow to wait until
a stream is ready for reading or waiting,
i.e. a read or wait operation would not cause the
current process or task to be blocked.
.LP
Stream conditions must be supported by the underlying stream implemenation.
.I StreamConditions
uses stream messages to communicate with the stream implementation:
.Tb CreateConditionMessage
.Tp CreateConditionMessage
asks the underlying implementation to create a condition.
The newly created condition is to be returned in \fIcondition\fP.
Further, \fIstream\fP is to be set to the stream.
Because the message may be passed through some other
stream implementations it is possible that this is a different stream.
\fImsgProcessed\fP must be set to \fBTRUE\fP,
otherwise \fIStreamConditions\fP assumes that the implementation
does not support stream conditions.
.br
In case of buffered streams it is important that the implementation
does not forget to check the buffer status by use of the
appropiate routines of \fIStreams\fP.
.br
The underlying implementation is free to set \fIcondition\fP to \fBNIL\fP.
\fIStreamConditions\fP creates then a condition of its own
and assumes that the stream implementation is able to process
messages of type \fITestConditionMessage\fP.
.Tp TestConditionMessage
requests the stream implementation to test the condition:
\fIwouldblock\fP is to be set to \fBTRUE\fP
if an \fIoperation\fP would cause the process or task to be blocked
or in case of errors.
Any errors are to be related to \fIerrors\fP instead to the stream.
Again, \fImsgProcessed\fP must be set to \fBTRUE\fP
to indicate that the message has been processed.
.Te
.LP
.I Create
creates a condition which allows the process or task to
wait until the stream becomes ready for the given operation.
\fIcondition\fP is set to \fBNIL\fP
if stream conditions are not supported for the underlying stream
implementation.
.SH DIAGNOSTICS
Errors during \fICreate\fP are related to the given stream and
errors during the evaluation of conditions are related to
the \fIerrors\fP parameter of the interface procedures of \fIConditions\fP.
Following errors are generated by \fIStreamConditions\fP:
.Tb msgFailed
.Tp msgFailed
indicates that a message was returned unprocessed.
.Tp invalidOp
an invalid operation was given to \fICreate\fP
(neither \fIread\fP nor \fIwrite\fP).
.Te
.SH "SEE ALSO"
.Tb Conditions(3)
.Tp Conditions(3)
interface for conditions
.Tp Streams(3)
streams interface
.Te
.\" ---------------------------------------------------------------------------
.\" $Id: StreamCond.3,v 1.3 1992/01/14 07:11:30 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: StreamCond.3,v $
.\" Revision 1.3  1992/01/14  07:11:30  borchert
.\" invalidOp added
.\"
.\" Revision 1.2  1992/01/13  12:34:03  borchert
.\" TestConditionMessage is only required if CreateConditionMessage
.\" is returned with condition = NIL
.\"
.\" Revision 1.1  1992/01/13  08:06:29  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
