.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-1995 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH Timezones 3 "Last change: 16 September 1996" "Release 0.5" "Ulm's Oberon System:  21 April 1994 Release 0.4 Ulm's Oberon System"
.SH NAME
Timezones \- abstraction for time zones
.SH SYNOPSIS
.Pg
TYPE Name = ARRAY 12 OF CHAR;
TYPE Offset = Scales.Value;
.sp 0.2
TYPE Timezone = POINTER TO TimezoneRec;
TYPE TimezoneRec =
   RECORD
      (PersistentDisciplines.ObjectRec)
      baseName:   Name;
   END;
.sp 0.2
TYPE Glimpse = POINTER TO GlimpseRec;
TYPE GlimpseRec =
   RECORD
      (Objects.ObjectRec)
      name:       Name;
      offset:     Offset;
      isDst:      BOOLEAN;
      lastChange,
      nextChange: Times.Time;
   END;
.sp 0.2
VAR utc: Timezone;
VAR local: Timezone;
.sp 0.7
TYPE LookupProc =
   PROCEDURE (tz: Timezone; at: Times.Time; VAR glimpse: GlimpseRec);
.sp 0.2
TYPE Interface = POINTER TO InterfaceRec;
TYPE InterfaceRec =
   RECORD
      (Objects.ObjectRec)
      unsteady:   BOOLEAN;
      lookup:     LookupProc;
      stdGlimpse: Glimpse;
   END;
.sp 0.2
TYPE InitProc = PROCEDURE (tz: Timezone) : Interface;
.sp 0.2
TYPE FindProc =
   PROCEDURE (name: ARRAY OF CHAR;
               VAR tz: Timezone; VAR glimpse: GlimpseRec) : BOOLEAN;
.sp 0.7
PROCEDURE GetOffset(tz: Timezone; at: Times.Time) : Scales.Value;
.sp 0.2
PROCEDURE Unsteady(tz: Timezone) : BOOLEAN;
.sp 0.2
PROCEDURE Lookup(tz: Timezone; at: Times.Time; VAR glimpse: GlimpseRec);
.sp 0.2
PROCEDURE FindOffset(name: ARRAY OF CHAR; VAR offset: Offset) : BOOLEAN;
.sp 0.2
PROCEDURE Find(name: ARRAY OF CHAR;
               VAR tz: Timezone; VAR glimpse: GlimpseRec) : BOOLEAN;
.sp 0.7
PROCEDURE Init(tz: Timezone; if: Interface);
.sp 0.2
PROCEDURE DelayInit(tz: Timezone; init: InitProc);
.sp 0.2
PROCEDURE Declare(find: FindProc);
.Pe
.SH DESCRIPTION
A time zone is a persistent object that can tell how a local
time differs from universal time (aka Greenwich mean time).
We want to keep time values uniform around the globe;
location dependent, however, their interpretation.
.LP
Throughout this module,
.I offset
values are given in seconds relative to GMT.
Timezones can be either steady, in which case each access to them
will yield the same result, or unsteady.
A look at a time zone at a certain time is called a glimpse.
.LP
.I Unsteady
tells if
.I tz
is unsteady.
.LP
.I GetOffset
returns the offset defined by 
.I tz
for the given time
.I at,
or some basic offset in case
.I at
is
.B NIL.
.LP
.I Lookup
stores a complete timezone status (glimpse) of
.I tz
at a given time
.I at
in
.I glimpse.
.I at
may be
.B NIL
to get a glimpse containing the basic offset.
Note that
.I glimpse.lastChange
or
.I glimpse.nextChange
might be
.B NIL
if these times do not exist or can not be determined.
.LP
.I FindOffset
searches among the time zones known to the system for
a glimpse named
.I name.
If such a glimpse could be found,
the corresponding offset is stored in
.I offset
and
.B TRUE
is returned, otherwise
.B FALSE.
.LP
.I FindTimezone
searches among the time zones known to the system for
a glimpse named
.I name.
If such a glimpse and time zone could be found
they are stored in
.I tz
resp.
.I glimpse
and
.B TRUE
is returned, otherwise
.B FALSE.
.LP
The variable
.I utc
contains a time zone representing universal time itself.
.LP
.I local
contains a local time zone which is normally defined by the system,
to be most likely appropriate at the system's location,
but may be reset any time.
.LP
New time zones must be initialized either with
.I Init
or
.I DelayInit.
The interface
.I if
must contain either
.I lookup
if
.I if.unsteady
is
.B TRUE,
or
.I stdGlimpse
otherwise.
.I stdGlimpse
can also be provided in the former case if
.I lookup
should not be called with
.I at
=
.B NIL.
If
.I DelayInit
is used,
.I init
will be called when
.I tz
is first accessed
to supply a valid interface.
This is intended mostly for the benefit of implementations of
default time zones, like
.I local,
that might be expensive to initialize, but can guarantee to work,
switching to an alternative in case of problems rather than reporting
an error during initialization.
.LP
.I Declare
arranges for
.I find
to be called when time zones are searched for.
The last declared function will be called first.
.LP
Time zones are persistent.
Thus,
.I PersistentObjects.Read
and
.I PersistentObjects.Write
are valid operations on time zones.
If a
.I Read
operation causes a projection onto type
.I Timezone
to take place (due to foreign modules that can't be loaded),
the time zone will be mapped to universal time
.I (utc).
.SH DIAGNOSTICS
Invalid time zone implementations can lead to
failed assertions:
.IP \(bu
Some of the interface components and other parameters
must be non-\fBNIL\fP.
.IP \(bu
Interface procedures must not call the
timezone accessing operations of \fITimezones\fP
for their own timezone.
.SH "SEE ALSO"
.Tb PersistentObjects(3)
.Tp Dates(3)
date and time conversions
.Tp PersistentObjects(3)
abstraction for persistent objects
.Tp Times(3)
reference scale for time measurement systems
.Tp UnixTimezones(3)
implementation of timezones known by the system
.Te
.SH AUTHOR
Martin Hasch, University of Ulm
.br
some minor revisions are due to Andreas Borchert, University of Ulm
.\" ---------------------------------------------------------------------------
.\" $Id: Timezones.3,v 1.3 1996/09/16 16:14:03 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: Timezones.3,v $
.\" Revision 1.3  1996/09/16  16:14:03  borchert
.\" - base type changed from PersistentObjects.Object to
.\"   PersistentDisciplines.Object
.\" - events changed to assertions
.\"
.\" Revision 1.2  1994/05/02  12:21:06  martin
.\" lastChange, nextChange, TYPE Offset added;
.\" Offset renamed GetOffset; GetGlimpse renamed Lookup;
.\" Lookup can now be called with argument at=NIL.
.\"
.\" Revision 1.1  1994/04/05  18:19:12  martin
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
