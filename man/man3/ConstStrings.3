.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-2004 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH ConstStrings 3 "Last change: 25 June 2004" "Release 0.5" "Ulm's Oberon System"
.SH NAME
ConstStrings \- WORM-device for strings
.SH SYNOPSIS
.Pg
TYPE String = POINTER TO StringRec;
TYPE StringRec =
   RECORD
      (Disciplines.ObjectRec)
      (* read-only *)
      len: Streams.Count;
      hashval: LONGINT;
   END;
.sp 0.3
TYPE Domain = POINTER TO DomainRec;
TYPE DomainRec = RECORD (Disciplines.ObjectRec) END;
VAR std: Domain; (* default domain *)
.sp 0.7
PROCEDURE CreateDomain(VAR domain: Domain);
PROCEDURE Init(VAR s: Streams.Stream);
PROCEDURE Close(s: Streams.Stream; VAR string: String);
PROCEDURE CloseD(s: Streams.Stream; domain: Domain; VAR string: String);
PROCEDURE Create(VAR string: String; s: ARRAY OF CHAR);
PROCEDURE CreateD(VAR string: String; domain: Domain; s: ARRAY OF CHAR);
PROCEDURE Open(VAR s: Streams.Stream; string: String);
PROCEDURE Compare(string1, string2: String) : INTEGER;
PROCEDURE Write(s: Streams.Stream; string: String);
PROCEDURE Extract(VAR s: ARRAY OF CHAR; string: String);
.Pe
.SH DESCRIPTION
Strings of type
.I ConstStrings.String
are written once and can be read multiply afterwards (WORM).
A string is opened for writing with
.IR Init .
If writing is completed
.I Close
or
.I CloseD
are to be called in order to get a reference to the string.
.I Close
and
.I CloseD
check if the string has already been entered into the table
of the given domain (\fIstd\fP in case of \fIClose\fP)
and, if so, return the same string reference.
Thus strings of the same domain are equal iff their references are equal.
.I Close
and
.I CloseD
store the length of the string and its hashvalue into the public
components.
Afterwards the string can be read after opening with
.IR Open .
Note that
.I Close
and
.I CloseD
are used only for closing the initial stream.
Streams opened by
.I Open
are to be closed by
.I Streams.Close
or
.IR Streams.Release .
.I Create
and
.I CreateD
handle the standard case of converting character arrays to
constant strings. Note, however, that strings passed to
.I Create
or
.I CreateD
must be 0X-terminated. (Otherwise an assertion will fail.)
.PP
.I Compare
returns an integer less than zero, equal to zero, or greater than zero if
.I string1
is less than, equal, or greater than
.IR string2.
Both strings may be of different domains.
.PP
.I Write
copies
.I string
to
.I s
and returns the number of bytes written in
.IR s.count .
.I Extract
copies
.I string
to the character array
.IR s .
The resulting string is guaranteed to be 0X-terminated.
.SH EXAMPLE
The following example converts a given string into a string reference
of
.IR ConstStrings :
.PP
.Pg
PROCEDURE PutString(VAR string: ConstStrings.String;
                    buf: ARRAY OF CHAR);
   VAR
      s: Streams.Stream;
BEGIN
   ConstStrings.Init(s);
   Write.StringS(s, buf);
   ConstStrings.Close(s, string);
END PutString;
.Pe
.PP
.I GetString
copies the value of
.I string
into
.IR buf :
.PP
.Pg
PROCEDURE GetString(string: ConstStrings.String;
                    VAR buf: ARRAY OF CHAR);
BEGIN
   ConstStrings.Open(s, string);
   Strings.Read(buf, s);
   Streams.Release(s);
END GetString;
.Pe
.SH "SEE ALSO"
.Tb IdentKeys(3)
.Tp IdentKeys(3)
keys that are based on \fIConstStrings\fP
.Tp Read(3)
formatted reading from streams
.Tp Streams(3)
stream operations
.Tp Strings(3)
string operations
.Tp Texts(3)
more general in-memory streams
.Tp Write(3)
formatted output operations on streams
.Te
.SH BUGS
Seeking on the initial stream is permitted but
the current position of the stream must be left at the end
of the written string which is not necessarily the end of the stream.
This is required because the current implementation of
.I Close
and
.I CloseD
reuses initial streams.
.\" ---------------------------------------------------------------------------
.\" $Id: ConstStrings.3,v 1.7 2004/06/25 09:24:58 borchert Exp borchert $
.\" ---------------------------------------------------------------------------
.\" $Log: ConstStrings.3,v $
.\" Revision 1.7  2004/06/25 09:24:58  borchert
.\" Streams.Close replaced by Streams.Release
.\"
.\" Revision 1.6  2004/06/25 09:21:35  borchert
.\" reference to IdentKeys(3) added
.\"
.\" Revision 1.5  1997/11/17 08:08:52  martin
.\" String is now an extension of Disciplines.Object .
.\"
.\" Revision 1.4  1994/07/25  09:35:15  borchert
.\" domains added
.\"
.\" Revision 1.3  1991/06/21  15:16:13  borchert
.\" font of example now constant width
.\"
.\" Revision 1.2  90/11/02  21:50:25  oberon
.\" Write and Extract added
.\" 
.\" Revision 1.1  90/10/09  18:50:36  oberon
.\" Initial revision
.\" 
.\" ---------------------------------------------------------------------------
