.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-1994 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH Paths 3 "Last change: 22 July 1996" "Release 0.5" "Ulm's Oberon System"
.SH NAME
Paths \- resolving string constants into name paths
.SH SYNOPSIS
.Pg
CONST separator = "/";
.sp 0.3
TYPE Path = POINTER TO PathRec;
TYPE PathRec =
   RECORD
      (Objects.ObjectRec)
      component: Names.Name;
      next: Path;
   END;
.sp 0.3
TYPE ErrorCode = SHORTINT;
TYPE ErrorEvent = POINTER TO ErrorEventRec;
TYPE ErrorEventRec =
   RECORD
      (Events.EventRec)
      errorcode: ErrorCode;
   END;
VAR errormsg: ARRAY errorcodes OF Events.Message;
VAR error: Events.EventType;
.sp 0.7
PROCEDURE Convert(path: ARRAY OF CHAR): Path;
.sp 0.3
PROCEDURE GetNode(path: ARRAY OF CHAR;
		  auth: Shards.Lid; errors: RelatedEvents.Object;
		  VAR subnode: Names.Node): BOOLEAN;
.sp 0.3
PROCEDURE GetNodeN(node: Names.Node; path: ARRAY OF CHAR;
		  auth: Shards.Lid; errors: RelatedEvents.Object;
		  VAR subnode: Names.Node): BOOLEAN;
.sp 0.3
PROCEDURE Insert(path: ARRAY OF CHAR; subnode: Names.Node;
		  auth: Shards.Lid; errors: RelatedEvents.Object): BOOLEAN;
.sp 0.3
PROCEDURE InsertN(node: Names.Node; path: ARRAY OF CHAR;
		  subnode: Names.Node;
		  auth: Shards.Lid; errors: RelatedEvents.Object): BOOLEAN;
.sp 0.3
PROCEDURE Delete(path: ARRAY OF CHAR;
		  auth: Shards.Lid; errors: RelatedEvents.Object): BOOLEAN;
.sp 0.3
PROCEDURE DeleteN(node: Names.Node; path: ARRAY OF CHAR;
		  auth: Shards.Lid; errors: RelatedEvents.Object): BOOLEAN;
.Pe
.SH DESCRIPTION
.I Paths
provides an interface to
.I Names(3)
resolving string constants into name paths.
For each procedure in
.I Names(3)
with an argument of type
.I Names.Node
and another one of type
.I Names.Name
there are two equivalent procedures in
.I Paths
with either an absolute or a relative path instead.
In all cases
.I path
is a
.BR 0X -terminated
array of characters
containing path components.
Within
.IR path ,
two consecutive
.I separator
characters are replaced by a single one, whereas
a single
.I separator
character is replaced by nothing, separating path components.
.PP
Paths are evaluated from left to right as
a sequence of
.I Names.GetNode
calls until exactly one component remains unresolved,
which becomes the
.I name
argument to the requested procedure.
.PP
.I Convert
simply converts a string to a
.I Path
structure.
.SH EXAMPLE
.Pg
success := Paths.Insert("etc/example", subnode, auth, errors)
.Pe
is essentially equivalent to:
.Pg
ConstStrings.Create(etcString, "etc");
ConstStrings.Create(exampleString, "example");
success :=
   Names.GetNode(Names.root, etcString, auth, tmpnode) &
   Names.Insert(tmpnode, subnode, exampleString, auth)
.Pe
except for the redirection of error events.
.SH DIAGNOSTICS
All procedures return
.B TRUE
on success,
otherwise
.BR FALSE .
Error events, usually raised in the context of
.I Names(3)
procedures, are forwarded to
.IR errors .
If not stated otherwise, their priority is
.IR Priorities.liberrors .
In case of an inappropriate
.I path
argument an error event of type
.I ErrorEvent
is related to
.I errors
with following error code and message:
.Tb RelatedEvents(3)
.Tp zeroPathLen
insert/delete need a nonempty path
.Te
.SH "SEE ALSO"
.Tb RelatedEvents(3)
.Tp Names(3)
abstraction for name hierarchies
.Tp ConstStrings(3)
handling of arbitrarily long strings
.Tp Services(3)
type-independent definition of extensions
.Tp RelatedEvents(3)
error event handling
.Te
.SH AUTHOR
Martin Hasch, University of Ulm
.\" ---------------------------------------------------------------------------
.\" $Id: Paths.3,v 1.2 1996/07/22 10:49:49 martin Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: Paths.3,v $
.\" Revision 1.2  1996/07/22  10:49:49  martin
.\" Reference to Names(3) corrected.
.\"
.\" Revision 1.1  1995/06/14  18:42:27  martin
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
.\" Martin Hasch, Sep 1994
.\" ---------------------------------------------------------------------------
