.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-1999 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH CompilerKeys 3 "Last change: 6 April 2000" "Release 0.5" "Ulm's Oberon System"
.SH NAME
CompilerKeys \- keys that identify dependencies of compiler-generated objects
.SH SYNOPSIS
.Pg
TYPE Value = POINTER TO ValueRec;
TYPE ValueRec =
   RECORD
      (PersistentObjects.ObjectRec)
      time: Times.Time; (* date of creation *)
      unique1, unique2: INTEGER; (* hopefully unique *)
   END;
.sp 0.3
TYPE Key = POINTER TO KeyRec;
TYPE KeyRec =
   RECORD
      (Keys.ValueRec)
      modname: ConstStrings.String;
      defsrcid, modsrcid: ConstStrings.String;
      genkey: Value;
      arch: Architectures.Architecture;
      archkey: Value;
   END;
.sp 0.3
TYPE Set = POINTER TO SetRec;
TYPE SetRec = RECORD (PersistentDisciplines.ObjectRec) END;
.sp 0.3
VAR key: Keys.Key; (* for Key *)
.sp 0.7
PROCEDURE CreateValue(VAR value: Value);
.sp 0.7
PROCEDURE Create(VAR key: Key; modname: ConstStrings.String);
PROCEDURE CreateCopy(VAR key: Key; orig: Key);
.sp 0.7
PROCEDURE ValueToString(value: Value; VAR string: ConstStrings.String);
PROCEDURE StringToValue(string: Streams.Stream; VAR value: Value);
.sp 0.7
PROCEDURE CreateSet(VAR set: Set);
PROCEDURE CreateSetCopy(VAR set: Set; orig: Set);
PROCEDURE Incl(set: Set; key: Key);
PROCEDURE InclSet(set, keys: Set);
PROCEDURE Union(VAR set: Set; set1, set2: Set);
PROCEDURE Lookup(set: Set; modname: ConstStrings.String;
		 VAR key: Key) : BOOLEAN;
PROCEDURE GetKeys(set: Set; VAR it: Iterators.Iterator);
PROCEDURE Compatible(set1, set2: Set) : BOOLEAN;
PROCEDURE CompatibleWith(key: Key; set: Set) : BOOLEAN;
PROCEDURE CombineKeys(key1: Key; key2: Key; VAR combined: Key) : BOOLEAN;
.Pe
.SH DESCRIPTION
.I CompilerKeys
supports the identification of dependencies of compiler-generated
objects. They allow to assure that all objects that are loaded
into one address space are compatible to each other. The basic
idea is simple: Every interface compiled gets a new key of its own
and a set of keys it depends on (is empty if no modules are imported).
Compiler objects generated from sources (definitions or modules)
that other modules include the keys of the corresponding interface
objects into their own set. Compatibility is given if there is
never more than one key per module involved.
.LP
Example: Modules \fIA\fP, \fIB\fP, and \fIC\fP. \fIB\fP and \fIC\fP
import from \fIA\fP. On compiling the public interfaces, the compiler
generates the keys \fIa1\fP, \fIb1\fP, and \fIc1\fP for \fIA\fP,
\fIB\fP, and \fIC\fP, respectively. On compiling the modules, \fIA\fP
has a key set of \fB{\fP\fIa1\fP\fB}\fP,
\fIB\fP \fB{\fP\fIa1\fP, \fIb1\fP\fB}\fP, and
\fIC\fP \fB{\fP\fIa1\fP, \fIc1\fP\fB}\fP. These three modules
can be safely combined with a joint key set of
\fB{\fP\fIa1\fP, \fIb1\fP, \fIc1\fP\fB}\fP.
If \fIA\fP and \fIB\fP are recompiled but not \fIC\fP we would
yield a key set of \fB{\fP\fIa2\fP\fB}\fP for \fIA\fP and
\fB{\fP\fIa2\fP, \fIb2\fP\fB}\fP for \fIB\fP. A combination
with the old object of \fIC\fP yields a key set of
\fB{\fP\fIa1\fP, \fIa2\fP, \fIb2\fP, \fIc1\fP\fB}\fP.
This key set contains two keys of module \fIA\fP (\fIa1\fP and \fIa2\fP)
and is therefore invalid because the modules \fB\fP and \fIC\fP
were compiled for different interfaces of \fIA\fP.
This example was simplified to show the general idea.
.I CompilerKeys
supports a model that differentiates architecture-dependent from
architecture-independent keys and that honors the possibility of
interface updates by the corresponding module (necessary
to support Oberon with separated definition and module).
.LP
.I CreateValue
creates a object of type \fICompilerKeys.Value\fP that consists
of a time stamp and two integer values returned by a pseudo
random generator that are hopefully unique. Note that the
pseudo random numbers are returned by \fIRandomGenerators(3)\fP
which allows better algorithms and better seed values to be plugged in.
These objects provide uniqueness beyond that of source ids
because the same source may be compiled using different compilation
options and different environments.
.LP
.I Create
creates an object of type \fICompilerKeys.Key\fP for \fImodname\fP.
With the exception of \fImodname\fP all components of \fIkey\fP are
set to \fBNIL\fP and should be initialized shortly thereafter.
Later, keys are expected to remain constant. Instead
.I CreateCopy
may be used for copying and modifying a key while leaving its
original untouched.
.LP
.I ValueToString
and
.I StringToValue
convert a value (triple of timestamp and two random values) into
a constant string and vice versa. This may be useful for conversion
of keys into a human-readable representation (as done by
\fIcdbd(1)\fP, for example).
Note, however, that both procedures expect the timestamp to be
in a time range supported by \fIDates(3)\fP.
.LP
Key sets are collections of keys with a upper limit of one key
per module.
.I CreateSet
may be used to create an empty key set. Later on, key sets may
grow only in a consistent way using \fIIncl\fP, \fInclSet\fP,
and \fIUnion\fP: Keys added must belong to modules not yet
added, or they must be compatible upgrades from an architecture-independent
to an architecture-dependent key.
.I CreateSetCopy
creates an independent copy of \fIorig\fP.
.LP
.I Lookup
allows to lookup single keys by module and
.I GetKeys
permits to iterate all members of a key set.
.LP
Compatibility of key sets or key set extensions may be tested
using \fICompatible\fP (checking two sets against each other)
and \fICompatibleWith\fP (checking one key against a set).
These tests are useful prior adding new keys or sets to an
existing set as compatbility violations are treated as fatal
errors (an event of a failed assertion would be raised).
.LP
.I CombineKeys
may be used to check the compatibility of two single keys,
and returns, if successful, the combination of them.
.LP
The exported variable
.I key
is a key of \fIKeys(3)\fP defining a total order relation on
objects of type \fICompilerKeys.Key\fP that compares keys using
its components in following order: module name (alphabetically),
time stamp of architecture-independent key (using \fIOperations.Compare\fP),
their architecture (alphabetically) and the second timestamp in case of
architecture-dependent keys.
.SH DIAGNOSTICS
All \fBBOOLEAN\fP-valued functions return \fBFALSE\fP in case
of errors or incompatibility.
Assertions check that that keys to be included to a set are
compatible to it.
.SH "SEE ALSO"
.Tb PersistentObjects(3)
.Tp Architectures(3)
classification of hardware architectures
.Tp PersistentObjects(3)
operations for persistent objects
.Tp Keys(3)
total order relations
.Te
.\" ---------------------------------------------------------------------------
.\" $Id: CompilerKeys.3,v 1.2 2000/04/06 09:43:11 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: CompilerKeys.3,v $
.\" Revision 1.2  2000/04/06  09:43:11  borchert
.\" Paragraph about CompilerKeys.key added.
.\"
.\" Revision 1.1  2000/04/06  09:28:36  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
