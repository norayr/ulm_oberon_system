.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-2004 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH DNSResolvers 3 "Last change: 19 March 2004" "Release 0.5" "Ulm's Oberon System"
.SH NAME
DNSResolvers \- general interface for the retrieval of DNS records
.SH SYNOPSIS
.Pg
TYPE Resolver = POINTER TO ResolverRec;
TYPE ResolverRec = RECORD (Services.ObjectRec) END;
.sp 0.7
TYPE IPv4AddressList = POINTER TO IPv4AddressListRec;
TYPE IPv4AddressListRec =
      RECORD
         (Objects.ObjectRec)
         addr: IPv4Addresses.Address;
         next: IPv4AddressList;
      END;
.sp 0.7
TYPE IPv6AddressList = POINTER TO IPv6AddressListRec;
TYPE IPv6AddressListRec =
      RECORD
         (Objects.ObjectRec)
         addr: IPv6Addresses.Address;
         next: IPv6AddressList;
      END;
.sp 0.7
TYPE HostnameList = POINTER TO HostnameListRec;
TYPE HostnameListRec =
      RECORD
         (Objects.ObjectRec)
         hostname: DNSRecords.Name;
         next: HostnameList;
      END;
.sp 0.7
TYPE MXList = POINTER TO MXListRec;
TYPE MXListRec =
      RECORD
         (Objects.ObjectRec)
         hostname: DNSRecords.Name;
         preference: INTEGER;
         next: MXList;
      END;
.sp 0.7
TYPE TXTList = POINTER TO TXTListRec;
TYPE TXTListRec =
      RECORD
         (Objects.ObjectRec)
         text: DNSRecords.Name;
         next: TXTList;
      END;
.sp 0.7
TYPE GetRecordsProc =
      PROCEDURE(resolver: Resolver;
         hostname: ARRAY OF CHAR;
         rrtype: DNSRecords.RRType;
         trysuffixes: BOOLEAN;
         VAR records: DNSRecords.Record;
         errors: RelatedEvents.Object) : BOOLEAN;
TYPE Interface = POINTER TO InterfaceRec;
TYPE InterfaceRec =
      RECORD
         (Objects.ObjectRec)
         getRecords: GetRecordsProc;
      END;
.sp 0.7
CONST corruptedRecords = 0;
CONST errors = 1;
TYPE ErrorCode = SHORTINT; (* corruptedRecords... *)
TYPE ErrorEvent = POINTER TO ErrorEventRec;
TYPE ErrorEventRec =
      RECORD
         (Events.EventRec)
         errorcode: ErrorCode;
         domain: DNSRecords.Name;
         rrtype: DNSRecords.RRType;
      END;
VAR errormsg: ARRAY errors OF Events.Message;
VAR error: Events.EventType;
.sp 0.7
VAR std: Resolver; (* standard resolver *)
.sp 0.7
PROCEDURE Init(resolver: Resolver; if: Interface);
.sp 0.7
PROCEDURE GetRecords(resolver: Resolver;
                     hostname: ARRAY OF CHAR;
                     rrtype: DNSRecords.RRType;
                     trysuffixes: BOOLEAN;
                     VAR records: DNSRecords.Record;
                     errors: RelatedEvents.Object) : BOOLEAN;
.sp 0.7
PROCEDURE GetIPv4AddrByHost(resolver: Resolver;
                            hostname: ARRAY OF CHAR;
                            VAR addresses: IPv4AddressList;
                            errors: RelatedEvents.Object) : BOOLEAN;
PROCEDURE GetIPv6AddrByHost(resolver: Resolver;
                            hostname: ARRAY OF CHAR;
                            VAR addresses: IPv6AddressList;
                            errors: RelatedEvents.Object) : BOOLEAN;
.sp 0.7
PROCEDURE GetReverseRecords(resolver: Resolver;
                            revname: ARRAY OF CHAR;
                            VAR hosts: HostnameList;
                            errors: RelatedEvents.Object) : BOOLEAN;
PROCEDURE GetHostByIPv4Addr(resolver: Resolver;
                            address: IPv4Addresses.Address;
                            VAR hosts: HostnameList;
                            errors: RelatedEvents.Object) : BOOLEAN;
PROCEDURE GetHostByIPv6Addr(resolver: Resolver;
                            address: IPv6Addresses.Address;
                            VAR hosts: HostnameList;
                            errors: RelatedEvents.Object) : BOOLEAN;
.sp 0.7
PROCEDURE GetMXRecords(resolver: Resolver;
                       domain: ARRAY OF CHAR;
                       VAR mxrecords: MXList;
                       errors: RelatedEvents.Object) : BOOLEAN;
PROCEDURE GetTXTRecords(resolver: Resolver;
                        domain: ARRAY OF CHAR;
                        VAR txtrecords: TXTList;
                        errors: RelatedEvents.Object) : BOOLEAN;
PROCEDURE GetAttribute(resolver: Resolver;
                       domain: ARRAY OF CHAR;
                       attribute: ARRAY OF CHAR;
                       VAR value: ARRAY OF CHAR;
                       errors: RelatedEvents.Object) : BOOLEAN;
.Pe
.SH DESCRIPTION
.I DNSResolvers
provide a general interface for DNS resolvers that are able to retrieve
a set of records for a given resource record type and a domain name.
Implementations are usually based on \fIDNSRequests(3)\fP but are able
to follow chains of CNAME records and have additional knowledge about
DNS caches they can ask and are able to apply rewriting rules for
domain names (e.g. appending the local domain name). In addition,
\fIDNSResolvers\fP provides handy operations to extract the most
common resource record types.
.LP
Standard implementations (one candidate is \fIDNSStdResolvers(3)\fP)
are expected to make their implementation available through \fIstd\fP.
Note, however, that this variable is initially \fBNIL\fP as no
default implementation is provided by \fIDNSResolvers\fP.
.LP
Implementations are required to implement following interface procedure:
.Is "\fIresolver\fP: \fIResolver\fP"
.If "getRecords" "; \fIhostname\fP: \fBARRAY OF CHAR\fP; \fIrrtype\fP: \fIDNSRecords.RRType\fP; \fItrysuffixes\fP: \fBBOOLEAN\fP; \fBVAR\fP \fIrecords\fP: \fIDNSRecords.Record\fP; \fIerrors\fP: \fIRelatedEvents.Object\fP" "\fBBOOLEAN\fP"
Retrieve all resource records of type \fIrrtype\fP out
of the class \fIDNSRecords.classIN\fP for \fIhostname\fP,
following chains of \fIDNSRecords.cname\fP references, if any.
If \fItrysuffixes\fP is set to \fBTRUE\fP, the application of
rewriting rules (e.g. appending the local domain name) is permitted.
In case of failures, \fBFALSE\fP is to be returned, and error events
are to be related to \fIerrors\fP. On success, all retrieved records
are to be returned as linear list in \fIrecords\fP.
Note that the behaviour is not defined if CNAME records are in
conflict to other resource records for the same domain name
(see also RFC 1912, section 2.4).
.Ef
.LP
.I GetRecords
provides a direct access to the interface procedure.
.LP
.I GetIPv4AddrByHost
and
.I GetIPv6AddrByHost
return all IPv4 and IPv6 addresses that are associated with \fIhostname\fP,
respectively.
.LP
.I GetReverseRecords
looks for \fBPTR\fP records associated with \fIrevname\fP.
As CNAME records are followed, classless delegations according
to RFC 2317 are supported. The structure of the domain name \fIrevname\fP
depends on the address space to be used.
.LP
\fIGetHostByIPv4Addr\fP
attempts to find the domain names associated with the given
IPv4 address using \fIGetReverseRecords\fP with a corresponding
\fIrevname\fP of the ``in-addr.arpa'' domain according to RFC 1034.
Likewise \fIGetHostByIPv6Addr\fP
attempts to find the domain names for a given IPv6 address.
This is at first attempted using the ``ip6.arpa'' domain according
to RFC 3152 and, if this fails, using the ``ip6.int'' domain
according to RFC 1886.
.LP
.I GetMXRecords
returns all MX records associated with \fIdomain\fP in no
particular order.
.LP
.I GetTXTRecords
returns all TXT records associated with \fIdomain\fP in no
particular order. Note that this operation presents all
texts as flat list independent from their origin, be it from
a separate record or be it from a text that is embedded
among other texts within one record.
.I GetAttribute
supports the retrieval of attributes out of TXT records according
to RFC 1464.
.SH DIAGNOSTICS
.I DNSRecords
passes all errors events of the underlying implementation to \fIerrors\fP.
Following errors lead to error events generated by \fIDNSRecords\fP itself:
.Tb corruptedRecords
.Tp corruptedRecords
One of the extraction operations of \fIDNSRecords(3)\fP failed for
one of the records returned by the implementation.
.Te
.SH "SEE ALSO"
.Tb DNSStdResolvers(3)
.Tp DNSRecords(3)
structure of resource records
.Tp DNSStdResolvers(3)
standard implementation of \fIDNSResolvers\fP
.Te
.\" ---------------------------------------------------------------------------
.\" $Id: DNSResolvers.3,v 1.1 2004/03/19 10:41:26 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: DNSResolvers.3,v $
.\" Revision 1.1  2004/03/19 10:41:26  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
