.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-1994 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH NetIO 3 "Last change: 15 April 1999" "Release 0.5" "Ulm's Oberon System"
.SH NAME
NetIO \- exchange of Oberon base types
.SH SYNOPSIS
.Pg
TYPE ReadByteProc =
   PROCEDURE (s: Streams.Stream; VAR byte: BYTE) : BOOLEAN;
TYPE ReadCharProc =
   PROCEDURE (s: Streams.Stream; VAR char: CHAR) : BOOLEAN;
TYPE ReadBooleanProc =
   PROCEDURE (s: Streams.Stream; VAR boolean: BOOLEAN) : BOOLEAN;
TYPE ReadShortIntProc =
   PROCEDURE (s: Streams.Stream; VAR shortint: SHORTINT) : BOOLEAN;
TYPE ReadIntegerProc =
   PROCEDURE (s: Streams.Stream; VAR integer: INTEGER) : BOOLEAN;
TYPE ReadLongIntProc =
   PROCEDURE (s: Streams.Stream; VAR longint: LONGINT) : BOOLEAN;
TYPE ReadRealProc =
   PROCEDURE (s: Streams.Stream; VAR real: REAL) : BOOLEAN;
TYPE ReadLongRealProc =
   PROCEDURE (s: Streams.Stream; VAR longreal: LONGREAL) : BOOLEAN;
TYPE ReadSetProc =
   PROCEDURE (s: Streams.Stream; VAR set: SET) : BOOLEAN;
TYPE ReadStringProc =
   PROCEDURE (s: Streams.Stream; VAR string: ARRAY OF CHAR) : BOOLEAN;
TYPE ReadConstStringProc =
   PROCEDURE (s: Streams.Stream; domain: ConstStrings.Domain;
              VAR string: ConstStrings.String) : BOOLEAN;
.sp 0.7
TYPE WriteByteProc =
   PROCEDURE (s: Streams.Stream; byte: BYTE) : BOOLEAN;
TYPE WriteCharProc =
   PROCEDURE (s: Streams.Stream; char: CHAR) : BOOLEAN;
TYPE WriteBooleanProc =
   PROCEDURE (s: Streams.Stream; boolean: BOOLEAN) : BOOLEAN;
TYPE WriteShortIntProc =
   PROCEDURE (s: Streams.Stream; shortint: SHORTINT) : BOOLEAN;
TYPE WriteIntegerProc =
   PROCEDURE (s: Streams.Stream; integer: INTEGER) : BOOLEAN;
TYPE WriteLongIntProc =
   PROCEDURE (s: Streams.Stream; longint: LONGINT) : BOOLEAN;
TYPE WriteRealProc =
   PROCEDURE (s: Streams.Stream; real: REAL) : BOOLEAN;
TYPE WriteLongRealProc =
   PROCEDURE (s: Streams.Stream; longreal: LONGREAL) : BOOLEAN;
TYPE WriteSetProc =
   PROCEDURE (s: Streams.Stream; set: SET) : BOOLEAN;
TYPE WriteStringProc =
   PROCEDURE (s: Streams.Stream; string: ARRAY OF CHAR) : BOOLEAN;
TYPE WriteConstStringProc =
   PROCEDURE (s: Streams.Stream;
              string: ConstStrings.String) : BOOLEAN;
.sp 0.7
TYPE Interface = POINTER TO InterfaceRec;
TYPE InterfaceRec =
   RECORD
      readByte: ReadByteProc;
      readChar: ReadCharProc;
      readBoolean: ReadBooleanProc;
      readShortInt: ReadShortIntProc;
      readInteger: ReadIntegerProc;
      readLongInt: ReadLongIntProc;
      readReal: ReadRealProc;
      readLongReal: ReadLongRealProc;
      readSet: ReadSetProc;
      readString: ReadStringProc;
      readConstString: ReadConstStringProc;
.sp 0.3
      writeByte: WriteByteProc;
      writeChar: WriteCharProc;
      writeBoolean: WriteBooleanProc;
      writeShortInt: WriteShortIntProc;
      writeInteger: WriteIntegerProc;
      writeLongInt: WriteLongIntProc;
      writeReal: WriteRealProc;
      writeLongReal: WriteLongRealProc;
      writeSet: WriteSetProc;
      writeString: WriteStringProc;
      writeConstString: WriteConstStringProc;
   END;
.sp 0.7
PROCEDURE AttachInterface(s: Streams.Stream; if: Interface);
PROCEDURE CopyInterface(from, to: Streams.Stream);
.sp 0.7
PROCEDURE ReadByte(s: Streams.Stream; VAR byte: BYTE) : BOOLEAN;
PROCEDURE ReadChar(s: Streams.Stream; VAR char: CHAR) : BOOLEAN;
PROCEDURE ReadBoolean(s: Streams.Stream; VAR boolean: BOOLEAN) : BOOLEAN;
PROCEDURE ReadShortInt(s: Streams.Stream; VAR shortint: SHORTINT) : BOOLEAN;
PROCEDURE ReadInteger(s: Streams.Stream; VAR integer: INTEGER) : BOOLEAN;
PROCEDURE ReadLongInt(s: Streams.Stream; VAR longint: LONGINT) : BOOLEAN;
PROCEDURE ReadReal(s: Streams.Stream; VAR real: REAL) : BOOLEAN;
PROCEDURE ReadLongReal(s: Streams.Stream; VAR longreal: LONGREAL) : BOOLEAN;
PROCEDURE ReadSet(s: Streams.Stream; VAR set: SET) : BOOLEAN;
PROCEDURE ReadString(s: Streams.Stream; VAR string: ARRAY OF CHAR) : BOOLEAN;
PROCEDURE ReadConstString(s: Streams.Stream;
                          VAR string: ConstStrings.String) : BOOLEAN;
PROCEDURE ReadConstStringD(s: Streams.Stream;
                           domain: ConstStrings.Domain;
                           VAR string: ConstStrings.String) : BOOLEAN;
.sp 0.7
PROCEDURE WriteByte(s: Streams.Stream; byte: BYTE) : BOOLEAN;
PROCEDURE WriteChar(s: Streams.Stream; char: CHAR) : BOOLEAN;
PROCEDURE WriteBoolean(s: Streams.Stream; boolean: BOOLEAN) : BOOLEAN;
PROCEDURE WriteShortInt(s: Streams.Stream; shortint: SHORTINT) : BOOLEAN;
PROCEDURE WriteInteger(s: Streams.Stream; integer: INTEGER) : BOOLEAN;
PROCEDURE WriteLongInt(s: Streams.Stream; longint: LONGINT) : BOOLEAN;
PROCEDURE WriteReal(s: Streams.Stream; real: REAL) : BOOLEAN;
PROCEDURE WriteLongReal(s: Streams.Stream; longreal: LONGREAL) : BOOLEAN;
PROCEDURE WriteSet(s: Streams.Stream; set: SET) : BOOLEAN;
PROCEDURE WriteString(s: Streams.Stream; string: ARRAY OF CHAR) : BOOLEAN;
PROCEDURE WriteConstString(s: Streams.Stream;
                           string: ConstStrings.String) : BOOLEAN;
.Pe
.SH DESCRIPTION
.I NetIO
provides an abstraction for the exchange of Oberon base types which
are components of persistent data structures.
Possible implementations may take care of different compilers and
machine architectures.
Additionally, they could improve safety by the use of tag fields.
.PP
.I NetIO
itself provides a default interface which is used when
\fIAttachInterface\fP has not been called yet for the given stream
or is called with \fIif\fP set to \fBNIL\fP.
The default interface uses binary I/O which does not take care
of different implementations.
.I CopyInterface
may be used instead of \fIAttachInterface\fP to
attach the set of interface procedures to \fIto\fP which
has been formerly attached to \fIfrom\fP.
Note that \fINetIO\fP supports \fIForwarders\fP,
i.e. \fIForwarders.Forward\fP calls \fICopyInterface\fP
implicitly.
If \fIAttachInterface\fP or \fICopyInterface\fP is
called, the new interface will be installed
for all dependent streams of \fIs\fP or \fIto\fP,
respectively.
.SH DIAGNOSTICS
All input and output procedures return \fBFALSE\fP
in error case.
With the exception of reaching an end of file condition,
they should generate appropriate events which indicate the problem.
.SH "SEE ALSO"
.Tb PersistentObjects(3)
.Tp Forwarders(3)
general forwarding operation
.Tp PersistentEvents(3)
input and output of events and error queues
.Tp PersistentObjects(3)
input and output of persistent objects
.Te
.\" ---------------------------------------------------------------------------
.\" $Id: NetIO.3,v 1.4 1999/04/15 08:11:19 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: NetIO.3,v $
.\" Revision 1.4  1999/04/15  08:11:19  borchert
.\" old reference to ForeignEvents replaced by PersistentEvents
.\"
.\" Revision 1.3  1995/03/20  08:41:07  borchert
.\" - SizeOf removed (because it has been removed from PersistentObjects)
.\" - NetIO supports now Forwarders
.\"
.\" Revision 1.2  1994/08/27  12:37:40  borchert
.\" support of ConstStrings added
.\"
.\" Revision 1.1  1993/06/13  15:05:04  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
