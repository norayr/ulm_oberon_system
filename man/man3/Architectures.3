'\" t
.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-1999 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH Architectures 3 "Last change: 10 March 2004" "Release 0.5" "Ulm's Oberon System"
.SH NAME
Architectures \- classification of hardware architectures and
operating systems
.SH SYNOPSIS
.Pg
TYPE Architecture = POINTER TO ArchitectureRec;
TYPE ArchitectureRec =
   RECORD
      (PersistentDisciplines.ObjectRec)
      class: ConstStrings.String;
      variant: ConstStrings.String;
      vendor: ConstStrings.String;
      model: ConstStrings.String;
      os, osrelease: ConstStrings.String;
   END;
.sp 0.7
VAR system: Architecture;
.sp 0.7
PROCEDURE Create(VAR arch: Architecture; class: ARRAY OF CHAR);
PROCEDURE CreateCopy(VAR arch: Architecture; orig: Architecture);
.sp 0.3
PROCEDURE Compatible(arch1, arch2: Architecture;
		     VAR combined: Architecture) : BOOLEAN;
PROCEDURE Identical(arch1, arch2: Architecture) : BOOLEAN;
.sp 0.3
PROCEDURE GetString(arch: Architecture; VAR string: ConstStrings.String);
PROCEDURE GetArch(string: ConstStrings.String; VAR arch: Architecture);
.Pe
.SH DESCRIPTION
.I Architectures
supports the specification of sets of environments that
are characterized by their machine processor and,
optionally, their operating system. Objects of type
\fIArchitectures.Architecture\fP contain a large set
of attributes that might be helpful in distinguishing
different variants. But specifications should specify
as less as possible: The less specified the more powerful
the set of architectures covered. Following components
contribute to the specification of an architecture:
.LP
.Tb osrelease
.Tp class
characterizes a hardware family (e.g. \fIi386\fP, \fIm68k\fP,
or \fIsparc\fP) that provides some sort of compatibility.
This is the only mandatory component of an architecture. All
others may be \fBNIL\fP. Class names should, if possible,
conform to those returned by ``uname -p''.
.Tp variant
specifies a minor variant of the hardware architecture
(e.g. \fI586\fP for \fIi386\fP, \fI68030\fP of \fIm68k\fP,
or \fIv8\fP of \fIsparc\fP). Most families are organized
in a hierarchy of variants where all new variants are
compatibility preserving extensions of older variants.
.Tp vendor
names the vendor who designed the hardware architecture.
This component should only be given in case of multiple
vendors with different user-visible extensions and/or restrictions.
.Tp model
is a name of a set of conventions that specify the size
of the address space and long integers.
.Tp os
specifies the operating system if dependencies to it are
of concern. The names used should conform to those returned
by ``uname -s''.
.Tp osrelease
restricts an architecture to a specific release of an
operating system. Release numbers should conform to those
returned by ``uname -r''. Note that the specification of
\fIosrelease\fP requires \fIos\fP to be non-\fBNIL\fP.
.Te
.LP
Note that objects of type \fIArchitectures.Architecture\fP
are persistent and may have persistent disciplines attached to it.
.LP
.I Create
creates an architecture specification of the given class.
Further components that need to be specified should initialized
shortly thereafter preferably by using \fIConstStrings.Create\fP.
Note, however, that thereafter architectures should be treated
as constants, i.e. they must not be modified.
Instead
.I CreateCopy
allows to create a copy of an architecture that may be
changed shortly thereafter.
.LP
.I Compatible
returns \fBTRUE\fP if \fIarch1\fP and \fIarch2\fP are
compatible to each other that means that either the set
of architectures defined by \fIarch1\fP includes those
of \fIarch2\fP or vice versa.
.I Compatible
sets on success \fIcombined\fP to the intersection of
both architecture sets.
.I Identical
returns \fBTRUE\fP if \fIarch1\fP and \fIarch2\fP are identical.
.LP
Architectures may be converted from oder to strings using following
EBNF grammar:
.TS
l l.
\fIArchString\fP =	\fIHardware\fP [ ";" \fIModel\fP ] [ "-" \fISoftware\fP ] .
\fIHardware\fP =	\fIClass\fP [ ":" [ \fIVariant\fP ] [ ":" \fIVendor\fP ] ] .
\fIModel\fP =	\fIAlphaNum\fP .
\fISoftware\fP =	\fIOS\fP [ ":" \fIRelease\fP ] .
\fIClass\fP =	\fIAlphaNum\fP .
\fIVariant\fP =	\fIAlphaNum\fP .
\fIVendor\fP =	\fIAlphaNum\fP .
\fIOS\fP =	\fIAlphaNum\fP .
\fIRelease\fP =	\fIAlphaNum\fP .
.TE
.I GetString
creates a constant string representing \fIarch\fP.
.I GetArch
reconstructs an architecture object from \fIstring\fP
which is set to \fBNIL\fP in case of syntax errors.
.LP
The architectural information of the current system can be
made available through \fIsystem\fP if a module that is
familiar with the current architecture was loaded to retrieve
these informations.
.SH "SEE ALSO"
.Tb SPARCSolarisArchitecture(3)
.Tp uname(1)
prints parameters of current system
.Tp ConstStrings(3)
constant strings of arbitrary length
.Tp PersistentDisciplines(3)
persistent disciplines
.Tp PersistentObjects(3)
operations for persistent objects
.Tp SPARCSolarisArchitecture(3)
initializes \fIsystem\fP on SPARC/Solaris platforms, if loaded
.Tp SysSolarisInfo(3)
extracts various credentials on Solaris systems
.Tp SysUname(3)
credentials of the current operating system
.Te
.\" ---------------------------------------------------------------------------
.\" $Id: Architectures.3,v 1.2 2004/03/10 16:13:50 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: Architectures.3,v $
.\" Revision 1.2  2004/03/10 16:13:50  borchert
.\" - global variable ``system'' added
.\" - references to SysUname(3), SysSolarisInfo(3), and
.\"   SPARCSolarisArchitecture(3) added
.\"
.\" Revision 1.1  2000/04/03 16:53:09  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
