'\" e
.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-1996 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH RabinMiller 3 "Last change: 3 April 1997" "Release 0.5" "Ulm's Oberon System"
.SH NAME
RabinMiller \- implementation of the Rabin-Miller primality testing algorithm
.SH SYNOPSIS
.Pg
VAR test: Primes.Test;
.Pe
.SH DESCRIPTION
.EQ
delim $$
.EN
.I RabinMiller
offers the implementation of the primality testing algorithm developed by M. O.
Rabin, based in part on the ideas of G. L. Miller. Look at Journal of Number
Theory, v. 12, n. 1, Feb 1980, pp. 128-138: M. O. Rabin, \fIProbabilistic 
Algorithm for Testing Primality\fP as a reference. The test wrongly declares a
none-prime a prime in 1/4 of the cases. The tests are independent and consequently
\fIn\fP tests wrongly declare a none-prime a prime in 1/$4 sup n$ of the cases. The 
Rabin-Miller testing algorithm converges faster than the algorithm implemented
in \fILehmann(3)\fP
.LP
During its initialization, \fIRabinMiller\fP creates an interface of the type
defined in \fIPrimes(3)\fP and connects it to \fItest\fP.
.LP
\fIRabinMiller\fP must have the possibility to create random numbers of the type
specified by the given value to be tested. Consequently, a module importing
\fIRabinMiller\fP must also import a service provider for the generation of random
numbers of the specified type (see, for example, \fIRandCard1024s(3)\fP).
.SH AUTHOR
Frank B.J. Fischer
.SH "SEE ALSO"
.Tb QuickPrimeTest(3)
.Tp Primes(3)
general abstraction for primality testing algorithm
.Tp QuickPrimeTest(3)
a quick test for small primes
.Tp Lehmann(3)
implementation of the Lehmann primality testing algorithm
.Tp PrimeGen(3)
implementation of a prime number generator
.Te
.\" ---------------------------------------------------------------------------
.\" $Id: RabinMiller.3,v 1.1 1997/04/03 15:29:31 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: RabinMiller.3,v $
.\" Revision 1.1  1997/04/03  15:29:31  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
