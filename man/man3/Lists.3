.\" --------------------------------------
.\" Oberon System Documentation   AFB 8/90
.\" (c) University of Ulm, SAI, D-7900 Ulm
.\" --------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH Lists 3 "Last change: 12 February 1994" "Release 0.5" "Ulm's Oberon System"
.SH NAME
Lists \- management of linear lists
.SH SYNOPSIS
.Pg
TYPE List = POINTER TO ListRec;
TYPE ListRec = RECORD (Objects.ObjectRec) END;
TYPE Element = POINTER TO ElementRec;
TYPE ElementRec = RECORD (Objects.ObjectRec) END;
TYPE CompareProc = PROCEDURE (e1: Element; e2: Element) : INTEGER;
.sp 0.7
PROCEDURE CreateList(VAR list: List);
PROCEDURE CreateSortedList(VAR list: List; compare: CompareProc);
PROCEDURE Add(list: List; element: Element);
PROCEDURE Insert(list: List; element: Element);
PROCEDURE First(list: List);
PROCEDURE Next(list: List; VAR element: Element) : BOOLEAN;
PROCEDURE Last(list: List);
PROCEDURE Previous(list: List; VAR element: Element) : BOOLEAN;
.Pe
.SH DESCRIPTION
.I Lists
supports double linked lists.
Lists may be optionally maintained in sorted order.
Sorted lists need a comparison procedure of type \fICompareProc\fP.
Comparison procedures compare \fIe1\fP against \fIe2\fP and return
a negative integer value if \fIe1\fP is less than \fIe2\fP,
zero if \fIe1\fP equals \fIe2\fP,
and a positive integer value if \fIe1\fP is greater than \fIe2\fP.
.PP
List elements are of type \fIElement\fP.
This datatype is to be extended with the informations to be stored
into the list.
.PP
.I CreateList
creates a (unsorted) list.
.I list
serves as reference for future operations.
.I CreateSortedList
creates a sorted list.
.PP
.I Add
adds the given
.I element
to
.I list.
.I element
is either appended or
in case of sorted lists
inserted according to the order defined by
.IR compare .
.I Insert
works like
.I Add
but inserts the given
.I element
prior to the head in case of unsorted lists.
.PP
.I Next
and
.I Previous
allow sequential access of \fIlist\fP in ascending resp.
descending order.
Each call of \fINext\fP or \fIPrevious\fP works relative to the element
returned previously.
.I First
causes
.I Next
or
.I Previous
to return the first element of \fIlist\fP.
This is the historically first element for unsorted lists
(if the list was built up by calls of \fIAdd\fP)
or the lowest element in case of sorted lists.
Likewise,
.I Last
positions to the last element.
.I First
and
.I Last
return \fBFALSE\fP at the end of the list.
.SH EXAMPLE
Following code fragment examines a list in ascending order:
.Pg
VAR
   list: Lists.List;
   element: Lists.Element;

(* ... *)

Lists.First(list);
WHILE Lists.Next(list, element) DO
   (* ... *)
END;
.Pe
.SH BUGS
\fILists\fP will be replaced by a more general set of modules in the future.
.\" ---------------------------------------------------------------------------
.\" $Id: Lists.3,v 1.4 1994/02/12 17:14:45 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: Lists.3,v $
.\" Revision 1.4  1994/02/12  17:14:45  borchert
.\" InitList & InitSortedList renamed to CreateList & CreateSortedList
.\"
.\" Revision 1.3  1991/06/06  15:18:41  borchert
.\" First & Last do not return anything
.\"
.\" Revision 1.2  91/03/07  12:36:51  borchert
.\" Insert added
.\" 
.\" Revision 1.1  90/08/31  17:02:15  borchert
.\" Initial revision
.\" 
.\" ---------------------------------------------------------------------------
