.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-1995 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH Terminals 3 "Last change: 11 January 1996" "Release 0.5" "Ulm's Oberon System"
.SH NAME
Terminals \- abstraction for terminals
.SH SYNOPSIS
.Pg
(* terminal characteristics *)
CONST autoleftmargin = 0; autorightmargin = 1; 
CONST overstrikes = 2; safelastcolumn = 3;
.sp 0.3  
(* errorcodes *)
CONST cannotSetEcho = 0;
CONST cannotSetTermMode = 1;
CONST cannotSetCursor = 2;
CONST cannotMoveCursor = 3;
CONST cannotSetAppearance = 4;
CONST cannotScroll = 5;
CONST cannotSetScrollRegion = 6;
CONST cannotClearScreen = 7;
CONST invalidDirection = 8;
CONST invalidRegion = 9;
CONST invalidPosition = 10;
CONST notSupported = 11;
CONST errorcodes = 12;
.sp 0.3
(* echo *)
CONST on = 0; off = 1;
.sp 0.3
(* terminal modes *)
CONST raw = 0; cooked = 1;
.sp 0.3
(* directions *)
CONST forward = 0; reverse = 1;
.sp 0.3
(* cursor shapes *)
CONST visible = 0; invisible = 1;
.sp 0.3
.sp 0.3
(* capabilities *)
CONST setEcho = 0;
CONST setTermMode = 1;
CONST setCursor = 2;
CONST moveCursor = 3;
CONST setAppearance = 4;
CONST scroll = 5;
CONST setScrollRegion = 6;
CONST clearScreen = 7;
.sp 0.7
TYPE CapabilitySet = SET;
TYPE Echomode = SHORTINT;
TYPE Termmode = SHORTINT;
TYPE Direction = SHORTINT;
TYPE Shape = SHORTINT;
.sp 0.3
TYPE Stream = POINTER TO StreamRec;
.sp 0.3
TYPE WindowChangeEvent = POINTER TO WindowChangeEventRec;
TYPE WindowChangeEventRec =
   RECORD
      (Events.EventRec)
      stream: Streams.Stream;
   END;
.sp 0.3
TYPE InterruptEvent = POINTER TO InterruptEventRec;
TYPE InterruptEventRec = 
   RECORD
      (Events.EventRec)
      stream: Streams.Stream;
   END;
.sp 0.3
TYPE QuitEvent = POINTER TO QuitEventRec;
TYPE QuitEventRec = 
   RECORD
      (Events.EventRec)
      stream: Streams.Stream;
   END;
.sp 0.3
TYPE HangupEvent = POINTER TO HangupEventRec;
TYPE HangupEventRec = 
   RECORD
      (Events.EventRec)
      stream: Streams.Stream;
   END;
.sp 0.3
TYPE ErrorEvent = POINTER TO ErrorEventRec;
TYPE ErrorEventRec = 
   RECORD
      (Events.EventRec)
      errorcode: SHORTINT;
   END;
.sp 0.3
(* interface procedures *)
TYPE SetTermModeProc = PROCEDURE (s: Streams.Stream; mode: Termmode);
TYPE SetEchoProc = PROCEDURE (s: Streams.Stream; mode: Echomode);
TYPE SetCursorProc = PROCEDURE (s: Streams.Stream; line, column: INTEGER);
TYPE MoveCursorProc = PROCEDURE(s: Streams.Stream; fromline, fromcolumn,
                                                   toline, tocolumn: INTEGER);
TYPE SetAppearanceProc = PROCEDURE(s: Streams.Stream; ap: Shape);
TYPE ScrollProc = PROCEDURE(s: Streams.Stream; dir: Direction);
TYPE SetScrollRegionProc = PROCEDURE(s: Streams.Stream; top, bottom: INTEGER);
TYPE ClearProc = PROCEDURE(s: Streams.Stream);
.sp 0.3
TYPE Interface = POINTER TO InterfaceRec;
TYPE InterfaceRec =
   RECORD
      (Objects.ObjectRec)
      setEcho: SetEchoProc;
      setTermMode: SetTermModeProc;
      setCursor: SetCursorProc;
      moveCursor: MoveCursorProc;
      setAppearance: SetAppearanceProc;
      scroll: ScrollProc;
      setScrollRegion: SetScrollRegionProc;
      clearScreen: ClearProc;
   END;
.sp 0.3
TYPE Status =
   RECORD
      (Objects.ObjectRec)
      lines, columns: INTEGER;      (* of physical screen    *)
      scrtop, scrbottom: INTEGER;   (* top and bottom of scroll region *)
      echo: Echomode;               (* on or off             *)
      mode: Termmode;               (* raw or cooked         *)
      characteristics: SET;         (* of terminal characteristics *)
      scrollDirections: SET;        (* up, down *)
      cursorShape: Shape;           (* current shape of cursor *)
   END;
.sp 0.3
TYPE StreamRec = 
   RECORD
      (Streams.StreamRec)
   END;
.sp 0.7
VAR console: Streams.Stream;
VAR windowchanged: Events.EventType;
VAR interrupt: Events.EventType;
VAR quit: Events.EventType;
VAR hangup: Events.EventType;
VAR error: Events.EventType;    
VAR errormsg: ARRAY errorcodes OF Events.Message;
.sp 0.7
PROCEDURE Init(s: Streams.Stream; status: Status; caps: CapabilitySet; 
               if: Interface);
.sp 0.3
PROCEDURE ClearScreen(s: Streams.Stream);
PROCEDURE Echo(s: Streams.Stream; mode: Echomode);
PROCEDURE SetTermMode(s: Streams.Stream; mode: Termmode);
PROCEDURE SetCursor(s: Streams.Stream; line, column: INTEGER);
PROCEDURE MoveCursor(s: Streams.Stream; fromline, fromcolumn,
                                        toline, tocolumn: INTEGER);
PROCEDURE CursorAppearance(s: Streams.Stream; ap: Shape);
PROCEDURE Scroll(s: Streams.Stream; dir: Direction);
PROCEDURE SetScrollRegion(s: Streams.Stream; top, bottom: INTEGER);
PROCEDURE Capabilities(s: Streams.Stream): CapabilitySet;
PROCEDURE GetStatus(s: Streams.Stream; VAR status: Status);
.Pe
.SH DESCRIPTION
.I Terminals 
offers a general interface for terminals. Terminal devices enable users
to communicate with a host machine, i.e. send data to a host and recieve
data from it. Terminals usually use a keyboard for input and a display for
output. Displays are organized in a number of lines and columns with a
cursor designating the location where the next character will be printed.
Lines and columns are counted relative to the upper left corner, which
has the coordinates (0,0).
.PP
.I Terminals
stores some characteristics of the terminal's display:
.PP
.Tb autoleftmargin
.Tp autoleftmargin
backspace or cursor-left in the first column forces the cursor to the last
column of the previous line. The reaction is undefined if the cursor already
was on the first line.
.Tp autorightmargin
writing to the last column forces the cursor to the first column of the
next line. The reaction is undefined if the cursor already was on the last
line.
.Tp overstrikes
terminal overstrikes characters rather than replacing them.
.Tp savelastcolumn
writing a character in the lower right corner does not scroll the screen
and the cursor position remains unchanged.
.Te
.PP
A terminal can operate in two modes:
.PP
.Tb cooked
.Tp cooked
in 
.I cooked 
mode terminal input is processed in units of lines, i.e. input can be edited 
before it is passed to an application.
.Tp raw
in 
.I raw
mode, input characters are not assembled into lines and therefore no input 
editing is possible.
.Te
.PP
The set of procedures which implement a terminal-abstraction of a 
specific form is given by an interface. Not every procedure must be implemented. 
The set of implemented procedures is given by the \fIcaps\fP parameter of \fIInit\fP. 
The interface procedures should meet following specifications:
.PP
.Is
.If settermmode "s: Stream; mode: Termmode"
set terminals mode. 
.If setecho "s: Stream; mode: Echomode"
turn echoing of input on or off.
.If setcursor "s: Stream; line, column: INTEGER"
place cursor at absolute position
.If movecursor "s: Stream; fromline, fromcolumn, toline, tocolumn"
move cursor from position (\fIfromline, fromcolumn\fP) to (\fItoline, tocolumn\fP).
.If setappearance "s: Stream; ap: Shape"
set the appearance of the cursor. 
.If scroll "s: Stream; dir: Direction"
scroll scrollregion once in direction dir.
.If setscrollregion "s: Stream; top, bottom: INTEGER"
set the scrollregion.
.If clearscreen "s: Stream"
clear terminal's screen.
.Ef
.PP
.I Init 
initializes the terminal 
.I s 
for the interface specified by 
.I if
and 
.IR caps .
\fIstatus\fP has to hold the initial state of the terminal. 
.PP
.I SetTermMode
sets the terminal's mode to \fIraw\fP or \fIcooked\fP.
.PP
.I Echo 
turns echoing of input on or off.
.PP
.I ClearScreen
clears the terminal's screen.
.PP
.I Scroll
scrolls the contents of the scrollregion once in direction 
.IR dir . 
.PP
.I SetScrollRegion 
sets the scrollregion to (\fItop\fP, \fIbottom\fP).
.PP
.I SetCursor
sets the cursor to the position denoted by 
.I line
and
.IR column .
.PP
.I MoveCursor 
moves the cursor from position (\fIfromline\fP, \fIfromcolumn\fP) to
to position (\fItoline\fP, \fItocolumn\fP). Clients must track the 
current cursor position themselves in order to use this procedure properly.
.PP
.I CursorAppearance
sets the cursor's appearance. Available modes are 
.I visible
and
.IR invisible .
.PP
.I Capabilities 
returns the capabilities of the terminal.
.PP
.I GetStatus
returns the status of the terminal.
.PP
\fITerminals\fP defines four event types for handling of signals
generated by terminals:
.Tb windowchanged
.Tp windowchanged 
raised when the size of the display has changed. This event appears mainly
on terminal emulations of window systems.
.Tp interrupt
raised when a user presses the interrupt key.
.Tp quit
raised when a user presses the quit key.
.Tp hangup
raised after the modem line was hung up.
.Te
When the signals occur the associated events must be raised by the
terminal implementation.
.PP
The default handling for the events is:
.IP \(bu
Update the line and column information in the stream's status in case of
a \fIWindowChangeEvent\fP.
.IP \(bu
Call \fIProcess.Terminate\fP in case of \fIInterruptEvent\fP and 
\fIHangupEvent\fP.
.IP \(bu
Call \fIProcess.Abort\fP in case of QuitEvent.
.SH DIAGNOSTICS
All terminal related errors lead to events of type error which are passed to 
\fIRelatedEvents(3)\fP for further handling.  
.PP
Following errorcodes are currently implemented:
.PP
.Tb cannotSetScrollRegion
.Tp cannotSetEcho                
terminal cannot set echo
.Tp cannotSetTermMode        
terminal cannot set termmode
.Tp cannotSetCursor                
terminal cannot set cursor
.Tp cannotMoveCursor        
terminal cannot move cursor
.Tp cannotSetAppearance        
terminal cannot change appearance of cursor
.Tp cannotScroll
terminal cannot scroll
.Tp cannotSetScrollRegion        
terminal does not support scroll regions
.Tp cannotClearScreen        
terminal cannot clear the screen
.Tp invalidDirection        
invalid direction given to Scroll
.Tp invalidRegion
given scrollregion is beyond screen limits
.Tp invalidPosition
given position is beyond screen limits
.Te
.SH "SEE ALSO"
.Tb TermLineGraphics(3)
.Tp RelatedEvents(3)        
error handling
.Tp Streams(3)
streams interface
.Tp SysTermIO(3)
UNIX Sytem V interface to the terminal driver
.Tp TermAttributes(3)
support of display attributes on ASCII terminals
.Tp TermInfos(3)
interface to the UNIX terminfo database
.Tp TermKeys(3)
support of function keys on ASCII terminals
.Tp TermLineGraphics(3)
support of line graphics on ASCII terminals
.Tp UnixTerminals(3)
UNIX implementation of terminals
.Te
.SH "AUTHOR"
Ralf Beck
with some minor corrections of Andreas Borchert
.\" ---------------------------------------------------------------------------
.\" $Id: Terminals.3,v 1.5 1996/01/11 15:31:01 rbeck Exp rbeck $
.\" ---------------------------------------------------------------------------
.\" $Log: Terminals.3,v $
.\" Revision 1.5  1996/01/11  15:31:01  rbeck
.\" *** empty log message ***
.\"
.\" Revision 1.4  1996/01/10  15:24:42  rbeck
.\" *** empty log message ***
.\"
.\" Revision 1.3  1995/12/13  14:42:50  rbeck
.\" *** empty log message ***
.\"
.\" Revision 1.2  1995/12/07  14:29:24  rbeck
.\" *** empty log message ***
.\"
.\" Revision 1.1  1995/12/06  15:23:00  rbeck
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
