.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-1995 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH PersistentDisciplines 3 "Last change: 16 September 1996" "Release 0.5" "Ulm's Oberon System"
.SH NAME
PersistentDisciplines \- attach additional data structures to persistent
objects
.SH SYNOPSIS
.Pg
TYPE Identifier = LONGINT;
.sp 0.3
TYPE Discipline = POINTER TO DisciplineRec;
TYPE DisciplineRec =
   RECORD
      (PersistentObjects.ObjectRec)
      id: Identifier;
   END;
.sp 0.3
TYPE Object = POINTER TO ObjectRec;
TYPE ObjectRec =
   RECORD
      (PersistentObjects.ObjectRec)
   END;
.sp 0.3
TYPE AddProc = PROCEDURE (object: Disciplines.Object; discipline: Discipline);
TYPE RemoveProc = PROCEDURE (object: Disciplines.Object; id: Identifier);
TYPE SeekProc = PROCEDURE (object: Disciplines.Object; id: Identifier;
                           VAR discipline: Discipline) : BOOLEAN;
TYPE Interface = POINTER TO InterfaceRec;
TYPE InterfaceRec =
   RECORD
      (Objects.ObjectRec)
      add: AddProc;
      remove: RemoveProc;
      seek: SeekProc;
   END;
.sp 0.7
PROCEDURE Unique(sample: Discipline) : Identifier;
PROCEDURE GetSample(id: Identifier) : Discipline;
PROCEDURE AttachInterface(object: Disciplines.Object; if: Interface);
PROCEDURE UseInterfaceOf(object, host: Disciplines.Object);
.sp 0.3
PROCEDURE Add(object: Disciplines.Object; discipline: Discipline);
PROCEDURE Remove(object: Disciplines.Object; id: Identifier);
PROCEDURE Seek(object: Disciplines.Object; id: Identifier;
               VAR discipline: Discipline) : BOOLEAN;
.sp 0.3
PROCEDURE CreateObject(VAR object: Object);
.Pe
.SH DESCRIPTION
.I PersistentDisciplines
allows to attach additional data structures to 
persistent objects.
These added data structures are also persistent and they are written/read
to/from a stream together with the object they are attached to.
.PP
Every module which implements a discipline should
call \fIUnique\fP during its initialization.
The returned identifier is needed later to locate
the data structures contributed by a specific module.
Note that identifiers are always local to the current process environment.
Thus, identifiers must not be marshalled by the \fIread\fP or
\fIwrite\fP interface procedure for \fIPersistentObjects\fP.
Instead, identifiers are to be assigned by the \fIcreate\fP procedure.
.PP
\fIUnique\fP requires a sample of the discipline to be provided.
This technique allows to map local identifiers to remote identifiers
in case of remote objects.
For this to work, \fIPersistentObjects.Init\fP must have been
called for the sample.
\fIGetSample\fP returns the sample for a given identifier.
Invalid identifiers cause \fBNIL\fP to be returned.
.PP
.I Add
attaches \fIdiscipline\fP to \fIobject\fP.
The identifier is given by the \fIid\fP component of
\fIdiscipline\fP.
Adding a discipline with the same identifier twice
to the same object causes the discipline to be replaced.
.PP
.I Remove
removes the discipline with the given \fIid\fP from
\fIobject\fP, if it exists.
.PP
.I Seek
seeks for a discipline with the given \fIid\fP
and returns it in \fIdiscipline\fP, if it exists.
Otherwise, \fBFALSE\fP is returned.
.PP
Usually, \fIPersistentDisciplines\fP uses builtin implementations
of \fIAdd\fP, \fIRemove\fP, and \fISeek\fP.
These default implementations may be overridden by calling
\fIAttachInterface\fP.
Calls of \fIAttachInterface\fP are ignored if the list of
already attached disciplines is non-empty.
\fIAttachInterface\fP is mainly intended for proxy objects,
i.e. objects which forward all messages to the original object
which may be located elsewhere.
.PP
\fIUseInterfaceOf\fP causes all \fIAdd\fP, \fIRemove\fP,
and \fISeek\fP operations to be forwarded from \fIobject\fP
to \fIhost\fP.
Note that \fIPersistentDisciplines\fP supports
\fIForwarders(3)\fP,
i.e. \fIForwarders.Forward\fP calls \fIUseInterfaceOf\fP
implicitly.
.PP
.I CreateObject
creates a new object. This procedure should be used instead of \fBNEW\fP, if
you want to create an object of type \fIObject\fP.
.SH "SEE ALSO"
.Tb PersistentObjects(3)
.Tp Disciplines(3)
attachments of non-persistent additional data structures
.Tp Forwarders(3)
general forwarding operation
.Tp PersistentObjects(3)
input and output of persistent objects
.Te
.SH AUTHORS
The original implementation and manual page was written 1993
by Detlef Birkholz.
The revisions are due to Andreas Borchert.
.\" ---------------------------------------------------------------------------
.\" $Id: PersistentDisciplines.3,v 1.10 1996/09/16 16:49:42 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: PersistentDisciplines.3,v $
.\" Revision 1.10  1996/09/16  16:49:42  borchert
.\" reference to PersistentObjects.Connect replaced by
.\" PersistentObjects.Init
.\"
.\" Revision 1.9  1995/03/20  08:42:37  borchert
.\" - support of persistent disciplines for extensions of Disciplines.Object
.\"   added
.\" - PersistentDisciplines supports now Forwarders
.\"
.\" Revision 1.8  1994/02/13  16:12:44  borchert
.\" note added that identifiers must not be marshalled by read/write if procs
.\"
.\" Revision 1.7  1994/02/13  11:36:26  borchert
.\" AttachInterface added
.\" Unique now gets a sample of the discipline which may be retrieved by
.\" GetSample
.\"
.\" Revision 1.6  1993/12/14  11:03:30  wbirkhol
.\" init procedure renamed to create procedure
.\"
.\" Revision 1.5  93/07/06  13:42:59  wbirkhol
.\" Adaption to the new Syntax of PersistentObjects, therefore all xxxObjData 
.\" and xxxDisciData procedures have been eliminated
.\" 
.\" Revision 1.4  93/06/22  16:41:49  wbirkhol
.\" typos corrected
.\" 
.\" Revision 1.1  93/05/18  11:56:47  borchert
.\" Initial revision
.\" 
.\" ---------------------------------------------------------------------------
