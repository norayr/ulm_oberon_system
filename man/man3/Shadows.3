.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-1995 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH Shadows 3 "Last change: 19 December 1995" "Release 0.5" "Ulm's Oberon System"
.SH NAME
Shadows \- call-back objects on top of \fIRemoteObjects(3)\fP
.SH SYNOPSIS
.Pg
TYPE Shadow = POINTER TO ShadowRec;
TYPE ShadowRec = RECORD (Services.ObjectRec) END;
.sp 0.7
PROCEDURE InitObject(object: Services.Object);
.sp 0.3
PROCEDURE Create(VAR shadow: Shadow; proxy: Services.Object);
PROCEDURE Init(shadow: Shadow; proxy: Services.Object);
.sp 0.7
PROCEDURE Send(object: Services.Object; VAR message: Messages.Message);
PROCEDURE SendExcept(object: Services.Object; shadow: Shadow;
                     VAR message: Messages.Message);
.sp 0.7
PROCEDURE GetProxy(shadow: Shadow; VAR proxy: Services.Object);
PROCEDURE GetShadow(proxy: Services.Object; VAR shadow: Shadow);
.Pe
.SH DESCRIPTION
.I RemoteObjects(3)
supports the delegation of operations from proxy objects to
their associated original object.
In some cases, it turns out to be necessary to delegate
operations from the side of the original object to all sides
with proxy objects.
.I Shadows
supports this on base of shadow objects.
Shadow objects are created on the side of the proxy object
and exported to the side of the original object.
.I Shadows
maintains a list of shadow proxies at the side of the original
object and allows operations to be forwarded to all (or nearly all)
shadow objects which, in turn, may operate on the proxy objects.
.PP
.I Shadows
must be supported by that module which installs its interface
at \fIRemoteObjects(3)\fP:
.IP \(bu
\fIInitObject\fP is to be called by the
\fIRemoteObjects.GetParamsProc\fP interface procedure
to prepare an object to receive messages about newly created proxies
of it.
.IP \(bu
\fICreate\fP is to be called by the
\fIRemoteObjects.RegisterProc\fP interface procedure
to register a proxy object at the side of the original object.
\fIInit\fP may be used instead of \fICreate\fP if an extension
of \fIShadows.Shadow\fP is used.
Note that shadow objects depend on their associated proxy objects
and hence terminate when their proxy object terminates
(see \fIResources(3)\fP).
.PP
\fISend\fP sends the given message to all shadow objects
of the given object.
This is a no-operation if the given object is not shadowed.
Note that \fIShadows\fP parallelizes the forwarding of
messages to all shadow objects by maintaining a
task for each shadow proxy.
\fISendExcept\fP works like \fISend\fP but suppresses
the delivery of the message to the given shadow object.
This allows to forward a message which came from one of
the shadow objects to all other shadow objects.
.PP
.I GetProxy
allows (on the side of the proxy object) to retrieve the
associated proxy object of a shadow.
This is useful for message handlers of shadow objects.
.I GetShadow
returns the shadow of a proxy object.
This may be useful for other parties which are interested
in installing a message handler for the shadow object.
.SH DIAGNOSTICS
\fIShadows\fP does not generate any error events on its own
but forwards the events of \fIMessages(3)\fP to the associated objects.
\fISend\fP and \fISendExcept\fP silently ignore the message
if the given object is not shadowed.
\fIGetProxy\fP and \fIGetShadow\fP return \fBNIL\fP
in error cases (if it is called on the wrong side or
if that object is not shadowed).
.SH "SEE ALSO"
.Tb RemoteObjects(3)
.Tp Message(3)
message handling
.Tp RemoteObjects(3)
delegation of messages to remote objects
.Tp Resources(3)
life-time dependencies between objects
.Te
.\" ---------------------------------------------------------------------------
.\" $Id: Shadows.3,v 1.1 1995/12/19 10:20:16 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: Shadows.3,v $
.\" Revision 1.1  1995/12/19  10:20:16  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
