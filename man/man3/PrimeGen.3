'\" e
.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-1996 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH PrimeGen 3 "Last change: 3 April 1997" "Release 0.5" "Ulm's Oberon System"
.SH NAME
PrimeGen \- implementation of a prime number generator
.SH SYNOPSIS
.Pg
PROCEDURE Generate(test: Primes.Test; n: INTEGER; 
                   pLeast: REAL;
                   VAR prime: IntOperations.Operand);
.Pe
.SH DESCRIPTION
.I PrimeGen
is an implementation of a prime number generator using \fIQuickPrimeTest(3)\fP to
speed up the generation, and a probabilistic testing algorithm given as a 
parameter (see \fILehmann(3)\fP and \fIRabinMiller(3)\fP). Prime number 
generation, particularly if large prime numbers are wanted, is time-consuming. 
Large prime numbers means for example \fIn\fP set to 512.
.LP
.EQ
delim $$
.EN
.I Generate
generates a prime number in $[ 2 sup {n-1}..2 sup n )$. The probability that the
generated number is prime is greater or equal than \fIpLeast\fP. 
\fItest\fP specifies the used probabilistic testing algorithm and the result is
stored in the already initialized value \fIprime\fP which must be large enough
for \fIn\fP bits (check with \fIIntOperations\fP.\fIIsLargeEnoughFor\fP).
.SH DIAGNOSTICS
\fIPrimeGen\fP asserts that the variable used for storing the prime
number is already initialized and that the type of \fIprime\fP is large enough
for \fIn\fP bits.
.SH AUTHOR
Frank B.J. Fischer
.SH "SEE ALSO"
.Tb QuickPrimeTest(3)
.Tp IntOperations(3)
generic interface for arithmetic integer operations
.Tp Primes(3)
general abstraction for primality testing algorithms
.Tp QuickPrimeTest(3)
quick test for small primes
.Tp RabinMiller(3)
implementation of the Rabin-Miller primality test algorithm
.Tp Lehmann(3)
implementation of the Lehmann primality test algorithm
.Te
.\" ---------------------------------------------------------------------------
.\" $Id: PrimeGen.3,v 1.1 1997/04/03 15:29:30 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: PrimeGen.3,v $
.\" Revision 1.1  1997/04/03  15:29:30  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
