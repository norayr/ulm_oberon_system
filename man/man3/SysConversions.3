'\" t
.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-1996 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH SysConversions 3 "Last change: 2 April 2004" "Release 0.5" "Ulm's Oberon System"
.SH NAME
SysConversions \- convert Oberon records to/from C structures
.SH SYNOPSIS
.Pg
TYPE Address = SysTypes.Address;
TYPE Size = Address;
.sp 0.3
TYPE Event = POINTER TO EventRec;
TYPE EventRec =
   RECORD
      (Events.EventRec)
      format: Events.Message;
   END;
.sp 0.3
TYPE Format = POINTER TO FormatRec;
TYPE FormatRec =
   RECORD
      (Objects.ObjectRec)
   END;
.sp 0.3
VAR badformat: Events.EventType;
.sp 0.7
PROCEDURE ByAddrToC(from, to: Address; format: ARRAY OF CHAR);
PROCEDURE ByAddrFromC(from, to: Address; format: ARRAY OF CHAR);
.sp 0.3
PROCEDURE ToC(VAR from, to: ARRAY OF BYTE; format: ARRAY OF CHAR);
PROCEDURE FromC(VAR from, to: ARRAY OF BYTE; format: ARRAY OF CHAR);
.sp 0.3
PROCEDURE CSize(format: ARRAY OF CHAR) : Size;
PROCEDURE OberonSize(format: ARRAY OF CHAR) : Size;
.sp 0.3
PROCEDURE Compile(VAR fmt: Format; format: ARRAY OF CHAR);
.sp 0.3
PROCEDURE ByFmtAndAddrToC(from, to: Address; format: Format);
PROCEDURE ByFmtAndAddrFromC(from, to: Address; format: Format);
.sp 0.3
PROCEDURE ByFmtToC(VAR from, to: ARRAY OF BYTE; format: Format);
PROCEDURE ByFmtFromC(VAR from, to: ARRAY OF BYTE; format: Format);
.Pe
.SH DESCRIPTION
.I SysConversions
supports type conversions of Oberon records to and from C structures.
Conversions are necessary for some system calls
(e.g. \fIioctl(2)\fP and \fIstat(2)\fP) and file formats
(e.g. \fIa.out(5)\fP).
.PP
The relation of an Oberon record to a C structure is described by
a format string.
It is important to note that the same format string is used
for conversions in both directions (i.e. from and to the C structure).
.PP
Format strings consists of a slash-separated list of component pairs.
Each component pair describes a conversion of a Oberon component type
from and to a C member type.
Component types are given by a single letter,
e.g. "is" converts an Oberon \fBINTEGER\fP component to/from \fBshort int\fP.
Arrays are specified by a length and a colon preceding the component types,
e.g. "2:is" for \fBARRAY 2 OF INTEGER\fP to/from \fBshort int [2]\fP.
Factors allow shorter format strings,
e.g. "3*is" is equivalent to "is/is/is".
Note that "2:is" is not equivalent to "2*is" because of different
alignment and padding for arrays.
Factors and arrays may be combined,
e.g. "2:2*is" converts \fBARRAY 2 OF RECORD a, b: INTEGER END\fP
to/from \fBstruct { int a, b; } [2]\fP.
The factor takes precedence over the array specification,
thus "2:2*is" is equivalent to "2*2:is".
.PP
Both data types may be of different size.
Conversions to smaller data types cause the higher significant bits
to be cut off.
Conversions to larger data types depend on the data types involved:
signed data types are converted with sign extension,
unsigned data types (this includes addresses and sets) are filled up
with zeroes.
Conversions to \fBBOOLEAN\fP are treated special:
any nonzero bit pattern is converted to \fBTRUE\fP,
zero is converted to \fBFALSE\fP.
.PP
Skip specifications allow to suppress conversions and assignments.
E.g. "i-" suppresses the Oberon to C conversion
because there is no corresponding
member of the C structure and
causes the integer component to remain unchanged in case
of C to Oberon conversions.
This allows multiple conversions into one record.
.PP
Conversions may be followed by comments with leading "=".
Comments are intended to document the member names of the C structure.
.PP
Format strings must conform to the syntax following:
.Pg
Format = Conversion { "/" Conversion } .
Conversion = [ Factors ] ConvChars [ Comment ] .
Factors = Array | Factor | Array Factor | Factor Array .
Array = Integer ":" .
Factor = Integer "*" .
ConvChars = OberonType CType | Skip CType | OberonType Skip .
OberonType = "a" | "b" | "c" | "h" | "s" | "i" | "l" | "S" .
CType = "a" | "c" | "C" | "s" | "S" | "i" | "I" | "u" | "l" | "L" .
Integer = Digit { Digit } .
Digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" .
Skip = "-" .
Comment = "=" { AnyChar } .
AnyChar = (* all characters except "/" *) .
.Pe
Following data types are supported:
.TS
box;
cfI s | cfI s
lfB l | lfB lfB .
OberonType	CType
_
a	\fIAddress\fP	a	char *
b	\fBBYTE\fP	c	/* signed */ char
B	\fBBOOLEAN\fP	C	unsigned char
c	\fBCHAR\fP	s	short int
h	\fBSYSTEM.INT16\fP	S	unsigned short int
s	\fBSHORTINT\fP	i	int
i	\fBINTEGER\fP	I	unsigned int
l	\fBLONGINT\fP	u	unsigned int
S	\fBSET\fP	l	long int
		L	unsigned long int
.TE
.PP
Formats may be given as string or as reference to an internal
representation.
The internal representation is much faster in case of multiple
conversions.
.I Compile
converts
.I format
into
.I fmt
which may be given to the \fIByFmt\fP procedures as reference
to the internal representation.
.PP
Oberon records and C structures may be given either by address
(\fIByAddr\fP procedures) or by an array of \fBBYTE\fP.
.PP
\fIOberonSize\fP and \fICSize\fP return the size in bytes of the
corresponding data types as defined by \fIformat\fP.
The result of \fIOberonSize\fP should be equal to the size of the
corresponding Oberon record and
the size of the byte array containing the C structure should be
at least as large as the result of \fICSize\fP.
.I ToC
and
.I FromC
compare the length of the byte arrays against
\fIOberonSize\fP and \fICSize\fP of the given format
and raise \fIbadformat\fP in case of insufficient space.
For the other conversion procedures
it is in the responsibility of the caller to assert that
both parameters are at least as large
as described by the format.
.SH EXAMPLE
Conversion from
.Pg
Rec =
   RECORD
      a, b: INTEGER;
      c: CHAR;
      s: SET;
      f: ARRAY 3 OF INTEGER;
   END;
.Pe
to
.Pg
struct rec {
   short a, b;
   char c;
   int xx;      /* to be skipped on conversion */
   int s;
   int f[3];
};
.Pe
and vice versa works as follows:
.Pg
CONST
   format = "2*is=a,b/cc=c/-i=xx/Si=s/3:ii=f";
   structlen = 26; (* system dependent *)

TYPE
   StructRec = ARRAY structlen OF CHAR;

VAR
   fmt: SysConversions.Format;

PROCEDURE ConvertToC(from: Rec; VAR to: StructRec);
BEGIN
   SysConversions.ByFmtToC(from, to, fmt);
END ConvertToC;

PROCEDURE ConvertToOberon(from: StructRec; VAR to: Rec);
BEGIN
   SysConversions.ByFmtFromC(from, to, fmt);
END ConvertToOberon;

PROCEDURE Init;
BEGIN
   ASSERT(structlen >= SysConversions.CSize(format));
   ASSERT(SYSTEM.SIZE(Rec) = SysConversions.OberonSize(format));
   SysConversions.Compile(fmt, format);
END Init;
.Pe
.SH DIAGNOSTICS
\fIbadformat\fP is raised in case of syntax errors in formats.
.SH "SEE ALSO"
.Tb Assertions(3)
.Tp Events(3)
event handling
.Te
.SH BUGS
Multidimensional arrays are not implemented.
.PP
Character arrays with different lengths are not supported.
.\" ---------------------------------------------------------------------------
.\" $Id: SysConversions.3,v 1.6 2004/04/02 18:51:54 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: SysConversions.3,v $
.\" Revision 1.6  2004/04/02 18:51:54  borchert
.\" support of SYSTEM.INT16 added
.\"
.\" Revision 1.5  1996/09/16 16:11:53  borchert
.\" example fixed
.\"
.\" Revision 1.4  1996/09/16  16:08:58  borchert
.\" - Assertions.Raise replaced by ASSERT
.\" - minor typo corrected
.\"
.\" Revision 1.3  1994/02/08  09:47:48  borchert
.\" Messages.Assert replaced by Assertions.Raise in the example
.\"
.\" Revision 1.2  1991/11/14  08:18:56  borchert
.\" EventNumber -> EventType
.\"
.\" Revision 1.1  1990/09/07  17:22:31  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
