'\" t
.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-1995 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH SysProcess 3 "Last change: 13 September 1996" "Release 0.5" "Ulm's Oberon System:  Sun 3"
.SH NAME
SysProcess \- UNIX process management
.SH SYNOPSIS
.Pg
TYPE Event = POINTER TO EventRec;
TYPE EventRec =
   RECORD
      (Events.EventRec)
      exitcode: INTEGER;
   END;
.sp 0.7
TYPE ProcessId = INTEGER;
TYPE ProcessGroup = INTEGER;
TYPE UserId = INTEGER;
TYPE GroupId = INTEGER;
TYPE Signal = SysSignals.Signal;
TYPE Status =
   RECORD
      signal: Signal;
      exitcode: SHORTINT;
      core: BOOLEAN;
      stopped: BOOLEAN;
   END;
.sp 0.3
(* Wait4 options; see <sys/wait.h> *)
CONST nohang = 1;    (* don't hang in wait *)
CONST untraced = 2;  (* tell about stopped, untraced children *)
.sp 0.7
PROCEDURE Getpid() : ProcessId;
PROCEDURE Getpgrp() : ProcessGroup;
PROCEDURE Getppid() : ProcessId;
PROCEDURE Getuid() : UserId;
PROCEDURE Geteuid() : UserId;
PROCEDURE Getgid() : GroupId;
PROCEDURE Getegid() : GroupId;
PROCEDURE Kill(pid: INTEGER; sig: Signal;
               errors: RelatedEvents.Object) : BOOLEAN;
PROCEDURE Exit(code: INTEGER);
PROCEDURE Abort;
PROCEDURE Fork(VAR pid: ProcessId; errors: RelatedEvents.Object) : BOOLEAN;
PROCEDURE ExecEnv(path: ARRAY OF CHAR; argv, envp: SysArgs.Arguments;
                  errors: RelatedEvents.Object);
PROCEDURE Exec(path: ARRAY OF CHAR; argv: SysArgs.Arguments;
               errors: RelatedEvents.Object);
PROCEDURE Wait(VAR status: Status; VAR pid: ProcessId;
               errors: RelatedEvents.Object) : BOOLEAN;
PROCEDURE WaitFor(VAR pid: ProcessId; VAR status: Status;
                  errors: RelatedEvents.Object) : BOOLEAN;
PROCEDURE NonBlockingWait(VAR status: Status; VAR pid: ProcessId;
                          errors: RelatedEvents.Object) : BOOLEAN;
PROCEDURE NonBlockingWaitFor(VAR pid: ProcessId; VAR status: Status;
                             errors: RelatedEvents.Object) : BOOLEAN;
PROCEDURE Wait4(VAR pid: ProcessId; VAR status: Status;
                options: INTEGER;
                errors: RelatedEvents.Object;
                retry: BOOLEAN; VAR interrupted: BOOLEAN) : BOOLEAN;
PROCEDURE Pause;
.Pe
.SH DESCRIPTION
.I SysProcess
interfaces those UNIX system calls which are related to process management.
.PP
.I Exit
causes immediate termination without raising events.
.I Abort
enforces a default reaction for
.I SysSignals.ABRT
and sends
.I SysSignals.ABRT
to the process which causes process termination
(with core dump, if possible).
.PP
.I Getpid
returns the process id,
.I Getppid
the process id of the parent process.
.I Getpgrp
returns the process group.
.PP
.I Getuid
returns the real user id,
.I Geteuid
the effective user id of the calling process.
.I Getgid
returns the real group id,
.I Getegid
the effective group id of the calling process.
.PP
.I Kill
sends
.I sig
to the process designated by
.IR pid .
See \fIkill(2)\fP for details.
.PP
.I Fork
creates a new process.
.I pid
is set to zero for the child process and to
the process id of the child for the parent process.
.I ExecEnv
replaces the process image by
.I path
and passes
.I argv
and
.I envp
as command line parameters resp. environment parameters.
.I path
must be 0X-terminated.
See \fIUnixArgList(3)\fP for creation of argument lists.
.I Exec
is like
.I ExecEnv
but defaults
.I envp
to
.IR SysArgs.environ .
.PP
.I Wait
waits for any child to be terminated.
.I pid
contains the process id of the terminated process and
.I status
the termination signal or the exit code.
Fields of \fIstatus\fP:
.LP
.TS
box expand;
lfI lw(5.5i).
signal	T{
termination causing signal; equals 0 if terminated by exit
T}
exitcode	exit code (if \fIsignal\fP = 0)
core	core file produced?
stopped	stop of traced process?
.TE
.LP
.I Wait
returns
.B FALSE
if there are no children to wait for.
.PP
.I WaitFor
waits for the given children to terminate.
The behaviour of \fIWaitFor\fP is modified if \fIpid\fP is less than 1:
.TS
box expand;
l lw(5.5i).
\fIpid\fP = 0	T{
wait for any child process whose process group ID is equal to
that of the calling process.
T}
\fIpid\fP = -1	T{
wait for any child process; the behaviour is equivalent to \fIWait\fP.
T}
\fIpid\fP < 0	T{
wait for any child process whose process group ID is equal
to the absolute value of \fIpid\fP.
T}
.TE
.PP
.I NonBlockingWait
and
.I NonBlockingWaitFor
are nonblocking variants of
.I Wait
and
.I WaitFor .
They return \fBFALSE\fP and appropriate error events
if no child has exited yet.
.I Wait4
offers the most general interface to the corresponding system call.
Valid options are \fInohang\fP (nonblocking variant)
and \fIuntraced\fP (not only exited but also stopped children).
Both options may be combined by giving \fInohang\fP\fB+\fP\fIuntraced\fP.
.PP
.I Pause
suspends execution until receipt of a signal (see \fISysSignals(3)\fP)
which is not ignored by the calling process.
.I Pause
does not raise an event of \fISysErrors(3)\fP in case of return.
.SH DIAGNOSTICS
Failed system calls lead to events of \fISysErrors(3)\fP.
The \fIerrors\fP parameter is passed to \fISysErrors.Raise\fP.
All procedures return \fBFALSE\fP in case of errors.
.SH "SEE ALSO"
.Tb SysErrors(3)
.Tp exec(2)
\fIExec\fP and \fIExecEnv\fP
.Tp exit(2)
\fIExit\fP
.Tp fork(2)
\fIFork\fP
.Tp getpid(2)
\fIGetpid\fP and \fIGetppid\fP
.Tp getpgrp(2)
\fIGetpgrp\fP
.Tp getuid(2)
\fIGetuid, Geteuid, Getgid,\fP and \fIGetegid\fP
.Tp kill(2)
\fIKill\fP
.Tp pause(2)
\fIPause\fP
.Tp ptrace(2)
trace of processes
.Tp wait(2)
\fIWait\fP and \fIStatus\fP
.Tp Process(3)
more portable interface for exiting and aborting
.Tp SysErrors(3)
error handling
.Te
.\" ---------------------------------------------------------------------------
.\" $Id: SysProcess.3,v 1.4.2.9 1996/09/13 08:18:27 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: SysProcess.3,v $
.\" Revision 1.4.2.9  1996/09/13  08:18:27  borchert
.\" SysEvents does no longer exit (for some years already) and
.\" Abort aborts directly without raising any events
.\"
.\" Revision 1.4.2.8  1994/07/01  11:22:02  borchert
.\" nonblocking variants of Wait & WaitFor added
.\" Wait4 added
.\"
.\" Revision 1.4.2.7  1993/04/01  09:16:23  borchert
.\" Process.Exit does now the work of the former SysProcess.Exit
.\" SysProcess.Exit dows now the work of the former SysProcess.ImmediateExit
.\" SysProcess.ImmediateExit has been removed
.\"
.\" Revision 1.4.2.6  1992/04/22  10:37:17  borchert
.\" reference to Pauses(3) removed
.\"
.\" Revision 1.4.2.5  1992/03/24  09:20:45  borchert
.\" Process renamed to SysProcess
.\"
.\" Revision 1.4.2.4  1992/01/04  09:49:12  borchert
.\" reference to Pauses(3)
.\" Process now initializes the pause procedure of Pauses
.\"
.\" Revision 1.4.2.3  1991/11/18  08:13:11  borchert
.\" object parameters added for RelatedEvents
.\"
.\" Revision 1.4.2.2  91/11/14  08:15:45  borchert
.\" termination events are now defined in SysEvents
.\" DIAGNOSTICS added
.\" 
.\" Revision 1.4.2.1  1991/10/09  16:48:04  borchert
.\" new branch for Sun 3 version
.\"
.\" Revision 1.4  90/12/17  08:08:39  oberon
.\" typo error fixed and table now in box
.\" 
.\" Revision 1.3  90/10/07  00:51:28  oberon
.\" Pause added, BUGS removed
.\" 
.\" Revision 1.2  90/10/07  00:39:32  oberon
.\" Getuid, Geteuid, Getgid, and Getegid added
.\" 
.\" Revision 1.1  90/08/31  17:02:17  borchert
.\" Initial revision
.\" 
.\" ---------------------------------------------------------------------------
