.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-2005 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH Networks 3 "Last change: 24 February 2005" "Release 0.5" "Ulm's Oberon System"
.SH NAME
Networks \- general abstraction for bidirectional network connections
.SH SYNOPSIS
.Pg
TYPE Network = POINTER TO NetworkRec;
TYPE NetworkRec = RECORD (PersistentDisciplines.ObjectRec) END;
.sp 0.3
TYPE Address = POINTER TO AddressRec;
TYPE AddressRec =
   RECORD
      (PersistentDisciplines.ObjectRec)
      network: Network;
   END;
.sp 0.3
TYPE Socket = POINTER TO SocketRec;
TYPE SocketRec = RECORD (Disciplines.ObjectRec) END;
.sp 0.7
.ne 3v
TYPE OpenProc = PROCEDURE (VAR s: Streams.Stream; address: Address;
                           bufmode: Streams.BufMode;
                           errors: RelatedEvents.Object) : BOOLEAN;
.ne 2v
TYPE CreateOpenConditionProc = PROCEDURE(VAR condition: Conditions.Condition;
                                         address: Address);
.ne 4v
TYPE TestAndOpenProc = PROCEDURE (VAR s: Streams.Stream;
                                  condition: Conditions.Condition;
                                  bufmode: Streams.BufMode;
                                  errors: RelatedEvents.Object) : BOOLEAN;
.ne 3v
TYPE CreateSomeSocketProc = PROCEDURE (VAR socket: Socket;
                                       VAR address: Address;
                                       errors: RelatedEvents.Object) : BOOLEAN;
.ne 2v
TYPE ListenProc = PROCEDURE (VAR socket: Socket; address: Address;
                             errors: RelatedEvents.Object) : BOOLEAN;
TYPE ReleaseProc = PROCEDURE (socket: Socket);
.ne 2v
TYPE AcceptProc = PROCEDURE (socket: Socket; VAR s: Streams.Stream;
                             bufmode: Streams.BufMode) : BOOLEAN;
.ne 2v
TYPE AcceptConditionProc = PROCEDURE (VAR condition: Conditions.Condition;
                                      socket: Socket);
TYPE Interface = POINTER TO InterfaceRec;
TYPE InterfaceRec =
   RECORD
      (Objects.ObjectRec)
      open: OpenProc;
      createOpenCondition: CreateOpenConditionProc;
      testAndOpen: TestAndOpenProc;
      createSomeSocket: CreateSomeSocketProc;
      listen: ListenProc;
      release: ReleaseProc;
      accept: AcceptProc;
      acceptCondition: AcceptConditionProc;
   END;
.sp 0.7
CONST unknownNetwork = 0;
CONST corruptedInput = 1;
CONST errors = 2;
TYPE ErrorCode = SHORTINT;
.ne 6v
TYPE ErrorEvent = POINTER TO ErrorEventRec;
TYPE ErrorEventRec =
   RECORD
      (Events.EventRec)
      errorcode: ErrorCode;
   END;
VAR error: Events.EventType;
VAR errormsg: ARRAY errors OF Events.Message;
.sp 0.7
.ne 2v
PROCEDURE Register(VAR network: Network;
                   name: ARRAY OF CHAR; if: Interface);
.ne 2v
PROCEDURE GetNetwork(name: ARRAY OF CHAR; VAR network: Network;
                     VAR errors: RelatedEvents.Object) : BOOLEAN;
PROCEDURE GetName(network: Network; VAR name: ARRAY OF CHAR);
PROCEDURE GetNetworks(VAR iterator: Iterators.Iterator);
.sp 0.7
.ne 4v
PROCEDURE Open(VAR s: Streams.Stream;
               address: Address;
               bufmode: Streams.BufMode;
               errors: RelatedEvents.Object) : BOOLEAN;
PROCEDURE CreateOpenCondition(VAR condition: Conditions.Condition;
                              address: Address);
.ne 5v
PROCEDURE TestAndOpen(VAR s: Streams.Stream;
                      address: Address;
                      condition: Conditions.Condition;
                      bufmode: Streams.BufMode;
                      errors: RelatedEvents.Object) : BOOLEAN;
.sp 0.7
.ne 4v
PROCEDURE CreateSomeSocket(VAR socket: Socket;
                           network: Network;
                           VAR address: Address;
                           errors: RelatedEvents.Object) : BOOLEAN;
.ne 2v
PROCEDURE Listen(VAR socket: Socket; address: Address;
                 errors: RelatedEvents.Object) : BOOLEAN;
PROCEDURE Release(socket: Socket);
.ne 3v
PROCEDURE Accept(socket: Socket;
                 VAR s: Streams.Stream;
                 bufmode: Streams.BufMode) : BOOLEAN;
PROCEDURE CreateAcceptCondition(VAR condition: Conditions.Condition;
                                socket: Socket);
.Pe
.SH DESCRIPTION
\fINetworks\fP provides a general abstraction for bidirectional
network connections which is independent from a particular network.
Each network is supported by a module which registers its network
during its initialization time together with its module name.
Network addresses consist of a network reference (which points to
the associated module) and a network specific part which is covered
by extensions of \fIAddress\fP.
Networks and addresses are persistent objects
(see \fIPersistentObjects(3)\fP).
Sockets represent access points where other processes may plug in.
Note that one socket allows multiple connections simultaneously.
.SS "Providing a Network"
\fIRegisterNetwork\fP is to be called by modules which
exports a specific network.
The \fIname\fP of a network should be its associated module.
This assures that the name remains unique and that the associated
module may be loaded at runtime by the network name (see \fILoader(3)\fP).
The interface \fIif\fP is expected to meet following specification:
.Is
.If open "\fBVAR\fP \fIs\fP: \fIStreams.Stream\fP; \fIaddress\fP: \fIAddress\fP; \fIbufmode\fP: \fIStreams.BufMode\fP; \fIerrors\fP: \fIRelatedEvents.Object\fP" "\fBBOOLEAN\fP"
try to establish a network connection to the given address
and, if successful, open a bidirectional stream with the given
buffering mode \fIbufmode\fP for the connection.
This procedure may block the calling task (see \fITasks(3)\fP).
.If createOpenCondition "\fBVAR\fP \fIcondition\fP: \fIConditions.Condition\fP; \fIaddress\fP: \fIAddress\fP"
initiate a connection to \fIaddress\fP and return a condition
which allows to wait for the connection to be established.
Note that the condition must return \fBTRUE\fP even if a connection
cannot be set up.
.If testAndOpen "\fBVAR\fP \fIs\fP: \fIStreams.Stream\fP; \fIcondition\fP: \fIConditions.Condition\fP; \fIbufmode\fP: \fIStreams.BufMode\fP; \fIerrors\fP: \fIRelatedEvents.Object\fP" "\fBBOOLEAN\fP"
test a connection which has been initiated by \fIcreateOpenCondition\fP,
and return, if successful, a bidirectional stream with the given
buffering mode.
.If createSomeSocket "\fBVAR\fP \fIsocket\fP: \fISocket\fP; \fBVAR\fP \fIaddress\fP: \fIAddress\fP; \fIerrors\fP: \fIRelatedEvents.Object\fP" "\fBBOOLEAN\fP"
create a socket for an arbitrary address which is to be returned
in \fIaddress\fP.
.If listen "\fBVAR\fP \fIsocket\fP: \fISocket\fP; \fIaddress\fP: \fIAddress\fP; \fIerrors\fP: \fIRelatedEvents.Object\fP" "\fBBOOLEAN\fP"
create a socket for the given address.
.If release "\fIsocket\fP: \fISocket\fP"
release the socket and its associated resources.
.If accept "\fIsocket\fP: \fISocket\fP; \fBVAR\fP \fIs\fP: \fIStreams.Stream\fP; \fIbufmode\fP: \fIStreams.BufMode\fP" "\fBBOOLEAN\fP"
wait until another process plugs into the socket (by calling \fIOpen\fP)
and, if successfully, open a bidirectional stream for the connection
with the given buffering mode.
Errors are to be related to \fIsocket\fP.
The streams returned by \fIopen\fP, \fItestAndOpen\fP and \fIaccept\fP are
expected to support the messages of \fIStreamConditions(3)\fP.
.If acceptCondition "\fBVAR\fP \fIcondition\fP: \fIConditions.Condition\fP; \fIsocket\fP: \fISocket\fP"
create a condition which evaluates to \fBTRUE\fP when a
subsequent \fIaccept\fP will return immediately.
.Ef
.PP
\fIGetNetwork\fP returns the network for the given network name
which is usually the name of the supporting module.
\fIGetName\fP returns the name of the given network.
\fIGetNetworks\fP returns an iterator which allows to iterate
through all networks which are currently supported by already loaded modules.
.SS "Using a network"
\fIOpen\fP tries to establish a network connection to the
given address and returns, if successful, an opened bidirectional stream.
While \fIOpen\fP is free to block the calling task,
\fICreateOpenCondition\fP returns a condition which
returns \fBTRUE\fP either if a connection to \fIaddress\fP is
established, or if a connection cannot be set up.
\fITestAndOpen\fP allows then to check for a successful connection,
and (like \fIOpen\fP) to open a bidirectional stream (if successful).
.PP
\fIListen\fP creates a socket for the given address
which may be later used to wait for incoming connections.
\fICreateSomeSocket\fP works like \fIListen\fP but
chooses an address itself which is returned.
\fIAccept\fP waits for incoming connections for \fIsocket\fP and
opens a bidirectional stream for it.
\fICreateAcceptCondition\fP creates a condition which evaluates to
\fBTRUE\fP if a subsequent \fIAccept\fP would not block for \fIsocket\fP.
.SH DIAGNOSTICS
All procedures (except \fICreateOpenCondition\fP and
\fICreateAcceptCondition\fP) return \fBFALSE\fP
and relate their error events to \fIerrors\fP
(or to \fIsocket\fP in case of \fIAccept\fP) in error case.
Usually, the error events which are related to \fIsocket\fP
will be queued.
.PP
Additionally, following error events may be generated on
reading persistent objects of \fINetworks\fP:
.Tb unknownNetwork
.Tp unknownNetwork
The network or address references a unknown or unsupported network name.
.Tp corruptedInput
An object couldn't be read because of corrupted or badly formatted input.
.Te
.SH "SEE ALSO"
.Tb PersistentObjects(3)
.Tp InetTCP(3)
implementation that supports IPv4 TCP sockets
.Tp Loader(3)
interfaces the runtime module loader
.Tp PersistentObjects(3)
input and output of persistent objects
.Tp SMStreams(3)
implements bidirectional communication streams which are based upon
shared memory
.Tp StreamConditions(3)
conditions which allow to wait until a stream
becomes ready for input or output
.Tp UnixDomainSockets(3)
interfaces UNIX domain sockets
.Te
.\" ---------------------------------------------------------------------------
.\" $Id: Networks.3,v 1.5 2005/02/24 10:02:26 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: Networks.3,v $
.\" Revision 1.5  2005/02/24 10:02:26  borchert
.\" Internet changed to InetTCP in the references section
.\"
.\" Revision 1.4  1996/09/16 16:26:33  borchert
.\" - non-blocking open added
.\" - the address of a socket may now be determined by the system
.\"   (CreateSomeSocket)
.\" - RegisterNetwork renamed to Register
.\" - some minor typos corrected
.\"
.\" Revision 1.3  1994/07/04  07:55:20  borchert
.\" AcceptCondition renamed to CreateAcceptCondition
.\"
.\" Revision 1.2  1994/02/10  08:02:59  borchert
.\" typos fixed
.\"
.\" Revision 1.1  1994/02/01  10:53:09  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
