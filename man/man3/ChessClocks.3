.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-2004 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH ChessClocks 3 "Last change: 23 April 2004" "Release 0.5" "Ulm's Oberon System"
.SH NAME
ChessClocks \- general interface for chess clocks
.SH SYNOPSIS
.Pg
TYPE ChessClock = POINTER TO ChessClockRec;
TYPE ChessClockRec = RECORD (Services.ObjectRec) END;
TYPE Player = SHORTINT; (* player number, starting from 0 *)
.sp 0.7
TYPE StartProc = PROCEDURE (chessclock: ChessClock;
                            auth: Shards.Lid) : BOOLEAN;
TYPE StopProc = PROCEDURE (chessclock: ChessClock;
                           auth: Shards.Lid) : BOOLEAN;
TYPE SwitchProc = PROCEDURE (chessclock: ChessClock;
                             auth: Shards.Lid; player: Player) : BOOLEAN;
TYPE RunningProc = PROCEDURE (chessclock: ChessClock) : BOOLEAN;
TYPE CurrentPlayerProc = PROCEDURE (chessclock: ChessClock) : Player;
TYPE GetClockProc = PROCEDURE (chessclock: ChessClock; player: Player;
                               VAR clock: Clocks.Clock);
TYPE Interface = POINTER TO InterfaceRec;
TYPE InterfaceRec =
      RECORD
         (Objects.ObjectRec)
         start: StartProc;
         stop: StopProc;
         switch: SwitchProc;
         running: RunningProc;
         currentPlayer: CurrentPlayerProc;
         getClock: GetClockProc;
      END;
.sp 0.7
PROCEDURE Init(chessclock: ChessClock; if: Interface;
               numberOfPlayers: SHORTINT;
               timelimit: Times.Time);
.sp 0.7
PROCEDURE Start(chessclock: ChessClock; auth: Shards.Lid) : BOOLEAN;
PROCEDURE Stop(chessclock: ChessClock; auth: Shards.Lid) : BOOLEAN;
PROCEDURE Switch(chessclock: ChessClock;
                 auth: Shards.Lid; player: Player) : BOOLEAN;
.sp 0.7
PROCEDURE Running(chessclock: ChessClock) : BOOLEAN;
PROCEDURE CurrentPlayer(chessclock: ChessClock) : Player;
PROCEDURE GetClock(chessclock: ChessClock; player: Player;
                   VAR clock: Clocks.Clock);
.sp 0.7
PROCEDURE NumberOfPlayers(chessclock: ChessClock) : SHORTINT;
PROCEDURE GetTimeLimit(chessclock: ChessClock;
                       VAR timelimit: Times.Time);
PROCEDURE TimeLeft(chessclock: ChessClock; player: Player;
                   VAR time: Times.Time);
.Pe
.SH DESCRIPTION
A chess clock is a set of \fIn\fP clocks representing the total times
of \fIn\fP players playing a turn-based game.  Initially, all clocks
are set to 0. As long the game is neither terminated nor suspended,
exactly one clock is running, representing the player whose turn it is.
The chess clock has to be switched as soon as it is the next players turn.
All players share a common time limit. As soon as the time limit expires
for one of the players, the chess clock can no longer be switched to him.
The remaining players can continue the game until one player is left.
.PP
Those operations that suspend, restart, or switch the chess clock
require an authorization. All other retrieval operations can be freely
invoked. This allows a game manager to keep control over the chess
clock while permitting read-only access to all players.
.PP
Players and their corresponding clocks are enumerated from 0 to
\fIn-1\fP.  At maximum 128 players are supported.  The number of the
current player is returned by \fICurrentPlayer\fP. Note however, that
this value is -1 as long as \fISwitch\fP has not been called yet or if
the chess clock is suspended. The number of players \fIn\fP is returned
by \fINumberOfPlayers\fP.
.PP
.I Start
starts a newly created or suspended chess clock.
.I Stop
suspends the chess clock until \fIStart\fP is invoked again.
Both operations may return \fBFALSE\fP in case of authorization
failures.
.I Running
returns \fBTRUE\fP if the chess clock is running.
.I Switch
sets the current player to \fIplayer\fP. If the chess clock is
running, this causes the clock of the previous player to stop
and the clock of \fIplayer\fP to continue. If the chess clock has
not started yet or is suspended, then the clock of \fIplayer\fP
will be started as soon as the chess clock resumes. Note that
\fISwitch\fP should be invoked before \fIStart\fP is called for
the first time to indicate the beginning player. Otherwise,
the first turn is implicitly assigned to player 0.
.PP
.I GetClock
returns the individual clock of the given player.
.I TimeLeft
returns the time left for that player.
.I GetTimeLimit
returns the total time which was assigned initially to each of the
players.
.SS "Implementation interface"
.I Init
associates \fIchessclock\fP with the given interface for the
given number of players and fixed time limit which is to be
given as relative time measure. All interface procedures must
be non-\fBNIL\fP and are expected to meet following specification:
.Is "\fIchessclock\fP: \fIChessClock\fP"
.If start "; \fIauth\fP: \fIShards.Lid\fP" "\fBBOOLEAN\fP"
Start or resume the chess clock. Assume an implicit switch to
player 0 if no player has been active yet.
\fBFALSE\fP is to be returned in case of failures.
.If stop "; \fIauth\fP: \fIShards.Lid\fP" "\fBBOOLEAN\fP"
Suspend the chess clock, i.e. stop the currently running clock.
\fBFALSE\fP is to be returned in case of failures.
.If switch "; \fIauth\fP: \fIShards.Lid\fP; \fIplayer\fP: \fIPlayer\fP" "\fBBOOLEAN\fP"
Define \fIplayer\fP to be the current player.
.If running "" "\fBBOOLEAN\fP"
Return \fBTRUE\fP if the chess clock is currently running.
.If currentPlayer "" "\fIPlayer\fP"
Return -1 if the chess clock is not running. Otherwise the player
whose clock is currently running, is to be returned.
.If getClock "; \fIplayer\fP: \fIPlayer\fP; \fBVAR\fP \fIclock\fP: \fIClocks.Clock\fP"
Return the clock of the given player.
.Ef
.SH DIAGNOSTICS
.I ChessClocks
does not generate any error events.
.SH "SEE ALSO"
.Tb StandardChessClocks(3)
.Tp RemoteChessClocks(3)
``RemoteObjects'' service provider for ``ChessClocks.ChessClock''
.Tp StandardChessClocks(3)
standard implementation for chess clocks which is based upon
\fIClocks.system\fP
.Te
.\" ---------------------------------------------------------------------------
.\" $Id: ChessClocks.3,v 1.1 2004/04/23 13:42:14 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: ChessClocks.3,v $
.\" Revision 1.1  2004/04/23 13:42:14  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
