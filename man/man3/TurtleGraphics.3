.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-2004 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH TurtleGraphics 3 "Last change: 8 April 2004" "Release 0.5" "Ulm's Oberon System"
.SH NAME
TurtleGraphics \- subset of turtle graphic operations for plotters
.SH SYNOPSIS
.Pg
TYPE Graphic = POINTER TO GraphicRec;
TYPE GraphicRec = RECORD (Services.ObjectRec) END;
.sp 0.7
PROCEDURE Create(VAR graphic: Graphic; angle: REAL);
.sp 0.7
PROCEDURE EnableRoundCorners(graphic: Graphic; cornerFraction: REAL);
.sp 0.7
PROCEDURE PenDown(graphic: Graphic);
PROCEDURE PenUp(graphic: Graphic);
.sp 0.7
PROCEDURE Save(graphic: Graphic);
PROCEDURE Restore(graphic: Graphic);
.sp 0.7
PROCEDURE Left(graphic: Graphic);
PROCEDURE Right(graphic: Graphic);
PROCEDURE Forward(graphic: Graphic);
.sp 0.7
PROCEDURE ApplySymbols(graphic: Graphic; symbols: ARRAY OF CHAR);
.sp 0.7
PROCEDURE Plot(graphic: Graphic; plotter: Plotters.Plotter);
.Pe
.SH DESCRIPTION
Turtle graphics were invented for the Logo programming language which was
developed 1967 at MIT by Seymour Papert, Wallace Feurzeig, and others.
A turtle graphic maintains a state consisting of a position on a
2-dimensional plane, a direction, and a pen position. All operations
work relative to the current position and the current direction.
.LP
.I Create
creates a new turtle graphic system.
Turns (be it left oder right) operate with a fixed angle
which is to be given in degrees. Traditional turtle graphics
use an angle of 90 degrees.
.LP
.I EnableRoundCorners
requests tangential arcs to be used for the corners. The fraction
out of the range (0,0.5) specifies the part of a unit line which
may be used for it. This is, for example, helpful for Dragon curves
which would otherwise self-intersect. Round corners are not used
at branch positions (generated by \fISave\fP and \fIRestore\fP).
.LP
.I PenDown
causes future forward moves to be drawn. Initially, the pen is already down.
.I PenUp
causes following forward moves not to be drawn until
.I PenDown
is called.
.LP
.I Save
saves the current state (current position, current direction, and
pen position) for later restoral by
.IR Restore .
.I Restore
restores the previously saved state.
.I Save
and
.I Restore
can be arbitrarily nested.
.LP
.I Left
turns the current direction to the left by the angle that was
given to \fICreate\fP.
.I Right
turns the current direction to the right.
.LP
.I Forward
moves forward one unit and causes, if the pen position is down,
a line to be drawn.
.LP
.I ApplySymbols
draws a string of Lindenmayer symbols from which following are supported:
.Tb F
.Tc F
\fIPenDown\fP, \fIForward\fP
.Tc f
\fIPenUp\fP, \fIForward\fP
.Tc +
\fILeft\fP
.Tc -
\fIRight\fP
.Tc [
\fISave\fP
.Tc ]
\fIRestore\fP
.Te
.LP
All other symbols are silently ignored.
.LP
.I Plot
draws the turtle graphic \fIgraphic\fP on \fIplotter\fP with
a scale that is automatically adapted to the plot area.
.SH DIAGNOSTICS
Assertions verify that the corner fraction of \fIEnableRoundCorners\fP
is within the range (0,0.5) and that \fISave\fP and \fIRestore\fP 
are properly balanced. No error events are generated.
.SH "SEE ALSO"
.Tb Plotters(3)
.Tp Plotters(3)
general plotter interface
.Te
.sp
Przemyslaw Prusinkiewicz, Aristid Lindenmayer,
``The Algorithmic Beauty of Plants'',
Springer-Verlag
.\" ---------------------------------------------------------------------------
.\" $Id: TurtleGraphics.3,v 1.3 2004/04/08 16:37:20 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: TurtleGraphics.3,v $
.\" Revision 1.3  2004/04/08 16:37:20  borchert
.\" No parameter was given to the 2nd .Tb
.\"
.\" Revision 1.2  2004/04/08 16:35:40  borchert
.\" For some strange reason the text after the first .Te
.\" was set in italic. This is now fixed due to an inserted .LP
.\"
.\" Revision 1.1  2004/04/08 16:13:13  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
