.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-1997 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH WebObjects 3 "Last change: 24 April 1998" "Release 0.5" "Ulm's Oberon System"
.SH NAME
WebObjects \- abstraction for world wide web objects
.SH SYNOPSIS
.Pg
CONST doCache = 0; privatCache = 1; noCache = 2; noStore = 3;
CONST noTransform = 4; mustRevalidate = 5; proxyRevalidate = 6;
CONST cacheMechanisms = 7;
.sp 0.3
TYPE Object = POINTER TO ObjectRec;
TYPE ObjectRec =
   RECORD
      (Services.ObjectRec)
   END;
.sp 0.3
TYPE Handle = POINTER TO HandleRec;
TYPE HandleRec =
   RECORD
      (Disciplines.ObjectRec)
      object: Object;
      error: BOOLEAN;
   END;
.sp 0.7
TYPE CreateHandleProc = PROCEDURE (VAR handle: Handle; object: Object; 
                                   search, body: Streams.Stream;
                                   errors: RelatedEvents.Object): BOOLEAN;
TYPE GetChallengeProc = PROCEDURE (handle: Handle;
                                   VAR scheme, realm, param: ARRAY OF CHAR);
TYPE AuthenticateProc = PROCEDURE (handle: Handle;
                                   scheme, param: Streams.Stream): BOOLEAN;
TYPE GetMD5HashValueProc = PROCEDURE (handle: Handle;
                                      VAR value: OneWayHashes.Value);
TYPE GetLanguagesProc = PROCEDURE (handle: Handle; VAR languages: ARRAY OF CHAR);
TYPE GetEncodingProc = PROCEDURE (handle: Handle; VAR encoding: ARRAY OF CHAR);
TYPE GetCharsetProc = PROCEDURE (handle: Handle; VAR charset: ARRAY OF CHAR);
TYPE GetMediaTypeProc = PROCEDURE (handle: Handle; 
                                   VAR type, subtype, param: ARRAY OF CHAR);
TYPE GetUserAgentProc = PROCEDURE (handle: Handle;
                                   VAR userAgent: ARRAY OF CHAR);
TYPE GetLengthProc = PROCEDURE (handle: Handle; VAR length: LONGINT);
TYPE GetBaseProc = PROCEDURE (handle: Handle; VAR base: InetURLs.URL);
TYPE GetLocationProc = PROCEDURE (handle: Handle; VAR location: InetURLs.URL);
TYPE GetCacheMechanismProc = PROCEDURE (handle: Handle; VAR mechanism: SET);
TYPE GetEntityTagProc = PROCEDURE (handle: Handle;
                                   VAR eTag: ARRAY OF CHAR; VAR weak: BOOLEAN);
TYPE GetExpireDateProc = PROCEDURE (handle: Handle; VAR date: Times.Time);
TYPE GetLastModifiedDateProc = PROCEDURE (handle: Handle; VAR date: Times.Time);
TYPE SetRangeProc = PROCEDURE (handle: Handle;
                               begin, end: Streams.Count): BOOLEAN;
TYPE WriteBodyProc = PROCEDURE (handle: Handle; body: Streams.Stream);
.sp 0.7
TYPE Interface = POINTER TO InterfaceRec;
TYPE InterfaceRec = 
   RECORD
      (Objects.ObjectRec)
      createHandle: CreateHandleProc;
      getChallenge: GetChallengeProc;
      authenticate: AuthenticateProc;
      getMD5HashValue: GetMD5HashValueProc;
      getLanguages: GetLanguagesProc;
      getEncoding: GetEncodingProc;
      getCharset: GetCharsetProc;
      getMediaType: GetMediaTypeProc;
      getUserAgent: GetUserAgentProc;
      getLength: GetLengthProc;
      getBase: GetBaseProc;
      getLocation: GetLocationProc;
      getCacheMechanism: GetCacheMechanismProc;
      getEntityTag: GetEntityTagProc;
      getExpireDate: GetExpireDateProc;
      getLastModifiedDate: GetLastModifiedDateProc;
      setRange: SetRangeProc;
      writeBody: WriteBodyProc;
   END;
.sp 0.7
CONST createHandleCap = 0;
CONST clientAuthenicateCap = 1;
CONST getMD5HashValueCap = 2;
CONST getLanguagesCap = 3;
CONST getEncodingCap = 4;
CONST getCharsetCap = 5;
CONST getMediaTypeCap = 6;
CONST getUserAgentCap = 7;
CONST getLengthCap = 8;
CONST getBaseCap =9;
CONST getLocationCap = 10;
CONST getCacheMechanismCap = 11;
CONST getEntityTagCap = 12;
CONST getExpireDateCap = 13;
CONST getLastModifiedDateCap = 14;
CONST setRangeCap = 15;
CONST writeBodyCap = 16;
CONST allCaps = {createHandleCap .. writeBodyCap};
CONST strictCaps = {createHandleCap, writeBodyCap};
.sp 0.3
TYPE Capability = SHORTINT;
TYPE CapabilitySet = SET; (* of Capability *)
.sp 0.7
PROCEDURE Init(object: Object; if: Interface; caps: CapabilitySet);
PROCEDURE Capabilities(object: Object): CapabilitySet;
.sp 0.3
PROCEDURE CreateHandle(VAR handle: Handle; object: Object; 
                       search, body: Streams.Stream;
                       errors: RelatedEvents.Object): BOOLEAN;
.sp 0.3
PROCEDURE GetChallenge(handle: Handle;
                       VAR scheme, realm, param: ARRAY OF CHAR);
PROCEDURE Authenticate(handle: Handle;
                       scheme, param: Streams.Stream): BOOLEAN;
.sp 0.3
PROCEDURE GetMD5HashValue(handle: Handle; VAR value: OneWayHashes.Value);
PROCEDURE GetLanguages(handle: Handle; VAR languages: ARRAY OF CHAR);
PROCEDURE GetEncoding(handle: Handle; VAR encoding: ARRAY OF CHAR);
PROCEDURE GetCharset(handle: Handle; VAR charset: ARRAY OF CHAR);
PROCEDURE GetMediaType(handle: Handle; 
                       VAR type, subtype, param: ARRAY OF CHAR);
PROCEDURE GetUserAgent(handle: Handle; VAR userAgent: ARRAY OF CHAR);
PROCEDURE GetLength(handle: Handle; VAR length: LONGINT);
PROCEDURE GetBase(handle: Handle; VAR base: InetURLs.URL);
PROCEDURE GetLocation(handle: Handle; VAR location: InetURLs.URL);
PROCEDURE GetCacheMechanism(handle: Handle; VAR mechanism: SET);
PROCEDURE GetEntityTag(handle: Handle;
                       VAR eTag: ARRAY OF CHAR; VAR weak: BOOLEAN);
PROCEDURE GetExpireDate(handle: Handle; VAR date: Times.Time);
PROCEDURE GetLastModifiedDate(handle: Handle; VAR date: Times.Time);
.sp 0.3
PROCEDURE SetRange(handle: Handle; begin, end: LONGINT): BOOLEAN;
PROCEDURE WriteBody(handle: Handle; body: Streams.Stream);
.Pe
.SH DESCRIPTION
\fIWebObjects\fP defines an abstraction for objects
that may be represented as pages in the WWW.
Web objects are mainly accessed by \fIWebHandlers(3)\fP
which processes access requests that are represented by
handles in this abstraction.
Access to individual objects can be
controlled by an authentication scheme.
.SS "Providing Web Objects"
Implementations must initialize new instances of web objects using \fIInit\fP,
specifying a set of capabilities (\fIcaps\fP) and an interface (\fIif\fP)
containing interface procedures.
At least \fIcreateHandle\fP and \fIwriteBody\fP
are to be implemented. All other procedures are optional.
All interface procedures have the same semantics as their counter parts
described below.
.PP
Note that
web objects may be accessed in parallel by multiple parties,
each using its own handle.
Hence, state maintaining web objects have to take care of synchronisation.
.PP
The \fIerror\fP flag of the handle is initially set to \fBFALSE\fP and
must be set to \fBTRUE\fP by any of the interface procedures that
detects errors and generates error events which must be related
to \fIhandle\fP.
.SS "Using Web Objects"
\fICapabilities\fP returns the capabilities of \fIobject\fP.
Note that all operations may be called even if they are not
implemented (and not included in the set of capabilities).
In this case reasonable default values will be returned.
.PP
For each new access to be processed, a handle has to be created by
\fICreateHandle\fP.
Parameters may be passed via the \fIsearch\fP stream
representing the associated part in the URL
(see, for example, \fIInetHTTPURLs(3)\fP) and
as POST message via \fIbody\fP.
Both streams may be set to \fBNIL\fP indicating an empty text.
.PP
\fIGetChallenge\fP returns the \fIscheme\fP, \fIrealm\fP (without quotes) and
further parameters (\fIparam\fP) to build the challenge of a response. If you
don't need an authentication to access the data of the object, \fIscheme\fP is
empty, \fIrealm\fP and \fIparam\fP are undefined.
.PP
\fIAuthenticate\fP returns \fBTRUE\fP if the Authentication for \fIscheme\fP and
\fIparam\fP is correct. Both parameters are read from position 0.
.PP
\fIGetMD5HashValue\fP returns, if supported, a MD5 hash value of
the byte stream \fIWriteBody\fP would return.
\fIvalue\fP is set to \fBNIL\fP otherwise.
.PP
\fIGetLanguages\fP returns the language of the intended audience in
\fIlanguages\fP in conformance to RFC 1766.
An empty string represents an unrestricted audience.
.PP
\fIGetEncoding\fP returns the \fIencoding\fP (e.g. gzip, compress) of the
object. An empty string means there is no encoding.
.PP
\fIGetCharset\fP returns the \fIcharset\fP of the object. An empty value means
that the standard charset ISO 8859-1 is used.
.PP
\fIGetMediaType\fP returns the media type of the object including
the sub type and optional parameters.
Note that the media type may be empty indicating that the interpretation
of the contents is left up to the receiver of the message body.
.PP
\fIGetUserAgent\fP returns the user agent the message body is
intended for. An empty value means that the message body is open
for all user agents.
.PP
\fIGetLength\fP returns the length of the body.
Negative values may be returned if the length of the message body
cannot be computed in advance.
.PP
\fIGetBase\fP returns the \fIbase\fP (absolute URL) for relative URLs in the
body or \fBNIL\fP if undefined.
.PP
\fIGetLocation\fP returns, if defined,
the \fIlocation\fP of the resource as URL, and \fBNIL\fP otherwise.
.PP
\fIGetCacheMechanism\fP gives a recommendation how a cache should treat the
data. Mechanism is a set of \fIdoCache\fP
(the response may be cached even if it normally  wouldn't be cached),
\fIprivatCache\fP (the response must not be cached
in shared caches), \fInoCache\fP (the response must not be cached),
\fInoStore\fP
(caches should not store the data in non-volatile storage), \fInoTransform\fP
(caches are not allowed to transform the message),
\fImustRevalidate\fP (caches
must revalidate stale cache entries) and \fIproxyRevalidate\fP (shared caches,
like proxies must revalidate stale cache entries).
.PP
\fIGetEntityTag\fP provides an entity-tag to support caches.
If it is a weak tag
the parameter \fIweak\fP will be \fBTRUE\fP.
If there is no entity-tag for the
object, an empty string will be returned in \fIeTag\fP.
.PP
\fIGetExpireDate\fP returns, if defined,
a date after which a response should be considered
as stale, and \fBNIL\fP otherwise.
.PP
\fIGetLastModifiedDate\fP returns the date the resource was last modified
or \fBNIL\fP if undefined.
.PP
\fISetRange\fP limits the result of \fIWriteBody\fP to an interval starting at
position \fIbegin\fP (including) and ending with \fIend\fP (excluding).
\fISetRange\fP will return \fBFALSE\fP if it is not possible to handle ranges
with that object.
Note that \fIGetLength\fP is not affected by such a limitation.
.PP
\fIWriteBody\fP writes the object body to stream \fIbody\fP,
possibly limited by a former call of \fISetRange\fP.
.SH DIAGNOSTICS
\fIWebObjects\fP does not generate error events by itself.
Underlying implementations, however, are expected to relate their
error events to \fIhandle\fP
or to \fIerrors\fP in case of \fICreateHandle\fP
(see \fIRelatedEvents(3)\fP),
.PP
Additionally, the \fIerror\fP component of a handle is set to \fBTRUE\fP
in case of errors.
.SH "SEE ALSO"
.Tb RelatedEvents(3)
.Tp MD5(3)
MD5 check sums
.Tp RelatedEvents(3)
error handling
.Tp Streams(3)
stream operations
.Tp Times(3)
time stamps
.Tp InetURLs(3)
addresses for web objects
.Te
.SH AUTHOR
Manfred Rue\*s, University of Ulm,
.br
the revisions are due to Andreas Borchert.
.\" ---------------------------------------------------------------------------
.\" $Id: WebObjects.3,v 1.1 1998/04/24 17:47:51 borchert Exp borchert $
.\" ---------------------------------------------------------------------------
.\" $Log: WebObjects.3,v $
.\" Revision 1.1  1998/04/24  17:47:51  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
