.\" --------------------------------------
.\" Oberon System Documentation   AFB 8/90
.\" (c) University of Ulm, SAI, D-7900 Ulm
.\" --------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
.TH CrPipes 3 "Oberon System"
.SH NAME
CrPipes \- coroutine pipes
.SH SYNOPSIS
.Pg
TYPE Filter = PROCEDURE (in, out: Streams.Stream);
TYPE CrPipe = POINTER TO CrPipeRec;
TYPE CrPipeRec = RECORD (Streams.StreamRec) END;

PROCEDURE Open(VAR out, in: Streams.Stream; bufmode: Streams.BufMode);
PROCEDURE Spawn(filter: Filter; in, out: Streams.Stream);
.Pe
.SH DESCRIPTION
.I CrPipes
realizes pipelines of arbitrary length on a coroutine base.
Each coroutine is represented by a filter.
A filter is defined to be
a procedure which reads from an input stream,
does some processing, and writes to an output stream.
The streams are of type \fICrPipe\fP inside the pipeline
and may be of any stream type at the two ends of the pipeline.
.PP
.I Open
creates a pipeline with two streams (similar to \fIpipe(2)\fP).
Both streams remain unconnected until they are connected to filters by
.IR Spawn .
Input/output operations to unconnected pipeline streams are illegal.
Transfer of control mainly depends on the buffering mode of the
inner streams:
.Tb Streams.linebuf
.Tp Streams.onebuf
is useful for byte-oriented filters,
else every \fIStreams.ReadByte\fP or \fIStreams.WriteByte\fP
would cause a \fBCRSWITCH\fP-operation.
.Tp Streams.nobuf
is useful for record-oriented filters,
especially if the calculation of a record needs a long time
and not all records are needed,
e.g. backtracking algorithms
.Tp Streams.linebuf
should be taken if line oriented output to a terminal device is filtered.
.Te
.I out
is opened for writing and
.I in
for reading.
\fIStreams.Seek\fP and \fIStreams.Tell\fP are illegal for
\fICrPipe\fP streams.
.PP
.I Spawn
passes
.I in
and
.I out
to
.I filter
and starts the procedure as coroutine.
At least one of the two streams should be a pipeline stream.
Pipeline streams which are passed to
.I Spawn
are connected to
.IR filter .
Pipeline constructions must be linear:
cycles would cause deadlocks.
.PP
The pipeline starts working either by reading from the end
or by writing to the start of the pipeline.
A filter has three ways of returning/closing:
.IP (1)
calling \fIStreams.Close\fP(\fIout\fP).
If \fIout\fP is a pipe this is an operation of no return;
(2) can be used instead of (1) to be sure about returning.
.IP (2)
executing \fBRETURN\fP;
this causes
.I out
and
.I in
to be closed automatically if they are of type
.IR CrPipe .
.IP (3)
implicitly if the consumer calls \fIStreams.Close\fP.
.SH EXAMPLE
The example following causes any output written to
.I Streams.stdout
to be filtered by
.IR UpperToLower .
.Pg
PROCEDURE UpperToLower(in, out: Streams.Stream);
   CONST diff = ORD("a") - ORD("A");
   VAR ch: CHAR;
BEGIN
   WHILE Streams.ReadByte(in, ch) DO
      IF (ch >= "A") & (ch <= "Z") THEN
         ch := CHR(ORD(ch) - diff);
      END;
      IF ~Streams.WriteByte(out, ch) THEN
         RETURN
      END;
   END;
END UpperToLower;

PROCEDURE Setup;
   VAR
      out, in: Streams.Stream;
      oldstdout: Streams.Stream;
BEGIN
   CrPipes.Open(out, in, Streams.linebuf);
   oldstdout := Streams.stdout;
   Streams.stdout := out;
   CrPipes.Spawn(UpperToLower, in, oldstdout);
END Setup;
.Pe
.SH "SEE ALSO"
.Tb Coroutines(3)
.Tp Coroutines(3)
global variables \fICoroutines.current\fP and \fICoroutines.source\fP
.Tp Streams(3)
stream operations
.Te
.\" ---------------------------------------------------------------------------
.\" $Id: CrPipes.3,v 1.4 1999/04/15 08:11:49 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: CrPipes.3,v $
.\" Revision 1.4  1999/04/15  08:11:49  borchert
.\" SEE ALSO section extended, TS..TE replaced by Tb..Te
.\"
.\" Revision 1.3  1991/06/21  15:09:28  borchert
.\" example corrected
.\"
.\" Revision 1.2  91/06/19  15:54:09  borchert
.\" stream parameter types changed to Streams.Stream
.\" 
.\" Revision 1.1  90/08/31  17:02:13  borchert
.\" Initial revision
.\" 
.\" ---------------------------------------------------------------------------
