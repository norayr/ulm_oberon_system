.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-1995 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH Print 3 "Last change: 14 January 2004" "Release 0.5" "Ulm's Oberon System"
.SH NAME
Print \- formatted output to streams
.SH SYNOPSIS
.Pg
CONST tooManyArgs = 0; (* too many arguments given *)
CONST tooFewArgs = 1; (* too few arguments given *)
CONST badFormat = 2; (* syntax error in format string *)
CONST badArgumentSize = 3; (* bad size of argument *)
CONST errors = 4;
.sp 0.3
TYPE FormatString = ARRAY 128 OF CHAR;
TYPE ErrorCode = SHORTINT;
TYPE ErrorEvent = POINTER TO ErrorEventRec;
TYPE ErrorEventRec =
   RECORD
      (Events.EventRec)
      errorcode: ErrorCode;
      format: FormatString;
      errpos: LONGINT;
      nargs: INTEGER;
   END;
.sp 0.3
VAR error: Events.EventType;
VAR errormsg: ARRAY errors OF Events.Message;
.sp 0.7
PROCEDURE F(fmt: ARRAY OF CHAR);
PROCEDURE F1(fmt: ARRAY OF CHAR; p1: ARRAY OF BYTE);
PROCEDURE F2(fmt: ARRAY OF CHAR; p1, p2: ARRAY OF BYTE);
PROCEDURE F3(fmt: ARRAY OF CHAR; p1, p2, p3: ARRAY OF BYTE);
PROCEDURE F4(fmt: ARRAY OF CHAR; p1, p2, p3, p4: ARRAY OF BYTE);
PROCEDURE F5(fmt: ARRAY OF CHAR; p1, p2, p3, p4, p5: ARRAY OF BYTE);
PROCEDURE F6(fmt: ARRAY OF CHAR; p1, p2, p3, p4, p5, p6: ARRAY OF BYTE);
PROCEDURE F7(fmt: ARRAY OF CHAR; p1, p2, p3, p4, p5, p6, p7: ARRAY OF BYTE);
PROCEDURE F8(fmt: ARRAY OF CHAR;
             p1, p2, p3, p4, p5, p6, p7, p8: ARRAY OF BYTE);
PROCEDURE F9(fmt: ARRAY OF CHAR;
             p1, p2, p3, p4, p5, p6, p7, p8, p9: ARRAY OF BYTE);
.sp 0.7
PROCEDURE S(out: Streams.Stream; fmt: ARRAY OF CHAR);
PROCEDURE S1(out: Streams.Stream; fmt: ARRAY OF CHAR; p1: ARRAY OF BYTE);
PROCEDURE S2(out: Streams.Stream; fmt: ARRAY OF CHAR; p1, p2: ARRAY OF BYTE);
PROCEDURE S3(out: Streams.Stream; fmt: ARRAY OF CHAR;
             p1, p2, p3: ARRAY OF BYTE);
PROCEDURE S4(out: Streams.Stream; fmt: ARRAY OF CHAR;
             p1, p2, p3, p4: ARRAY OF BYTE);
PROCEDURE S5(out: Streams.Stream; fmt: ARRAY OF CHAR;
             p1, p2, p3, p4, p5: ARRAY OF BYTE);
PROCEDURE S6(out: Streams.Stream; fmt: ARRAY OF CHAR;
             p1, p2, p3, p4, p5, p6: ARRAY OF BYTE);
PROCEDURE S7(out: Streams.Stream; fmt: ARRAY OF CHAR;
             p1, p2, p3, p4, p5, p6, p7: ARRAY OF BYTE);
PROCEDURE S8(out: Streams.Stream; fmt: ARRAY OF CHAR;
             p1, p2, p3, p4, p5, p6, p7, p8: ARRAY OF BYTE);
PROCEDURE S9(out: Streams.Stream; fmt: ARRAY OF CHAR;
             p1, p2, p3, p4, p5, p6, p7, p8, p9: ARRAY OF BYTE);
.sp 0.7
PROCEDURE SE(out: Streams.Stream; fmt: ARRAY OF CHAR;
             errors: RelatedEvents.Object);
PROCEDURE SE1(out: Streams.Stream; fmt: ARRAY OF CHAR;    p1: ARRAY OF BYTE;
              errors: RelatedEvents.Object);
PROCEDURE SE2(out: Streams.Stream; fmt: ARRAY OF CHAR;    p1, p2: ARRAY OF BYTE;
              errors: RelatedEvents.Object);
PROCEDURE SE3(out: Streams.Stream; fmt: ARRAY OF CHAR;
              p1, p2, p3: ARRAY OF BYTE;
              errors: RelatedEvents.Object);
PROCEDURE SE4(out: Streams.Stream; fmt: ARRAY OF CHAR;
              p1, p2, p3, p4: ARRAY OF BYTE;
              errors: RelatedEvents.Object);
PROCEDURE SE5(out: Streams.Stream; fmt: ARRAY OF CHAR;
              p1, p2, p3, p4, p5: ARRAY OF BYTE;
              errors: RelatedEvents.Object);
PROCEDURE SE6(out: Streams.Stream; fmt: ARRAY OF CHAR;
              p1, p2, p3, p4, p5, p6: ARRAY OF BYTE;
              errors: RelatedEvents.Object);
PROCEDURE SE7(out: Streams.Stream; fmt: ARRAY OF CHAR;
              p1, p2, p3, p4, p5, p6, p7: ARRAY OF BYTE;
              errors: RelatedEvents.Object);
PROCEDURE SE8(out: Streams.Stream; fmt: ARRAY OF CHAR;
              p1, p2, p3, p4, p5, p6, p7, p8: ARRAY OF BYTE;
              errors: RelatedEvents.Object);
PROCEDURE SE9(out: Streams.Stream; fmt: ARRAY OF CHAR;
              p1, p2, p3, p4, p5, p6, p7, p8, p9: ARRAY OF BYTE;
              errors: RelatedEvents.Object);
.Pe
.SH DESCRIPTION
.I Print
offers formatted printing in \fIprintf(3)\fP style to \fIStreams.stdout\fP
(\fIF\fP through \fIF9\fP) or to
.I out
(\fIS\fP through \fIS9\fP and \fISE\fP through \fISE9\fP).
The procedures convert their parameters
(the number of parameters determines the procedure name)
and instantiate them into the format string
.IR fmt .
.PP
The format string is interpreted as follows:
Any character not belonging to
an escape sequence introduced by
.B \e
or a format element
introduced by
.B %
is simply appended
to
.I Streams.stdout
resp. \fIout\fP.
Escape sequences are substituted by a single character
while format elements are instantiated
by the next \fIp\fP? parameter.
.PP
Format elements must conform to the following syntax:
.Pg
FormatElement = "%" {Flags} [Width] [Scale] Conversion .
Flags = "+" | "0" | "-" | "^" | "\e" FillChar .
Width = Number | "*" .
Scale = "." Number .
Number = { DecDigits } .
DecDigits = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" .
Conversion = "b" | "c" | "d" | "e" | "f" | "g" | "j" | "o" | "s" | "x" | "y" .
.Pe
.LP
Each format element defines a field in the output stream
that is by default as wide as necessary to insert the
result of a parameter conversion.
The field width can be expanded
by specifying
.IR Width .
If not given as an explicit
.I Number
but as
.B \*(St
.I Print
uses
the value of the next yet unused parameter
(interpreted as an integer)
as width indication.
Values less or equal than the defaults have no effect.
In all other cases
the output field is filled up by leading blanks.
Padding character and alignment strategy may be altered by use of
.IR Flags :
.LP
.cC +
Any numeric output will be signed (by default positive
values do not get a
.BR + sign).
.cC \(em
The output will be left aligned within its field.
This option has no effect if
.I width
is omitted.
.cC 0
The output of numeric values is padded with leading zeroes
.RB ( 0 ).
This option implies
.B \(em
and
.BR ^ .
.cC ^
The padding characters are inserted before
the leading sign and the first digit of a number.
.cC "\e\fIFillChar\fP"
requires
.I FillChar
to become the padding character.
.LP
Other numeric output is not affected
while strings are cut to the length given by
.I Scale
before they are aligned within their output fields.
.I Print
will use the next yet unused parameter as
.I scale
indication if
.B \*(St
is specified.
.LP
Since
.I Print
has no idea about the actual types
of the arguments
corresponding to
its formal parameters,
.I convchar
is used to determine the conversions
to be executed for the next yet unused parameter.
.I Print
will not accept any other conversion character
than those listed and described below.
In detail the
specifications of
.I convchar
have the following effect:
.cC x
Hexadecimal
output of an integer.
.cC o
Octal
output of an integer.
.cC d
Decimal output
of an integer.
.cC f
Output of a real number
in floating point notation.
The scale, if given, fixes the
number of digits following the decimal point.
However, the first non-zero digit is printed
regardless of the scale.
.cC e
Output of a real number
in its normalized exponential form.
The scale, if given, fixes the number of digits
following the decimal point.
.cC g
Output of a real number in floating point or exponential notation.
The selection depends on the exponent and the scale: If the exponent is
greater or equal to -4 and less or equal to the scale, the floating point
notation is chosen.  The scale specifies also the number of significant
digits to be shown. If no explicit scale is given, a default value of
6 is taken.  Trailing zeroes are suppressed.
.cC c
Output of a single
.BR CHAR .
.cC s
Output of an \fBARRAY OF CHAR\fP
until the first
null byte (\fB0X\fP)
or the high bound of the array is reached.
.cC b
Output of a
.B BOOLEAN
as text "TRUE" or "FALSE".
.cC y
Output of a
.B BOOLEAN
as text "yes" or "no".
.cC j
Output of a
.B BOOLEAN
as text "ja" or "nein".
.LP
Note that
.BR o ,
.BR x ,
and
.B d
are legal conversion characters
to output any type
which has the
same size (in bytes)
as the expected one.
This feature can be used
to output an address (integer size presumed).
Furthermore these conversion characters may be used
to output the ascii-value of a
.BR CHAR .
Vice versa
.B c
may be used to output a character
that is specified by a
.BR SHORTINT -value.
.LP
.B %%
is not interpreted as
a format element. A single percent character is output instead.
.PP
Any appearance of the following escape sequences in format string
.I fmt
is substituted as listed:
.IP \f3\en\fP
newline (line terminator as defined by \fIStreamDisciplines\fP)
.IP \f3\er\fP
carriage return (0DX)
.IP \f3\et\fP
horizontal tab (09X)
.IP \f3\ee\fP
escape (1BX)
.IP \f3\ef\fP
form feed (0CX)
.IP \f3\eb\fP
backspace (08X)
.IP \f3\e&\fP
bell (07X)
.IP \f3\eQ\fP
double quote (22X)
.IP \f3\eq\fP
quote("'")
.IP \f3\e\e\fP
backslash ("\e")
.IP \f3\e\fP[\f30\fP-\f39\fP\f3A\fP-\f3F\fP]+
character specified by [\fB0\fP-\fB9A\fP-\fBF\fP]+\fBX\fP.
.SH DIAGNOSTICS
The \fIcount\fP component of the output streams equals the
number of bytes written.
.PP
Some calling errors lead to events which are passed
to \fIEvents\fP (if no \fIerrors\fP parameter is given)
or to \fIRelatedEvents\fP (by use of \fISE\fP through \fISE9\fP).
Following error codes are implemented:
.Tb badArgumentSize
.Tp tooManyArgs
The format string references less arguments than given.
.Tp tooFewArgs
The format strings references more arguments than given.
.Tp badFormat
The format string does not follow the above specification.
.Tp badArgumentSize
One of the arguments has a size which does not comply
to the argument specification in the format string
(e.g. passing a \fBREAL\fP value for \fB%d\fP).
.Te
.SH "SEE ALSO"
.Tb StreamDisciplines(3)
.Tp Events(3)
error handling
.Tp RelatedEvents(3)
error handling for \fISE\fP through \fISE9\fP
.Tp Scan(3)
format driven input scanning
.Tp StreamDisciplines(3)
definition of line terminator
.Tp Streams(3)
stream operations
.Tp Write(3)
portable module for formatted output to streams
.Te
.SH BUGS
.I Print
has been written prior to revised Oberon.
Revised Oberon requires type identity for actual parameters to be passed to
value parameters of type \fBARRAY OF BYTE\fP.
This restriction has not yet been implemented by Ulm's Oberon compiler
but modules which use
.I Print
with parameters which cannot be passed to \fBVAR\fP-parameters
are not portable to compilers which are conform to revised Oberon.
This restricts the main purpose of this module to
debugging output which vanishes in the production version.
.\" ---------------------------------------------------------------------------
.\" $Id: Print.3,v 1.7 2004/01/14 16:57:55 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: Print.3,v $
.\" Revision 1.7  2004/01/14 16:57:55  borchert
.\" specification of scale for floating point formats corrected and clarified
.\"
.\" Revision 1.6  1996/09/16  16:50:40  borchert
.\" formatting changed
.\"
.\" Revision 1.5  1993/01/29  11:22:03  borchert
.\" new error handling
.\"
.\" Revision 1.4  1991/11/18  08:12:48  borchert
.\" Print depends now from StreamDisciplines
.\"
.\" Revision 1.3  1991/06/21  15:21:01  borchert
.\" .R request removed
.\"
.\" Revision 1.2  91/06/19  16:09:35  borchert
.\" Stream = Streams.Stream removed
.\" 
.\" Revision 1.1  90/08/31  17:02:16  borchert
.\" Initial revision
.\" 
.\" ---------------------------------------------------------------------------
