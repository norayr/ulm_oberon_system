.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-2006 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH IPv6TCPSockets 3 "Last change: 9 August 2006" "Release 0.5" "Ulm's Oberon System"
.SH NAME
IPv6TCPSockets \- create and access IPv6 TCP sockets
.SH SYNOPSIS
.Pg
TYPE Socket = UnixSockets.Socket;
TYPE Address = IPv6Addresses.Address;
TYPE SocketAddress = IPv6Addresses.SocketAddress;
.sp 0.7
CONST openFailed = 0;
CONST listenFailed = 1;
CONST errors = 2;
.sp 0.3
TYPE ErrorCode = SHORTINT; (* openFailed .. *)
TYPE ErrorEvent = POINTER TO ErrorEventRec;
TYPE ErrorEventRec =
      RECORD
         (Events.EventRec)
         address: SocketAddress;
         errorcode: ErrorCode;
      END;
.sp 0.3
VAR error: Events.EventType;
VAR errormsg: ARRAY errors OF Events.Message;
.sp 0.7
PROCEDURE Open(VAR s: Streams.Stream; address: SocketAddress;
               bufmode: Streams.BufMode;
               errors: RelatedEvents.Object) : BOOLEAN;
PROCEDURE OpenAs(VAR s: Streams.Stream; address, bindto: SocketAddress;
                 bufmode: Streams.BufMode;
                 errors: RelatedEvents.Object) : BOOLEAN;
.sp 0.7
PROCEDURE CreateOpenCondition(VAR condition: Conditions.Condition;
                              address: SocketAddress);
PROCEDURE CreateOpenConditionAs(VAR condition: Conditions.Condition;
                                address, bindto: SocketAddress);
PROCEDURE TestAndOpen(VAR s: Streams.Stream;
                      condition: Conditions.Condition;
                      bufmode: Streams.BufMode;
                      errors: RelatedEvents.Object) : BOOLEAN;
PROCEDURE Drop(condition: Conditions.Condition);
.sp 0.7
PROCEDURE CreateSomeSocket(VAR socket: Socket;
                           VAR address: SocketAddress;
                           errors: RelatedEvents.Object) : BOOLEAN;
PROCEDURE CreateSomeSocketOn(VAR socket: Socket;
                             VAR address: SocketAddress;
                             errors: RelatedEvents.Object) : BOOLEAN;
PROCEDURE Listen(VAR socket: Socket; portnum: INTEGER;
                 errors: RelatedEvents.Object) : BOOLEAN;
PROCEDURE ListenOn(VAR socket: Socket; address: SocketAddress;
                   errors: RelatedEvents.Object) : BOOLEAN;
PROCEDURE Accept(socket: Socket;
                 VAR s: Streams.Stream; bufmode: Streams.BufMode;
                 VAR peer: SocketAddress) : BOOLEAN;
PROCEDURE Release(socket: Socket);
.sp 0.7
PROCEDURE CreateAcceptCondition(VAR condition: Conditions.Condition;
                                socket: Socket);
.sp 0.7
PROCEDURE GetName(socket: Socket; VAR address: SocketAddress;
                  errors: RelatedEvents.Object) : BOOLEAN;
.Pe
.SH DESCRIPTION
.I IPv6TCPSockets
provides a stream interface for IPv6 TCP domain sockets.
\fIInet6TCP(3)\fP bases on \fIIPv6TCPSockets\fP and provides
an interface which conforms to \fINetworks(3)\fP.
\fIIPv6TCPSockets\fP itself uses the generic stream
interface for sockets of \fIUnixSockets(3)\fP.
.LP
.I Open
tries to create a socket which is connected to the
given IPv6 address.
IPv6 addresses consist of a 16-byte address
which identifies the host and a 2-byte integer which
identifies the communication partner on that machine.
.LP
.I OpenAs
works like \fIOpen\fP but allows in \fIbindto\fP a
local IP address to be specified the socket is to be
bound to locally. This is useful in case of virtual IP addresses.
.LP
.I CreateOpenCondition
and
.I TestAndOpen
may be used like their counterparts of \fINetworks(3)\fP
for non-blocking openings.
.I CreateOpenConditionAs
works like
.I CreateOpenCondition
but allows in \fIbindto\fP a local IP address to be specified
(see \fIOpenAs\fP).
.I Drop
may be used to get rid of conditions created
by \fICreateOpenCondition\fP or \fICreateOpenConditionAs\fP
which have not yet been successfully opened using \fITestAndOpen\fP.
.LP
.I Listen
creates a socket which may be later used to wait for
incoming connections.
Each socket is uniquely identified by a port number on
the current machine.
.I ListenOn
works like \fIListen\fP but allows a full IPv6 address to
specified (mainly for virtual IP addresses).
.LP
.I CreateSomeSocket
and
.I CreateSomeSocketOn
operate like \fIListen\fP and \fIListenOn\fP
but leave the selection of the port number up to the system.
Note that \fIaddress\fP is an out-parameter only for
\fICreateSomeSocket\fP while \fICreateSomeSocketOn\fP
honors the host part of \fIaddress\fP.
.I Release
allows to release a socket which has been formerly created
by \fIListen\fP.
.I Accept
waits for incoming connections for \fIsocket\fP.
The socket must have been created and prepared by \fIListen\fP,
\fIListenOn\fP, \fICreateSomeSocket\fP, or \fICreateSomeSocketOn\fP.
The resulting stream \fIs\fP is connected with the
new communication partner.
The address of the other side is stored into \fIpeer\fP.
.LP
.I CreateAcceptCondition
creates a condition which evaluates to \fBTRUE\fP
if a subsequent \fIAccept\fP would not block for \fIsocket\fP.
.LP
.I GetName
returns the address of a socket.
This is particularly useful when a port number of \fB0\fP
has been given to \fIListen\fP in order to delegate the choice to the system.
.SH DIAGNOSTICS
All procedures return
.B FALSE
and relate their error events to \fIerrors\fP in case of errors.
.LP
Errors are converted into events of \fIRelatedEvents\fP.
\fIAccept\fP relates its errors to \fIsocket\fP.
By default, these events are being queued.
.SH "SEE ALSO"
.Tb PersistentObjects(3)
.Tp Conditions(3)
interface for conditions
.Tp Inet6TCP(3)
offers IPv6 TCP domain sockets for \fINetworks(3)\fP
.Tp IPv6Addresses(3)
support of IPv6 addresses
.Tp Networks(3)
general abstraction for network connections
.Tp RelatedEvents(3)
handling of error events
.Tp InetResolver(3)
conversion of domain style addresses to IPv6 addresses
.Tp Streams(3)
stream operations
.Tp UnixSockets(3)
generic stream interface of sockets
.Te
.\" ---------------------------------------------------------------------------
.\" $Id: IPv6TCPSockets.3,v 1.1 2006/08/09 15:58:14 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: IPv6TCPSockets.3,v $
.\" Revision 1.1  2006/08/09 15:58:14  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
