.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-2004 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH CompilerDatabases 3 "Last change: 3 June 2004" "Release 0.5" "Ulm's Oberon System"
.SH NAME
CompilerDatabases \- general interface for the retrieval and storage of program text sources and results of compilation runs
.SH SYNOPSIS
.Pg
TYPE Database = POINTER TO DatabaseRec;
TYPE DatabaseRec = RECORD (Services.ObjectRec) END;
.sp 0.7
TYPE LookupProc = PROCEDURE (
         db: Database;
         modname: ConstStrings.String;
         type: CompilerObjects.ObjectType;
         arch: Architectures.Architecture;
         keys: CompilerKeys.Set;
         VAR header: CompilerObjects.Header;
         VAR text: PersistentTexts.Text;
         errors: RelatedEvents.Object) : BOOLEAN;
TYPE LookupHeaderProc = PROCEDURE (
         db: Database;
         modname: ConstStrings.String;
         type: CompilerObjects.ObjectType;
         arch: Architectures.Architecture;
         keys: CompilerKeys.Set;
         VAR header: CompilerObjects.Header;
         errors: RelatedEvents.Object) : BOOLEAN;
TYPE StoreProc = PROCEDURE (
         db: Database;
         header: CompilerObjects.Header;
         text: PersistentTexts.Text;
         errors: RelatedEvents.Object) : BOOLEAN;
TYPE LookupSrcProc = PROCEDURE (
         db: Database;
         modname: ConstStrings.String;
         kind: CompilerSources.SourceKind;
         VAR src: CompilerSources.Source;
         errors: RelatedEvents.Object) : BOOLEAN;
TYPE StoreSrcProc = PROCEDURE (
         db: Database;
         src: CompilerSources.Source;
         errors: RelatedEvents.Object) : BOOLEAN;
.sp 0.3
TYPE Interface = POINTER TO InterfaceRec;
TYPE InterfaceRec =
   RECORD
      (Objects.ObjectRec)
      lookup: LookupProc;
      lookupHeader: LookupHeaderProc;
      store: StoreProc;
      lookupSrc: LookupSrcProc;
      storeSrc: StoreSrcProc;
   END;
.sp 0.7
PROCEDURE Init(db: Database; if: Interface);
.sp 0.7
PROCEDURE LookupSrc(db: Database; modname: ConstStrings.String;
                    kind: CompilerSources.SourceKind;
                    VAR src: CompilerSources.Source;
                    errors: RelatedEvents.Object) : BOOLEAN;

PROCEDURE StoreSrc(db: Database; src: CompilerSources.Source;
                   errors: RelatedEvents.Object) : BOOLEAN;
.sp 0.7
PROCEDURE Lookup(db: Database; modname: ConstStrings.String;
                 type: CompilerObjects.ObjectType;
                 arch: Architectures.Architecture;
                 keys: CompilerKeys.Set;
                 VAR header: CompilerObjects.Header;
                 VAR text: PersistentTexts.Text;
                 errors: RelatedEvents.Object) : BOOLEAN;
PROCEDURE LookupHeader(db: Database; modname: ConstStrings.String;
                       type: CompilerObjects.ObjectType;
                       arch: Architectures.Architecture;
                       keys: CompilerKeys.Set;
                       VAR header: CompilerObjects.Header;
                       errors: RelatedEvents.Object) : BOOLEAN;

PROCEDURE Store(db: Database; header: CompilerObjects.Header;
                text: PersistentTexts.Text;
                errors: RelatedEvents.Object) : BOOLEAN;
.Pe
.SH DESCRIPTION
.I CompilerDatabases
provides a general interface for databases that allow to
store and to retrieve program sources and the results
of compilation runs.
.PP
This interface does not provide authorization parameters for the
retrieval and the storage of database objects. Instead, implementations
like \fICDB(3)\fP accept these parameters through their constructors
and use them internally subsequently.  Consequently, this interface
should not be supported for \fIRemoteObjects(3)\fP.  Access to remote
databases should be supported on lower abstraction levels as it is has
been implemented by \fICDBNames(3)\fP and \fIRemoteCDBNames(3)\fP.
.PP
Only insertion and retrieval are supported. Database objects cannot
be deleted through this interface. Instead, implementations are free
to garbage collect objects following their criterias or to support
delete operations through other channels (e.g. through the \fINames(3)\fP
interface). This interface provides just the view to a compiler
database that is needed by compilers and their associated tools.
Hence only the retrieval of the most current sources and compilation
results that fulfil the given criterias are supported. There are no
iterators that allow to examine the entire database.
.PP
Two types of objects are supported: source objects and objects
that represent the result of a compilation run.
.PP
Sources are persistent objects of type \fICompilerSources.Source\fP
that provide a \fIStreams(3)\fP access to the program text and
meta informations including a module name, source type, a time stamp,
and the compilation parameters. New sources can be uploaded to
the database using \fIStoreSrc\fP. Retrieval of the most current
source of a module is possible using \fILookupSrc\fP.
.PP
Results of compilation runs are represented by two objects:
a header object of type \fICompilerObjects.Header\fP
that contains all meta informations and
an object of type \fICompilerObjects.Object\fP that is enclosed
by a \fIPersistentTexts.Text\fP object.
.PP
This interface supports a two-phase compilation architecture where
the first pass creates architecture-independent results and a
second pass delivers architecture-dependent code together with
all informations that are required to link it to an executable
or to load it dynamically. On retrievals, \fBNIL\fP may be
passed to \fIarch\fP to select the architecture-independent result.
Otherwise, if \fIarch\fP is non-\fBNIL\fP, the architecture of
the result, if any, is guaranteed to match \fIarch\fP according
to \fIArchitectures.Compatible\fP. In addition, compilation
results returned, if any, conform to the set of compilation keys
given through \fIkeys\fP.
.PP
.I LookupHeader
returns on success just the header while the result of
.I Lookup
includes the entire (possibly huge) compilation result.
.PP
.I StoreSrc
and
.I Store
allow to insert source and compilation result objects into the
database.
.PP
The interface that is passed to \fIInit\fP is expected to follow
the semantics of the client procedures described above.
.SH DIAGNOSTICS
All procedures return \fBFALSE\fP in case of failures and
relate associated error events to \fIerrors\fP.
.SH "SEE ALSO"
.Tb PersistentTexts(3)
.Tp CDB(3)
standard implementation of this interface
.Tp CompilerObjects(3)
general base type of persistent compiler objects
.Tp CompilerSources(3)
persistent source texts and related meta information
.Tp PersistentTexts(3)
enclosure of persistent objects
.Te
.\" ---------------------------------------------------------------------------
.\" $Id: CompilerDatabases.3,v 1.1 2004/06/03 10:02:58 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: CompilerDatabases.3,v $
.\" Revision 1.1  2004/06/03 10:02:58  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
