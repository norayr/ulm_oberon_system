.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-1995 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH UnixDomainSockets 3 "Last change: 10 July 2003" "Release 0.5" "Ulm's Oberon System"
.SH NAME
UnixDomainSockets \- create and access \s-2UNIX\s0 domain sockets
.SH SYNOPSIS
.Pg
TYPE Socket = POINTER TO SocketRec;
TYPE SocketRec = RECORD (UnixSockets.SocketRec) END;
.sp 0.7
PROCEDURE Open(VAR s: Streams.Stream; pathname: ARRAY OF CHAR;
               bufmode: Streams.BufMode;
               errors: RelatedEvents.Object) : BOOLEAN;
PROCEDURE CreateOpenCondition(VAR condition: Conditions.Condition;
                              pathname: ARRAY OF CHAR);
PROCEDURE TestAndOpen(VAR s: Streams.Stream;
                      condition: Conditions.Condition;
                      bufmode: Streams.BufMode;
                      errors: RelatedEvents.Object) : BOOLEAN;
.sp 0.7
PROCEDURE CreateSomeSocket(VAR socket: Socket;
                           VAR pathname: ARRAY OF CHAR;
                           errors: RelatedEvents.Object) : BOOLEAN;
PROCEDURE Listen(VAR socket: Socket; pathname: ARRAY OF CHAR;
                 errors: RelatedEvents.Object) : BOOLEAN;
PROCEDURE Remove(socket: Socket) : BOOLEAN;
.sp 0.7
PROCEDURE Accept(socket: Socket;
                 VAR s: Streams.Stream; bufmode: Streams.BufMode) : BOOLEAN;
PROCEDURE CreateAcceptCondition(VAR condition: Conditions.Condition;
                                socket: Socket);
.sp 0.7
PROCEDURE CreateAddress(VAR address: Networks.Address; path: ARRAY OF CHAR);
PROCEDURE ConvertAddress(address: Networks.Address; VAR path: ARRAY OF CHAR);
PROCEDURE SetAddress(address: Networks.Address; path: ARRAY OF CHAR);
.Pe
.SH DESCRIPTION
.I UnixDomainSockets
supports \fIStreams(3)\fP and \fINetworks(3)\fP
for \s-2UNIX\s0 domain sockets.
\s-2UNIX\s0 domain addresses are pathnames.
Two independent processes on the same machine can communicate
by specifying the same pathname (comparable to named pipes).
.LP
.I Open
tries to connect to an already created socket which is associated
to \fIpathname\fP.
.I CreateOpenCondition
and
.I TestAndOpen
my be used like their counterparts of \fINetworks(3)\fP
for non-blocking openings.
.LP
.I Listen
creates a socket which may be later used to wait for
incoming connections.
\fIListen\fP creates \fIpathname\fP as a special entry in the file system
of type \fISysStat.socket\fP.
.I CreateSomeSocket
works like \fIListen\fP but selects an unique pathname
(which is returned by \fIUnixTmpNames(3)\fP).
.LP
.I Remove
removes the pathname which is associated with \fIsocket\fP.
\fIUnixDomainSockets\fP removes all sockets on termination
(see \fIProcess(3)\fP).
.LP
.I Accept
waits for incoming connections for \fIsocket\fP.
The socket must have been created and prepared by \fIListen\fP
or \fICreateSomeSocket\fP.
The resulting stream \fIs\fP is connected with the
new communication partner.
.LP
.I AcceptCondition
creates a condition which evaluates to \fBTRUE\fP
if a subsequent \fIAccept\fP would not block for \fIsocket\fP.
.LP
.I UnixDomainSockets
supports the interface of \fINetworks(3)\fP:
\fICreateAddress\fP takes a path name and
converts it into a newly created general network address.
\fIConvertAddress\fP allows the reverse conversion but requires
\fIaddress\fP to be returned earlier by \fICreateAddress\fP.
\fISetAddress\fP allows to change a network address.
Again, \fIaddress\fP must originate from \fIUnixDomainSockets\fP.
General network addresses are persistent objects which
allow the interface of \fINetworks(3)\fP to be used which
is independent from a particular network implementation.
.SH DIAGNOSTICS
All procedures return
.B FALSE
and relate their error events to \fIerrors\fP in error case.
.LP
Errors are converted into events of \fIRelatedEvents\fP.
\fIAccept\fP relates its errors to \fIsocket\fP.
By default, these events are being queued.
.LP
Passing an invalid general network address
(i.e. an address which does not originate from \fIUnixDomainSockets\fP)
to \fIConvertAddress\fP or
\fISetAddress\fP causes a type guard to fail.
.SH "SEE ALSO"
.Tb PersistentObjects(3)
.Tp unix(4F)
\s-2UNIX\s0 domain protocol family
.Tp Conditions(3)
interface for conditions
.Tp Networks(3)
general abstraction for network connections
.Tp PersistentObjects(3)
input and output of persistent objects
.Tp RelatedEvents(3)
handling of error events
.Tp Streams(3)
stream operations
.Tp UnixSockets(3)
generic stream interface for sockets
.Te
.SH BUGS
Path names are limited to 108 characters
due to a limit of the operating system.
Longer path names are truncated silently.
.\" ---------------------------------------------------------------------------
.\" $Id: UnixDomainSockets.3,v 1.5 2003/07/10 09:28:15 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: UnixDomainSockets.3,v $
.\" Revision 1.5  2003/07/10 09:28:15  borchert
.\" typo fixed
.\"
.\" Revision 1.4  1996/09/16 15:48:19  borchert
.\" - UnixDomainSockets shares now some common operations with
.\"   Internet in UnixSockets
.\" - non-blocking open is now supported
.\" - minor typos corrected
.\"
.\" Revision 1.3  1994/02/03  09:43:54  borchert
.\" support of Networks added
.\"
.\" Revision 1.2  1992/03/17  07:36:28  borchert
.\" errors-parameters rearranged
.\"
.\" Revision 1.1  1992/01/19  14:45:36  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
