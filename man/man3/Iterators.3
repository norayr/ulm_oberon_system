.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-2005 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH Iterators 3 "Last change: 25 August 2005" "Release 0.5" "Ulm's Oberon System"
.SH NAME
Iterators \- sequential access of data structures
.SH SYNOPSIS
.Pg
TYPE Reference = Objects.Object; Mode = SHORTINT;
TYPE Iterator = POINTER TO IteratorRec;
TYPE IteratorRec = RECORD (Services.ObjectRec) END;
TYPE IteratorProc = PROCEDURE (it: Iterator; ref: Reference; mode: Mode);
.sp 0.7
PROCEDURE Create(VAR it: Iterator; itproc: IteratorProc;
                 ref: Reference; mode: Mode);
.sp 0.3
PROCEDURE CreateQuickIterator(VAR it: Iterator;
                              itproc: IteratorProc;
                              ref: Reference; mode: Mode);
.sp 0.7
PROCEDURE Yield(it: Iterator; object: Objects.Object);
.sp 0.3
PROCEDURE Get(it: Iterator; VAR object: Objects.Object) : BOOLEAN;
.Pe
.SH DESCRIPTION
.I Iterators
offers a convenient interface for iterators and is based on coroutines.
An iterator allows to access a complex data structure sequentially
object for object.
Once an iterator has been created, there is only one pass through
all objects. I.e. it is not possible to rewind an iterator.
.PP
Two parties belong to an iterator: a producer and a consumer.
The producer examines all objects of a data structure and ``produces''
them by \fIYield\fP.
The consumer retrieves these objects by \fIGet\fP.
The consumer is free to ``consume'' all objects
(i.e. until \fIGet\fP returns \fBFALSE\fP)
or to stop calling \fIGet\fP at any time.
For this reason, the producer cannot be sure to be continued
after calling \fIYield\fP.
.PP
\fICreate\fP creates an iterator and is usually called by
the module which owns the data structure which is to be visited.
\fIitproc\fP is a procedure which will be called by a newly
created coroutine.
In contrast to ordinary coroutine procedures,
\fIitproc\fP is free to execute
\fBRETURN\fP which causes a subsequent \fIGet\fP to return \fBFALSE\fP.
\fIref\fP and \fImode\fP will be passed to \fIitproc\fP and
not interpreted by \fIIterators\fP.
\fIref\fP is intended to be a reference to the data structure and
\fImode\fP may be convenient to specify directions or keys.
.PP
Alternatively, an iterator can be created using
.I CreateQuickIterator
that does not cause a coroutine to be created.
Instead, the first invocation of \fIGet\fP causes all available
objects to be generated. This is useful for small sequences or
in cases where no significant computational overhead is required
in generating the objects.
.SH EXAMPLE
A binary tree is given on the producer side.
\fIIterateTree\fP would remain private while \fICreateIterator\fP
may be exported.
.Pg
(* excerpt of module Trees *)

CONST
   preorder = 0; inorder = 1; postorder = 2;
TYPE
   Tree = POINTER TO TreeRec;
   TreeRec =
      RECORD
         (Objects.ObjectRec)
         object: Objects.Object;
         left, right: Tree;
      END;

PROCEDURE IterateTree(it: Iterators.Iterator;
                      ref: Objects.Object;
                      mode: SHORTINT);
BEGIN
   IF ref = NIL THEN RETURN END;
   WITH ref: Tree DO
      IF mode = preorder THEN
         Iterators.Yield(it, ref.object);
      END;
      IterateTree(it, ref.left, mode);
      IF mode = inorder THEN
         Iterators.Yield(it, ref.object);
      END;
      IterateTree(it, ref.right, mode);
      IF mode = postorder THEN
         Iterators.Yield(it, ref.object);
      END;
   END;
END IterateTree;

PROCEDURE CreateIterator(VAR it: Iterator; tree: Tree; order: SHORTINT);
BEGIN
   Iterators.Create(it, IterateTree, tree, order);
END CreateIterator;
.Pe
.PP
A consumer is easily written. After creating an
iterator by \fITrees.CreateIterator\fP, a tree may be examined
by \fIIterators.Get\fP:
.Pg
   VAR
      iterator: Iterators.Iterator;
      tree: Trees.Tree;
      object: Objects.Object;

(* ... *)

Trees.CreateIterator(iterator, tree, Trees.inorder);
WHILE Iterators.Get(iterator, object) DO
   (* examine object *)
END;
.Pe
.SH "SEE ALSO"
.Tb RemoteIterators(3)
.Tp RemoteIterators(3)
supports import and export of iterators
.Te
.\" ---------------------------------------------------------------------------
.\" $Id: Iterators.3,v 1.3 2005/08/25 13:32:29 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: Iterators.3,v $
.\" Revision 1.3  2005/08/25 13:32:29  borchert
.\" CreateQuickIterator added
.\"
.\" Revision 1.2  1996/09/16 16:20:09  borchert
.\" base type changed from Disciplines.Object to Services.Object
.\"
.\" Revision 1.1  1994/02/03  11:04:46  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
