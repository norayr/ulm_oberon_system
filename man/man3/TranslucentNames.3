.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-2004 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH TranslucentNames 3 "Last change: 20 September 2004" "Release 0.5" "Ulm's Oberon System"
.SH NAME
TranslucentNames \- translucent layering of name hierarchies
.SH SYNOPSIS
.Pg
CONST mergesort = 0;
CONST unsorted = 1;
TYPE DirMode = SHORTINT; (* mergesort or unsorted *)
.sp 0.7
PROCEDURE Create(VAR node: Names.Node;
                 readonly, writable: Names.Node;
                 rauth, wauth: Shards.Lid;
                 status: Names.Status;
                 dirmode: DirMode);
.sp 0.7
PROCEDURE CreateFactory(VAR factory: NodeFactories.Factory;
                        readonly, writable: ARRAY OF CHAR;
                        rauth, wauth: Shards.Lid;
                        status: Names.Status;
                        dirmode: DirMode);
.Pe
.SH DESCRIPTION
.I TranslucentNames
allows to combine two name hierarchies into a new hierarchy where
.IP \(bu
all nodes of the second hierarchy are to be seen,
.IP \(bu
all nodes of the first hierarchy can be seen as long
as they are not in conflict to those of the second hierarchy, and
.IP \(bu
all modifying \fINames(3)\fP operations on nodes with the domain
capability are effective in the second hierarchy only.  (If this requires
the creation of paths that were so far visible in the first hierarchy
only, they are recreated in the second hierarchy).
.PP
In other words: We are operating on the second hierarchy but the
first hierarchy is seen through the second hierarchy as long it is
not covered by existing entries of the second hierarchy.
.PP
Whenever a node of the translucent system is asked for a list
of members (\fINames.GetMembers\fP) a list of names is returned
which consists of entries of the second hierarchy and, as long as
their names are not present in the second hierarchy, of entries of
the first hierarchy. The order in which these names are presented
depends on the selected \fIdirmode\fP:
.Tb mergesort
.Tp mergesort
Assume that both hierarchies return alphabetically sorted member lists.
Then this directory mode causes the translucent hierarchy to return
sorted member lists as well. Note, however, that if this assumption
does not hold, the same name can be returned twice in a member listing.
.Tp unsorted
Do not assume the hierarchies to be sorted and do not generate a
sorted member list either. Instead, the members of the second
hierarchy are returned in their original order, followed by the members
of the first hierarchy whose names are not present in the second
hierarchy, again in their original order.
.Te
.PP
.I TranslucentNames
supports the proxy framework of \fIProxies(3)\fP and uses the directory
nodes of the second hierarchy as heirs for the creation of translucent
directory nodes. This means that if a directory node of the second
hierarchy is of an extended type of \fINames.Node\fP that is supported
by \fIProxies(3)\fP, the corresponding node of the translucent hierarchy
will be of this extended type as well.
.PP
.I Create
returns a newly created translucent hierarchy in \fInode\fP that combines
\fIreadonly\fP (as first hierarchy) with \fIwritable\fP (as second
hierarchy). On all operations delegated to \fIreadonly\fP, \fIrauth\fP
will be passed on as authorization. Likewise \fIwauth\fP will be passed
to all operations forwarded to \fIwritable\fP. The access to directory
nodes of the translucent system itself must be authorized according to
the \fIstatus\fP parameter. The directory mode \fIdirmode\fP determines
how member listings are composed out of the listings from the two
underlying hierarchies (see above).
.PP
.I CreateFactory
takes the parameters as \fICreate\fP and returns a newly created
factory that generates translucent hierarchies as specified by
these parameters.
.SH DIAGNOSTICS
.I TranslucentNames
generates some error events using \fINames.Error\fP with
following error codes: \fINames.nodeNotFound\fP,
\fINames.nodeDestroyed\fP, and \fINames.noPermission\fP.
More events can be generated by the underlying implementations.
.SH "SEE ALSO"
.Tb Proxies(3)
.Tp Names(3)
general abstraction for name hierarchies
.Tp Proxies(3)
framework for proxy objects
.Te
.\" ---------------------------------------------------------------------------
.\" $Id: TranslucentNames.3,v 1.1 2004/09/20 16:29:02 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: TranslucentNames.3,v $
.\" Revision 1.1  2004/09/20 16:29:02  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
