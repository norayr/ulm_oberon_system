.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-2005 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH Types 3 "Last change: 11 March 2005" "Release 0.5" "Ulm's Oberon System"
.SH NAME
Types \- collection of compiler-dependent base types
.SH SYNOPSIS
.Pg
TYPE Address = SYSTEM.ADDRESS;
TYPE UntracedAddress = SYSTEM.UNTRACEDADDRESS;
TYPE IntAddress = LONGINT;
TYPE Count = LONGINT;
TYPE Size = Count;
TYPE Byte = BYTE;
.sp 0.7
CONST bigEndian = 0; littleEndian = 1;
CONST byteorder = bigEndian; (* machine-dependent constant *)
TYPE ByteOrder = SHORTINT; (* bigEndian or littleEndian *)
.sp 0.7
TYPE Int8 = SHORTINT;
TYPE Int16 = SYSTEM.INT16;
TYPE Int32 = LONGINT;
.sp 0.7
TYPE Real32 = REAL;
TYPE Real64 = REAL;
TYPE Real128 = LONGREAL;
.sp 0.7
CONST bigEndian = 0;    (* SPARC, M68K etc *)
CONST littleEndian = 1; (* Intel 80x86, VAX etc *)
CONST byteorder = bigEndian; (* machine-dependent constant *)
TYPE ByteOrder = SHORTINT; (* bigEndian or littleEndian *)
.sp 0.7
(* relationship between SET and INTEGER *)
TYPE SetInt = INTEGER; (* INTEGER type that corresponds to SET *)
CONST msb = SYS.VAL(SET, MIN(SetInt));
CONST msbIsMax = SYS.VAL(SHORTINT, (msb = {MAX(SET)}));
CONST msbIs0 = SYS.VAL(SHORTINT, (msb = {0}));
CONST msbindex = msbIsMax * MAX(SET);
CONST lsbindex = MAX(SET) - msbindex;
CONST nofbits = MAX(SET) + 1;
.sp 0.7
PROCEDURE ToInt8(int: LONGINT) : Int8;
PROCEDURE ToInt16(int: LONGINT) : Int16;
PROCEDURE ToInt32(int: LONGINT) : Int32;
.sp 0.7
PROCEDURE ToReal32(real: LONGREAL) : Real32;
PROCEDURE ToReal64(real: LONGREAL) : Real64;
PROCEDURE ToReal128(real: LONGREAL) : Real128;
.Pe
.SH DESCRIPTION
.I Types
exports some base type definitions which are compiler-dependent.
The Oberon Report assumes that \fBLONGINT\fP is the
appropriate type for address arithmetic (e.g. \fBSYSTEM.ADR\fP is
defined to return \fBLONGINT\fP) but this is not necessarily true
for all Oberon implementations.
Ulm's Oberon compiler, for example, distinguishes between addresses
which are to be traced by the garbage collector
and those which are to be ignored.
For this to work,
\fBSYSTEM(3)\fP exports \fBADDRESS\fP and \fBUNTRACEDADDRESS\fP.
Both are compatible to \fBLONGINT\fP but not identical.
.I Types
allows to reduce the dependency from Ulm's version of \fBSYSTEM\fP
by use of \fITypes.Address\fP and \fITypes.UntracedAddress\fP instead
of \fBSYSTEM.ADDRESS\fP and \fBSYSTEM.UNTRACEDADDRESS\fP.
.PP
\fICount\fP is expected to be the return type of \fBLEN\fP,
and consequently an appropriate type for array indices.
\fISize\fP should be compatible to the return type of \fBSYSTEM.SIZE\fP.
Some Oberon compilers define \fBBYTE\fP as standard type,
others export \fBBYTE\fP from \fBSYSTEM\fP.
\fIByte\fP allows to avoid this compiler dependency.
.PP
The numeric types \fBInt8\fP .. \fBReal128\fP are expected to be
defined to the best-fitting base type respectively, that is
.IP \(bu
the base type that has exactly the size specified, or, if not available,
.IP \(bu
the smallest base type that is larger than the size specified, or,
if not available,
.IP \(bu
the largest supported base type.
.PP
Some constants and a type are provided to make conversions between
SET and a corresponding integer type more portable.
.I SetInt
is the integer type whose size is identical to that of \fBSET\fP.
The correspondence between set elements (ranging from \fB0\fP to
\fBMAX\fP(\fBSET\fP)) and individual bits of an integer value
that is represented as 2-complement depends on endianess and the
discretion of the compiler writer. 
\fImsbindex\fP is the set element that corresponds to the
most significant bit; likewise \fIlsbindex\fP designates
the set element representing the least significant bit.
Both constants depend on following auxiliary constants:
.Tb msbIsMax
.Tp msb
represents the set
converted from an integer value having only the most-significant
bit set (\fBMIN\fP(\fBINTEGER\fP))
.Tp msbIsMax
is 1, if the most-significant bit is represented by element
\fBMAX\fP(\fBSET\fP),
and 0 otherwise.
.Tp msbIs0
is 1, if the most-significant bit is represented by element 0,
and 0 otherwise.
.Te
Exactly one of the constants \fImsbIsMax\fP and \fImsbIs0\fP is 1.
This assertion is included in the initialization part.
.SH "SEE ALSO"
.Tb SYSTEM(3)
.Tp SYSTEM(3)
compiler-dependent address types \fBADDRESS\fP and \fBUNTRACEDADDRESS\fP
.Te
\fIReport of Ulm's Oberon Compiler\fP
.\" ---------------------------------------------------------------------------
.\" $Id: Types.3,v 1.5 2005/03/11 15:11:54 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: Types.3,v $
.\" Revision 1.5  2005/03/11 15:11:54  borchert
.\" definition of msbIs0 fixed
.\"
.\" Revision 1.4  2000/12/13 10:38:25  borchert
.\" constants and type for correspondence between SET and INTEGER added
.\"
.\" Revision 1.3  2000/11/17 07:24:14  borchert
.\" - ToReal32 .. ToReal128 added
.\" - endianess added
.\"
.\" Revision 1.2  1994/07/01  11:06:52  borchert
.\" IntAddress, Int8/16/32, ToInt8/16/32 and bit/little endian stuff added
.\"
.\" Revision 1.1  1994/02/23  08:34:49  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
