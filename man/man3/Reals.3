.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-1995 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH Reals 3 "Last change: 16 September 1996" "Release 0.5" "Ulm's Oberon System"
.SH NAME
Reals \- conversions from/to real numbers
.SH SYNOPSIS
.Pg
CONST maxexp = 309;
CONST minexp = -323;
CONST maxdignum = 16;
CONST maxlongexp = 4932;
CONST minlongexp = -4951;
CONST maxlongdignum = 19;
.sp 0.7
PROCEDURE ExpAndMan(r: LONGREAL; long: BOOLEAN; base: INTEGER;
                 VAR exponent: INTEGER; VAR mantissa: LONGREAL);
.sp 0.3
PROCEDURE Power(base: LONGREAL; exp: INTEGER) : LONGREAL;
.sp 0.3
PROCEDURE Digits(mantissa: LONGREAL; base: INTEGER;
                 VAR buf: ARRAY OF CHAR;
                 VAR neg: BOOLEAN;
                 force: BOOLEAN; VAR ndigits: INTEGER);
.sp 0.3
PROCEDURE Convert(digits: ARRAY OF CHAR; base: INTEGER; neg: BOOLEAN;
                  VAR mantissa: LONGREAL);
.Pe
.SH DESCRIPTION
.I Reals
offers some base routines for converting from and to real numbers.
Valid \fIbase\fP values are 2, 8, 10, and 16.
.PP
Some constants are exported for real numbers of type \fBREAL\fP and
\fBLONGREAL\fP:
.Tb maxlongdignum
.Tp maxexp
maximal exponent of \fBREAL\fP numbers
.Tp minexp
minimal exponent of \fBREAL\fP numbers
.Tp maxdignum
maximal number of significant digits in decimal representation
.Tp maxlongexp
maximal exponent of \fBLONGREAL\fP numbers
.Tp minlongexp
minimal exponent of \fBLONGREAL\fP numbers
.Tp maxlongdignum
maximal number of significant digits in decimal representation
.Te
.PP
.I ExpAndMan
divides
.I r
into \fIexponent\fP and \fImantissa\fP according to following rules:
.IP (1)
(1.0 <= \fBABS\fP(\fImantissa\fP)) & (\fBABS\fP(\fImantissa\fP) < \fIbase\fP)
.IP (2)
\fIr\fP = \fImantissa\fP * \fIbase\fP^\fIexponent\fP
.PP
.I long
should be
.B FALSE
if a \fBREAL\fP-value is passed to \fIr\fP.
.PP
.I Digits
converts
.I mantissa
into a sequence of digits ("0" to "9" and "A" to "F" (if \fIbase\fP = 16)).
.I mantissa
must hold (1) of
.IR ExpAndMan .
In normal case (\fIndigits\fP = 0) all significant digits are
generated into \fIbuf\fP.
If \fIndigits\fP is positive
it specifies the number of digits
to be stored into \fIbuf\fP.
\fIndigits\fP is diminished to the number of significant digits
if \fIforce\fP is \fBFALSE\fP.
Trailing zeroes are cut and the actual number of digits stored into
.I buf
is returned in
.IR ndigits .
.I buf
is guaranteed to be 0X-terminated.
.I neg
is set to
.B TRUE
if \fImantissa\fP is negative.
.PP
.I Convert
converts normalized
.I digits
(implicit decimal point after first digit)
into
.IR mantissa .
.PP
.I Power
returns \fIbase\fP^\fIexp\fP.
.SH EXAMPLE
Following procedure writes a \fBREAL\fP-number in exponential format:
.Pg
PROCEDURE WriteReal(r: REAL);
   CONST
      base = 10;
   VAR
      exponent: INTEGER;
      mantissa: LONGREAL;
      digits: ARRAY Reals.maxdignum+1 OF CHAR;
      ndigits: INTEGER;
      neg: BOOLEAN;
      index: INTEGER;
BEGIN
   Reals.ExpAndMan(r, (* long = *) FALSE, base, exponent, mantissa);
   ndigits := 0; (* all significant digits *)
   Reals.Digits(mantissa, base, digits, neg,
                (* force = *) FALSE, ndigits);
   IF neg THEN
      Write.Char("-");
   END;
   Write.Char(digits[0]);
   IF ndigits > 1 THEN
      Write.Char(".");
      index := 1;
      WHILE index < ndigits DO
         Write.Char(digits[index]);
         INC(index);
      END;
   END;
   Write.Char("E"); Write.Int(exponent, 0);
END WriteReal;
.Pe
.SH "SEE ALSO"
.Tb Write(3)
.Tp Read(3)
formatted input of real numbers
.Tp Write(3)
formatted output of real numbers
.Te
.\" ---------------------------------------------------------------------------
.\" $Id: Reals.3,v 1.3 1996/09/16 16:55:29 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: Reals.3,v $
.\" Revision 1.3  1996/09/16  16:55:29  borchert
.\" formatting changed
.\"
.\" Revision 1.2  91/06/20  13:39:08  borchert
.\" table fixed
.\" 
.\" Revision 1.1  90/08/31  17:02:18  borchert
.\" Initial revision
.\" 
.\" ---------------------------------------------------------------------------
