.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-1995 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH UnixFiles 3 "Last change: 10 July 2003" "Release 0.5" "Ulm's Oberon System"
.SH NAME
UnixFiles \- stream implementation for UNIX files
.SH SYNOPSIS
.Pg
CONST illegalMode = 0; (* mode doesn't equal one of legal modes given below *)
CONST invalidFd = 1; (* invalid file descriptor given to OpenFd *)
CONST errorcodes = 2;
TYPE ErrorCode = SHORTINT;
TYPE ErrorEvent = POINTER TO ErrorEventRec;
TYPE ErrorEventRec =
   RECORD
      (Events.EventRec)
      errorcode: ErrorCode;
   END;
VAR error: Events.EventType;
VAR errormsg: ARRAY errorcodes OF Events.Message;
.sp 0.7
CONST read = 0; write = 1; rdwr = 2; create = 4; condcreate = 8;
TYPE Mode = SHORTINT; (* read, write, rdwr,
                         read+create, write+create, rdwr+create,
                         read+condcreate, write+condcreate, rdwr+condcreate
                      *)
TYPE Stream = POINTER TO StreamRec;
TYPE StreamRec =
   RECORD
      (Streams.StreamRec)
      file: SysTypes.File; (* readonly *)
      interrupted: BOOLEAN; (* EINTR for last operation? *)
      retry: BOOLEAN; (* retry on interrupts? *)
   END;
.sp 0.7
PROCEDURE Open(VAR s: Streams.Stream; filename: ARRAY OF CHAR;
               mode: Mode; bufmode: Streams.BufMode;
               errors: RelatedEvents.Object) : BOOLEAN;
.sp 0.3
PROCEDURE OpenFd(VAR s: Streams.Stream; fd: SysTypes.File;
                 mode: Mode; bufmode: Streams.BufMode;
                 errors: RelatedEvents.Object) : BOOLEAN;
.Pe
.SH DESCRIPTION
.I UnixFiles
provides a stream interface to UNIX files and file descriptors.
The stream implementation supports the messages of
\fIStreamConditions(3)\fP.
.I Open
opens the given 0X-terminated
.I filename
for access mode
.IR mode .
Valid accessing modes are
.I read
(read-only access),
.I write
(write-only access)
and
.I rdwr
(read and write access).
\fIcreate\fP, if added to \fImode\fP,
causes \fIfilename\fP to be created
(or to be truncated if \fIfilename\fP exists already).
Alternatively, \fIcondcreate\fP may be added to \fImode\fP
which only causes \fIfilename\fP to be created when it doesn't exist.
.PP
The buffering mode
.I bufmode
should be one of
.I Streams.onebuf
(normal buffering),
.I Streams.bufpool
(buffer cache),
.I Streams.nobuf
(unbuffered and thus very inefficient),
and
.I Streams.linebuf
(suitable for line oriented terminal input and output).
.I OpenFd
opens a stream for a given file descriptor.
The
.I mode
of the stream must be compatible to the mode of
.IR fd .
Streams returned by \fIOpen\fP and \fIOpenFd\fP
are of type \fIUnixFiles.Stream\fP.
.PP
.I UnixFiles
connects the standard streams \fIStreams.stdin\fP, \fIStreams.stdout\fP,
and \fIStreams.stderr\fP to the file descriptors 0, 1, and 2 during
initialization.
The buffering mode of
\fIStreams.stdin\fP and \fIStreams.stdout\fP is
.I Streams.linebuf
in case of terminal devices and
.I Streams.onebuf
for all other files.
.I Streams.stderr
is unbuffered.
The access mode is
.I rdwr
for \fIStreams.stdin\fP and \fIStreams.stdout\fP
and
.I write
for \fIStreams.stderr\fP.
.SH DIAGNOSTICS
.I Open
and
.I OpenFd
pass the \fIerrors\fP parameter together with an error event
to \fIRelatedEvents\fP in case of errors.
Further, they return \fBFALSE\fP on failure.
Following errors are generated by \fIUnixFiles\fP itself:
.Tb illegalMode
.Tp illegalMode
An unknown mode was given to \fIOpen\fP or \fIOpenFd\fP.
Note that \fIOpenFd\fP doesn't accept the modifiers
\fIcreate\fP or \fIcondcreate\fP.
.Tp invalidFd
\fIOpenFd\fP checks the given file descriptor for validity
by executing an \fIstat(2)\fP system call and returns this
error on failure.
.Te
.LP
Errors during the access of the stream are converted
into events of \fIRelatedEvents\fP.
By default, these events are being queued.
.LP
.I UnixFiles
uses some interruptible system calls.
By default,
operations are retried in case of interruptions.
Optionally,
the \fIretry\fP field may be set to \fBFALSE\fP.
In this case interruptions may lead to error events.
The \fIinterrupt\fP field indicates whether the last
operation was interrupted or not.
.SH "SEE ALSO"
.Tb RelatedEvents(3)
.Tp RelatedEvents(3)
error event handling
.Tp Streams(3)
stream operations
.Tp SysIO(3)
UNIX system calls for input and output
.Te
.SH BUGS
Some UNIX versions offer an \fIappend\fP mode:
each write access is appended to the file independent of the
current position.
.I UnixFiles
cannot support this access mode on base of
.I Streams
because implicit position changes would clash with the buffering system.
.PP
.I UnixFiles
checks the opened file for being seekable.
In case of special devices this cannot be examined
in all cases without trying a seek operation.
This, however, is not done to avoid unnecessary error events.
.\" ---------------------------------------------------------------------------
.\" $Id: UnixFiles.3,v 1.10 2003/07/10 09:28:28 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: UnixFiles.3,v $
.\" Revision 1.10  2003/07/10 09:28:28  borchert
.\" typos fixed
.\"
.\" Revision 1.9  1996/09/16 15:43:04  borchert
.\" - condcreate constant changed from 5 to 8
.\" - minor typos fixed
.\"
.\" Revision 1.8  1992/12/17  16:13:13  borchert
.\" condcreate added
.\" error codes added
.\"
.\" Revision 1.7  1992/05/13  13:35:11  borchert
.\" create added to Mode
.\" bufpool added to buffer modes
.\"
.\" Revision 1.6  1992/02/18  07:40:17  borchert
.\" Files renamed to UnixFiles
.\"
.\" Revision 1.5  1992/01/15  07:26:06  borchert
.\" retry & interrupted added to Files.File
.\" support of StreamConditions
.\"
.\" Revision 1.4  1991/11/22  09:16:21  borchert
.\" errors parameter added
.\"
.\" Revision 1.3  1991/11/18  08:11:51  borchert
.\" new event handling (RelatedEvents)
.\" BUGS updated: Files checks now for seek ability
.\"
.\" Revision 1.2  1991/06/19  15:43:27  borchert
.\" returned streams are now of type Streams.Stream
.\"
.\" Revision 1.1  90/08/31  17:02:14  borchert
.\" Initial revision
.\" 
.\" ---------------------------------------------------------------------------
