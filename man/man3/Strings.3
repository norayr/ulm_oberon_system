.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-1995 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH Strings 3 "Last change: 10 July 2003" "Release 0.5" "Ulm's Oberon System"
.SH NAME
Strings \- string operations
.SH SYNOPSIS
.Pg
(* error codes for streams *)
CONST endOfStringReached = 0;   (* write failure: end of string reached *)
CONST outOfRange = 1;           (* seek failure: position out of range *)
CONST badParameter = 2;         (* illegal parameter value (eg whence) *)
CONST posOutside = 3;           (* trunc failure: position beyond trunc pos *)
CONST errorcodes = 4;
.sp 0.3
TYPE ErrorCode = SHORTINT;
TYPE Event = POINTER TO EventRec;
TYPE EventRec =
   RECORD
      (Events.EventRec)
      stream: Streams.Stream;
      errorcode: ErrorCode;
   END;
VAR errormsg: ARRAY errorcodes OF Events.Message;
VAR error: Events.EventType;
.sp 0.7
TYPE Stream = POINTER TO StreamRec;
TYPE StreamRec = RECORD (Streams.StreamRec) END;
.sp 0.7
PROCEDURE Write(stream: Streams.Stream; string: ARRAY OF CHAR);
PROCEDURE WritePart(stream: Streams.Stream; string: ARRAY OF CHAR;
                    sourceIndex: LONGINT);
.sp 0.3
PROCEDURE Read(VAR string: ARRAY OF CHAR; stream: Streams.Stream);
PROCEDURE ReadPart(VAR string: ARRAY OF CHAR; destIndex: LONGINT;
                   stream: Streams.Stream);
.sp 0.3
PROCEDURE Copy(VAR destination: ARRAY OF CHAR; source: ARRAY OF CHAR);
PROCEDURE PartCopy(VAR destination: ARRAY OF CHAR; destIndex: LONGINT;
                   source: ARRAY OF CHAR; sourceIndex: LONGINT);
.sp 0.3
PROCEDURE Len(string: ARRAY OF CHAR) : LONGINT;
.sp 0.3
PROCEDURE Concatenate(VAR destination: ARRAY OF CHAR;
                      source: ARRAY OF CHAR);
.sp 0.3
PROCEDURE Open(VAR stream: Streams.Stream; VAR string: ARRAY OF CHAR);
.Pe
.SH DESCRIPTION
The procedures of
.I Strings
follow these conventions:
.IP \(bu
the first parameter designates the destination and the second the source
(despite to the
.B COPY
standard function).
.IP \(bu
resulting strings are guaranteed to be 0X-terminated.
.IP \(bu
streams are expected to work like streams of type
.IR Texts.Text ,
i.e. they must be capable of
.I Seek
and
.IR Trunc .
.IP \(bu
streams are left at position 0.
.PP
.I Write
seeks to position 0 of
.IR stream ,
truncates it to zero length and copies
.I string
to
.IR stream .
.I WritePart
works like
.I Write
but
.I sourceIndex
defines the starting offset of
.IR string .
.PP
.I Read
copies the contents of
.I stream
from position 0 until end of stream to
.IR string .
.I ReadPart
takes
.I destIndex
as starting index of
.IR string .
.PP
.I Copy
copies
.I source
to
.IR destination .
.I PartCopy
copies
.I source[sourceIndex..]
to
.IR destination[destIndex..] .
.I Len
returns the number of characters of
.I string
(without terminating 0X).
.I Concatenate
appends
.I source
to
.I destination
and is thus equivalent to
\fIPartCopy\fP(\fIdestination\fP, \fILen\fP(\fIdestination\fP),
\fIsource\fP, 0);
.PP
.I Open
opens an array of characters as stream for unbuffered reading and writing.
.IR Seek ,
.IR Tell ,
and
.I Trunc
are permitted.
The string argument is expected to be initialized and 0X-terminated.
The lowest index with \fIstring\fP[index] = 0X determines the length
of the stream.
The stream may be extended by positioning to the end of the stream
and writing to it.
The maximal length of the stream is given by \fBLEN\fP(\fIstring\fP) - 1.
String streams may be shortened by use of \fITrunc\fP.
Because no buffering takes place results of write operations are
immediately seen in the underlying string.
The terminating 0X is not seen on the stream side and must not
be written to the stream.
Modifications of the underlying string must be followed by
\fIStreams.Touch\fP to see the changes on the stream side.
.SH EXAMPLE
Formatted I/O to strings:
.Pg
PROCEDURE TimeString(hour, minute, second: INTEGER;
                     VAR time: ARRAY OF CHAR);
   VAR stream: Streams.Stream;
BEGIN
   Strings.Open(stream, time);
   Write.IntS(stream, hour, 2); Write.CharS(stream, ":");
   Write.IntS(stream, minute, 2); Write.CharS(stream, ":");
   Write.IntS(stream, second, 2);
   Streams.Release(stream);
END TimeString;
.Pe
.SH DIAGNOSTICS
Errors during the access of streams of type \fIStream\fP
are converted into events of \fIRelatedEvents\fP.
By default, these events are being queued.
.LP
Error events which are generated by \fIStrings\fP are of
type \fIerror\fP and contain one of the error codes following:
.Tb endOfStringReached
.Tp endOfStringReached
A write operation failed
because the end of the underlying character array was reached.
.Tp outOfRange
\fISeek\fP was requested to position outside the currently valid
range (0 to the string length).
.Tp badParameter
A illegal parameter value was given,
e.g. an undefined value for \fIwhence\fP.
.Tp posOutside
A trunc operation failed because the current position
would be invalidated by the trunc position.
.Te
.LP
By default, events of type \fIerror\fP are ignored.
.SH "SEE ALSO"
.Tb Streams(3)
.Tp Streams(3)
stream operations
.Tp Texts(3)
in-memory streams
.Te
.\" ---------------------------------------------------------------------------
.\" $Id: Strings.3,v 1.9 2003/07/10 09:22:16 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: Strings.3,v $
.\" Revision 1.9  2003/07/10 09:22:16  borchert
.\" typos fixed
.\"
.\" Revision 1.8  1996/09/17 07:45:45  borchert
.\" formatting changed
.\"
.\" Revision 1.7  1994/07/05  08:35:06  borchert
.\" notice about Streams.Touch added for the stream interface to strings
.\"
.\" Revision 1.6  1992/04/22  10:37:00  borchert
.\" Streams.Close replaced by Streams.Release in the EXAMPLE
.\"
.\" Revision 1.5  1991/11/25  09:16:33  borchert
.\" new error handling
.\"
.\" Revision 1.4  1991/06/21  15:34:35  borchert
.\" minor fix
.\"
.\" Revision 1.3  90/11/02  21:18:31  oberon
.\" Strings.Open added
.\" 
.\" Revision 1.2  90/10/12  14:21:05  oberon
.\" streams written by Strings.Write are *NOT* 0X-terminated
.\" 
.\" Revision 1.1  90/08/31  17:02:20  borchert
.\" Initial revision
.\" 
.\" ---------------------------------------------------------------------------
