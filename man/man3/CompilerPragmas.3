'\" t
.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-2001 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH CompilerPragmas 3 "Last change: 22 April 2001" "Release 0.5" "Ulm's Oberon System"
.SH NAME
CompilerPragmas \- process and lookup compilation options within sources
.SH SYNOPSIS
.Pg
TYPE PragmaContext = POINTER TO PragmaContextRec;
TYPE PragmaContextRec = RECORD (PersistentDisciplines.ObjectRec) END;
.sp 0.7
(* error events of ProcessArgs: *)
CONST usageError = 0; (* syntax error in pragma definition *)
CONST unknownPragma = 1; (* unknown pragma variable *)
CONST invalidValue = 2; (* invalid pragma value *)
CONST errors = 3;
TYPE ErrorCode = SHORTINT; (* usageError..invalidValue *)
TYPE ErrorEvent = POINTER TO ErrorEventRec;
TYPE ErrorEventRec =
      RECORD
         (Events.EventRec)
         errorcode: ErrorCode;
      END;
VAR errormsg: ARRAY errors OF Events.Message;
VAR error: Events.EventType;
.sp 0.7
PROCEDURE DefineArgs(args: Args.Arguments);
PROCEDURE Create(VAR pcontext: PragmaContext; pragmas: Args.Arguments);
.sp 0.7
PROCEDURE ProcessArgs(pcontext: PragmaContext;
                      args: Args.Arguments) : BOOLEAN;
.sp 0.3
PROCEDURE ProcessPragmas(pcontext: PragmaContext;
                         loc: CompilerObjects.Location;
                         text: Streams.Stream);
.sp 0.7
PROCEDURE LookupPragma(pcontext: PragmaContext;
                       location: CompilerObjects.Location;
                       pname: ARRAY OF CHAR;
                       VAR value: Args.Value);
.sp 0.3
PROCEDURE LookupFlag(pcontext: PragmaContext;
                     location: CompilerObjects.Location;
                     pname: ARRAY OF CHAR) : BOOLEAN;
.Pe
.SH DESCRIPTION
.I CompilerPragmas
allows to process and lookup compilation options within sources,
called pragmas.
.LP
.I DefineArgs
is (like \fICompilers.DefineArgs\fP) to be called shortly after
\fIArgs.Create\fP by those modules that create reference objects for
program text sources (see \fICompilerSources(3)\fP) to extend the set
of compilation options that apply for a particular source.
.I DefineArgs
creates a single argument named ``pragma'' (no single-letter
abbreviation available) that accepts (using \fIStrListArgs(3)\fP) any
number of string arguments of initial pragma settings that are
interpreted \fIlater\fP at compilation time by \fIProcessArgs\fP.
In addition, the set of accepted values for boolean arguments
(see \fIBoolArgs(3)\fP and \fIBoolDisciplines(3)\fP)
for \fIargs\fP is extended
by ``+'' and ``on'' indicating \fBTRUE\fP, and
by ``-'' and ``off'' indicating \fBFALSE\fP.
.LP
.I Create
is to be called at the initial stage of a compilation process
to create a pragma context that,
.IP \(bu
supporting the set of pragmas defined by \fIpragmas\fP, and
.IP \(bu
beginning with the initial state afterwards defined by \fIProcessArgs\fP, 
.LP
allows to set and query source location dependent compilation options.
Pragma sets are usually defined by compiler-dependent extensions
of this module. See, for example, \fIOberonPragmas(3)\fP that
defines the set of pragmas for the Oberon compiler and offers
in \fIOberonPragmas.Create\fP an operation which indirectly
calls \fICreate\fP with its own pragma set.
.LP
.I ProcessArgs
is to be called shortly after \fICreate\fP before \fIProcessPragmas\fP
is called for the first time to accept any initial pragma values given
earlier at the creation time of the associated source reference object.
Assignments in initial pragma options consists of a variable name,
``='' as delimiter, and a value whose interpretation is delegated to
the associated type extension of \fIArgs(3)\fP.
.I ProcessArgs
returns \fBFALSE\fP and generates error events in case of errors.
.LP
.I ProcessPragmas
works like a scanner in the sense of \fIArgs(3)\fP that
scans text stretches (\fItext\fP at location \fIloc\fP)
with pragma settings within sources which,
in dependence of the language and the compiler in use,
are usually located within comments or specific instructions.
Pragma settings are expected to conform to following syntax:
.TS
l l.
\fBPragmaAssignments\fP =	{ \fBPragmaAssignment\fP } .
\fBPragmaAssignment\fP =	"$" (\fBFlagAssignment\fP | \fBFreeAssignment\fP) .
\fBFlagAssignment\fP =	\fBFlagName\fP ("+" | "-" | "=") .
\fBFlagName\fP =	(* just one letter *) .
\fBFreeAssignment\fP =	\fBPragmaVarname\fP = \fBPragmaValue\fP .
\fBPragmaVarname\fP =	(* word with at least two characters *) .
\fBPragmaValue\fP =	\fBNaturalNumber\fP | \fBQuotedValue\fP .
\fBNaturalNumber\fP =	(* sequence of digits 0..9 *)
\fBQuotedValue\fP =	(* any text, enclosed in "..." *)
.TE
Two styles of pragma settings are provided:
.IP \(bu
the traditional style in conformance to \fIoc(1)\fP and some Z\*urich
compilers with \fBBOOLEAN\fP-valued single-letter options that allow
nesting (``='' as flag value undoes the previous flag setting), and
.IP \(bu
an open style that supports (on base of \fIArgs(3)\fP) arbitrary
pragma types where value parsing is delegated to type extensions
of \fIArgs(3)\fP like \fIBoolArgs(3)\fP, \fIIntArgs(3)\fP, and
\fIStringArgs(3)\fP. The open style is required to use pragma
variable names with a minimal length of 2 to distinguish it
syntactically from the traditional style.
.LP
The interpretation of white space within pragma assignments
is shared with that of \fItext\fP, see \fIStreamDisciplines(3)\fP.
.LP
.I LookupPragma
and
.I LookupFlag
permit to lookup pragma values of \fIpname\fP at \fIlocation\fP
within \fIpcontext\fP. \fILookupPragma\fP returns
(like \fIArgs.GetValue\fP) \fBNIL\fP in case of undefined
values. \fILookupFlag\fP returns \fBFALSE\fP for undefined
flag values.
.SH DIAGNOSTICS
Following error events may be raised by \fIProcessArgs\fP in
case of invalid initial pragma settings:
.Tb unknownPragma
.Tp usageError
``='' is missing or the pragma variable name is empty.
.Tp unknownPragma
An unknown pragma variable name was encountered.
.Tp invalidValue
The pragma value does not conform to the input syntax of the
corresponding type extension of \fIArgs(3)\fP.
.Te
.LP
General syntax errors in pragma assignments are silently ignored by
\fIProcessPragmas\fP because not every text stretch presented to
\fIProcessPragmas\fP is necessarily intended as pragma setting. However,
once a pragma setting is correctly recognized as such, compiler errors
using \fICompilerErrors(3)\fP are generated for unknown pragma variables,
unbalanced pragma settings (in case of the traditional style), and
invalid pragma values (in case of the open style).
.LP
Error events generated by \fIArgs(3)\fP are forwarded to
the corresponding pragma context.
.SH "SEE ALSO"
.Tb CompilerSources(3)
.Tp Args(3)
general abstraction for options and option types.
.Tp CompilerErrors(3)
standardized event generation for compilation errors.
.Tp CompilerSources(3)
reference objects for program text sources that store the
initial set of compilation options including pragmas.
.Tp OberonPragmas(3)
defines the pragma set for the Oberon compiler and offers
\fIOberonPragmas.Create\fP that indirectly invokes \fICreate\fP.
.Tp StrListArgs(3)
list of strings for arguments; used for ``pragma''
compilation option to setup initial pragma values.
.Te
.SH BUGS
Pragma specifications given at the source object creation time
are checked much later at parsing time. To avoid the annoyance
of postponed error messages, it could be wise to create even
at source object creation time a pragma context and to invoke
\fIProcessArgs\fP for it to check for errors. This is, for
example, done by \fIobci(1)\fP.
.\" ---------------------------------------------------------------------------
.\" $Id: CompilerPragmas.3,v 1.1 2001/04/22 06:58:42 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: CompilerPragmas.3,v $
.\" Revision 1.1  2001/04/22 06:58:42  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
