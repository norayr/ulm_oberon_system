.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-1996 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH OneWayHashes 3 "Last change: 4 April 1998" "Release 0.5" "Ulm's Oberon System"
.SH NAME
OneWayHashes \- general abstraction for one-way hash functions
.SH SYNOPSIS
.Pg
TYPE Hash = POINTER TO HashRec;
TYPE HashRec = RECORD (Services.ObjectRec) END;
TYPE Value = POINTER TO ValueRec;
TYPE ValueRec = RECORD (PersistentDisciplines.ObjectRec) END;
.sp 0.3
TYPE GenerateProc = PROCEDURE (hash: Hash; message: Streams.Stream;
			       VAR value: Value);
TYPE BitlengthProc = PROCEDURE (hash: Hash): LONGINT;
TYPE Interface = POINTER TO InterfaceRec;
TYPE InterfaceRec =
   RECORD
      (Objects.ObjectRec)
      generate:  GenerateProc;
      bitlength: BitlengthProc;
   END;
TYPE GeneratorProc = PROCEDURE (value: Value): Hash;
TYPE EqualProc = PROCEDURE (value1, value2: Value): BOOLEAN;
TYPE CreateStreamProc = PROCEDURE (value: Value; VAR stream: Streams.Stream);
TYPE ValueInterface = POINTER TO ValueInterfaceRec;
TYPE ValueInterfaceRec =
   RECORD
      (Objects.ObjectRec)
      generator:    GeneratorProc;
      equal:	    EqualProc;
      createStream: CreateStreamProc;
   END;
.sp 0.7
PROCEDURE Init(hash: Hash; if: Interface);
PROCEDURE InitValue(value: Value; if: ValueInterface);
.sp 0.3
PROCEDURE Generate(hash: Hash; message: Streams.Stream; VAR value: Value);
PROCEDURE Bitlength(hash: Hash): LONGINT;
.sp 0.3
PROCEDURE Generator(value: Value): Hash;
PROCEDURE Equal(value1, value2: Value): BOOLEAN;
PROCEDURE CreateStream(value: Value; VAR stream: Streams.Stream);
.Pe
.SH DESCRIPTION
.I OneWayHashes
provides a general interface for one-way hash functions. One-way hash functions
operate on arbitrary-length messages and return fixed-length hash values. Such
functions have the following characteristics:
.IP \(bu
Given the message, it is easy to compute the hash value.
.IP \(bu
Given the hash value, it is hard to compute the message.
.IP \(bu
It is hard to find two messages yielding the same hash value.
.LP
The interface procedures of hashes should meet the specifications following:
.LP
.Is
.If generate "\fIhash\fP: \fIHash\fP; \fImessage\fP: \fIStreams.Stream\fP; \fBVAR\fP \fIvalue\fP: \fIValue\fP
generate a hash value out of given \fImessage\fP by using the one-way hash
function specified in \fIhash\fP and store the computed hash value in 
\fIvalue\fP. \fImessage\fP is a stream that will be read sequentially until
end of file.
.If bitlength "\fIhash\fP: \fIHash\fP" "\fBLONGINT\fP"
return the fixed bit length of a hash value generated by the one-way hash
function specified in \fIhash\fP.
.Ef
.LP
Moreover, interface procedures of hash values are specified as follows:
.LP
.Is
.If generator "\fIvalue\fP: \fIValue\fP" "\fIHash\fP"
return the hash that generated \fIvalue\fP.
.If equal "\fIvalue1\fP, \fIvalue2\fP: \fIValue\fP" "\fBBOOLEAN\fP"
test whether two values generated by same hash are equal.
This function is not supposed to be called with values generated by
different hashes.
.If createStream "\fIvalue\fP: \fIValue\fP; \fBVAR\fP \fIs\fP: \fIStreams.Stream\fP
open the memory area allocated by \fIvalue\fP as stream, for reading.
.Ef
.LP
.I Init 
is to be called by implementations of \fIOneWayHashes\fP and connects the
interface \fIif\fP to \fIhash\fP.
Note that \fIServices.Init\fP must of course be called as well.
.LP
.I InitValue
connects values with their \fIOneWayHashes\fP interface.
Note that
.I PersistentObjects.Init
is supposed to have been called before.
.LP
.I Generate
uses the one-way hash function specified by \fIhash\fP to compute a hash value
out of given \fImessage\fP and stores the result in \fIvalue\fP. \fIBitlength\fP
returns the fixed bit length of hash values created by the one-way hash function
specified by \fIhash\fP.
.LP
.I Generator
returns the hash that created a given value.
.I Equal
returns
.B TRUE
if two values generated by the same hash are equal.
By definition, this is a strong hint that the original messages
were equal as well.
Note that comparing values of different hash functions does not
make sense and is in fact illegal.
.LP
.I CreateStream
opens the memory area of a hash value as a stream for reading.
.SH AUTHOR
Frank B.J. Fischer
.LP
revised by Martin Hasch
.SH "SEE ALSO"
.Tb Streams(3)
.Tp Streams(3)
stream operations
.Tp MD5(3)
implementation of the MD5 one-way hash function
.Te
.\" ---------------------------------------------------------------------------
.\" $Id: OneWayHashes.3,v 1.6 1998/04/04 21:09:53 martin Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: OneWayHashes.3,v $
.\" Revision 1.6  1998/04/04  21:09:53  martin
.\" author section updated
.\"
.\" Revision 1.5  1998/04/04  20:29:40  martin
.\" major revision: values are now objects of their own right,
.\" ExtractValue renamed CreateStream and made a method of value,
.\" Equal and Generator added
.\"
.\" Revision 1.4  1998/03/31  09:58:23  martin
.\" typos fixed
.\"
.\" Revision 1.3  1998/03/24  23:33:48  borchert
.\" module name fixed
.\"
.\" Revision 1.2  1997/04/02  16:13:31  borchert
.\" author added
.\"
.\" Revision 1.1  1997/04/02  16:00:28  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
