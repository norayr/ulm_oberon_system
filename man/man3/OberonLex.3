.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-2006 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH OberonLex 3 "Last change: 21 August 2006" "Release 0.5" "Ulm's Oberon System"
.SH NAME
OberonLex \- lexical analysis of Oberon sources
.SH SYNOPSIS
.Pg
(* keywords *)
CONST array = 0; begin = 1; case = 2; const = 3; definition = 4; div = 5;
CONST do = 6; else = 7; elsif = 8; end = 9; exit = 10; for = 11; if = 12;
CONST import = 13; in = 14; is = 15; loop = 16; mod = 17; module = 18;
CONST nil = 19; of = 20; or = 21; pointer = 22; procedure = 23;
CONST record = 24; repeat = 25; return = 26; then = 27; to = 28;
CONST type = 29; until = 30; var = 31; while = 32; with = 33;
.sp 0.3
(* operators and delimiters *)
CONST plus = 40; minus = 41; times = 42; slash = 43; tilde = 44;
CONST ampersand = 45; period = 46; comma = 47; semicolon = 48; bar = 49;
CONST lparen = 50 (* "(" *); lbracket = 51 (* "[" *); lbrace = 52 (* "{" *);
CONST becomes = 53; arrow = 54;
CONST eql = 55; neq = 56; lst = 57; grt = 58; leq = 59; geq = 60;
CONST range = 61; colon = 62;
CONST rparen = 63 (* ")" *); rbracket = 64 (* "]" *); rbrace = 65 (* "}" *);
.sp 0.3
(* miscellaneous symbols *)
CONST ident = 70;
CONST intconst = 71; hexconst = 72; realconst = 73; longrealconst = 74;
CONST charconst = 75; string = 76; comment = 77; eop = 78;
.sp 0.3
symbols = 79; (* # of symbols *)
.sp 0.3
TYPE Symbol = SHORTINT;
.sp 0.7
TYPE Location = Streams.Count;
TYPE Token =
   RECORD
      (Objects.ObjectRec)
      begin, end: Location;
      sy: Symbol;
      ident: ConstStrings.String; (* if sy = ident, NIL otherwise *)
      text: Streams.Stream; (* constants and comments, NIL otherwise *)
   END;
.sp 0.7
CONST ioError = 0; (* unable to read from source stream *)
CONST backFailed = 1; (* unable to push back look-ahead *)
CONST errors = 2;
.sp 0.3
TYPE ErrorEvent = POINTER TO ErrorEventRec;
TYPE ErrorEventRec =
   RECORD
      (Events.EventRec)
      s: Streams.Stream;
      begin, end: Location;
   END;
.sp 0.3
VAR error: Events.EventType;
VAR errormsg: ARRAY errors OF Events.Message;
.sp 0.7
PROCEDURE GetToken(s: Streams.Stream; VAR token: Token);
PROCEDURE GetSymString(sy: Symbol; VAR string: ARRAY OF CHAR);
PROCEDURE SetStringDomain(s: Streams.Stream;
                          domain: ConstStrings.Domain);
.Pe
.SH DESCRIPTION
.I OberonLex
supports the lexical analysis of Oberon and Oberon-2 programs.
.PP
.I GetToken
starts reading from the current position of \fIs\fP
and returns the next input token in \fItoken\fP.
Note that the stream must be buffered and support
tell operations.
Buffering is needed for \fIStreams.Back\fP
(a look-ahead of one character is needed) and
the tell operation is used to record the location of the token.
Stream locations may be converted into line/column pairs
by \fILines(3)\fP.
.PP
White space (as defined by \fIStreamDisciplines(3)\fP)
and comments are skipped.
Note that all characters, which do not belong to the
set of white space characters or to the set of characters
legal Oberon tokens may be composed of,
are considered illegal.
On end of file (\fIStreams.eof\fP), or in case of input errors,
the special token \fIeop\fP will be returned.
To avoid an infinite amout of error messages on
accidently submitted binary files, a fatal input error will be generated
if the fraction of illegal characters becomes too large.
.PP
All keywords and symbols of Oberon and Oberon-2 are recognized.
On parsing Oberon, the symbol \fIfor\fP should be converted
into \fIident\fP.
Constants are accepted in conformance to the Oberon reports.
They are not interpreted, however, and returned as text stream instead
because their interpretation could be (at least in case
of floating point values) machine-dependent.
.PP
.I GetSymString
converts a symbol into a printable string.
This may be useful for error messages.
.PP
.I SetStringDomain
should be preferably called before \fIGetToken\fP and
allows to set the domain which all strings returned in tokens
belong to.
Note that even keywords are returned in the \fIstring\fP
component and they belong to this domain as well.
If \fISetStringDomain\fP has not been called for \fIs\fP,
\fIGetToken\fP will create a domain of \fIConstStrings\fP on
its own.
.SH DIAGNOSTICS
.I OberonLex
generates two kinds of errors:
.IP \(bu
I/O errors resulting from problems on the input stream
that are converted to error events of the type \fIEvent\fP
with code \fIioError\fP or \fIbackFailed\fP, and
.IP \(bu
syntax errors that are detected by the lexical analysis
that are turned into error events of \fICompilerErrors(3)\fP.
.LP
All error events are related to the stream.
There is an upper limit of lexical errors (100) after which
.I OberonLex
gives up.
.SH "SEE ALSO"
.Tb StreamDisciplines(3)
.Tp CompilerErrors(3)
general compiler error events
.Tp ConstStrings(3)
read-only strings of arbitrary length
.Tp RelatedEvents(3)
error handling
.Tp StreamDisciplines(3)
definition of white space
.Tp Streams(3)
abstraction for byte sequences
.Te
.\" ---------------------------------------------------------------------------
.\" $Id: OberonLex.3,v 1.2 2006/08/21 11:33:09 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: OberonLex.3,v $
.\" Revision 1.2  2006/08/21 11:33:09  borchert
.\" string field of Token substituted by a text field
.\"
.\" Revision 1.1  2000/11/17 07:19:03  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
