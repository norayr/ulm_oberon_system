.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-1996 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH TclTk 3 "Last change: 10 July 2003" "Release 0.5" "Ulm's Oberon System"
.SH NAME
TclTk \- interface to a Tcl/Tk interpreter
.SH SYNOPSIS
.Pg
TYPE Interpreter = POINTER TO  InterpreterRec;
TYPE InterpreterRec =
    RECORD
        (Services.ObjectRec)
    END;
.sp 0.3    
(* objects used to communicate with Tcl *)
TYPE Record = POINTER TO RecordRec;
TYPE RecordRec =
    RECORD
        (Disciplines.ObjectRec)
        typename: ConstStrings.String;
    END;
.sp 0.3    
(* lists used within a object of type Record *)
TYPE List = POINTER TO ListRec;
TYPE ListRec = RECORD (Objects.ObjectRec) END;
.sp 0.3    
TYPE IntList = POINTER TO IntListRec;
TYPE IntListRec =
    RECORD
        (ListRec)
        value: INTEGER;
        next: IntList;
    END;
.sp 0.3    
TYPE RealList = POINTER TO RealListRec;
TYPE RealListRec =
    RECORD
        (ListRec)
        value: REAL;
        next: RealList;
    END;
.sp 0.3    
TYPE StringList = POINTER TO StringListRec;
TYPE StringListRec =
    RECORD
        (ListRec)
        value: Streams.Stream;      
        next: StringList;
    END;
.sp 0.3    
TYPE BoolList = POINTER TO BoolListRec;
TYPE BoolListRec =
    RECORD
        (ListRec)
        value: BOOLEAN;
        next: BoolList;
    END;
.sp 0.3    
(* events exchanged with Tcl *)
TYPE EventType = ARRAY 20 OF CHAR;
TYPE Event = POINTER TO EventRec;
TYPE EventRec =
    RECORD
        (Events.EventRec)
        from: Interpreter;
        record: Record;
    END;
.sp 0.3    
CONST
    connectionFailed = 0;   (* unable to access the port listener *)
    connectionRefused = 1;  (* setup failed *)
    connectionBroken = 2;   (* connection is broken *)
    sendFailed = 3;         (* failed to send the requested data *)
    receiveFailed = 4;      (* failed to receive the requested data *)
    serverExit = 5;         (* tcltk-server receives an exit-Event *)
    protocolError = 6;      (* got an unexpected value *)
    tkError = 7;            (* tkerror occured *)
    callProcError = 8;      (* tclerror or no record returned by proc *)
    errors = 9;
TYPE ErrorEvent = POINTER TO ErrorEventRec;
TYPE ErrorEventRec =
    RECORD
        (Events.EventRec);
        errorcode: SHORTINT;
    END;
VAR error: Events.EventType;
VAR errormsg: ARRAY errors OF Events.Message;
.sp 0.7    
(* handling a connection to a interpreter *)
PROCEDURE Open(VAR interp: Interpreter; address: Internet.Address;
               display, appName, className: ARRAY OF CHAR; 
               errors: RelatedEvents.Object) : BOOLEAN;
PROCEDURE Close(interp: Interpreter);
.sp 0.3    
(* evaluating Tcl scripts *)
PROCEDURE Eval(interp: Interpreter; script: ARRAY OF CHAR;
               result: Streams.Stream) : BOOLEAN;
PROCEDURE EvalStream(interp: Interpreter; script: Streams.Stream;
                     result: Streams.Stream) : BOOLEAN;
.sp 0.3    
(* event handling *)
PROCEDURE Define(interp: Interpreter; type: Events.EventType;
                 VAR tcltypename: EventType);
PROCEDURE Handler(interp: Interpreter; type: Events.EventType;
                  tclhandler: ARRAY OF CHAR);
PROCEDURE GetEventType(interp: Interpreter; tcltypename: EventType;
                       VAR type: Events.EventType);
PROCEDURE CreateEventConditions(interp: Interpreter; record: Record; 
                                slotnames: ARRAY OF ARRAY OF CHAR;
                                VAR conditions: ARRAY OF Conditions.Condition; 
                                conditionset: Conditions.ConditionSet);
PROCEDURE DropEventConditions(conditions: ARRAY OF Conditions.Condition);
.sp 0.3    
(* remote procedure call *)
PROCEDURE CallProc(interp: Interpreter; proc: ARRAY OF CHAR;
                   arguments: Record; VAR result: Record) : BOOLEAN;
.sp 0.3    
(* handling with objects for communication *)
PROCEDURE CreateRecord(VAR record: Record; interp: Interpreter;
                       tcltypename: ARRAY OF CHAR);
PROCEDURE GetStringSlot(record: Record; slotname: ARRAY OF CHAR;
                        VAR value: ARRAY OF CHAR);
PROCEDURE GetStringSlotAsStream(record: Record; 
                                slotname: ARRAY OF CHAR;
                                VAR value: Streams.Stream);
PROCEDURE GetIntSlot(record: Record; slotname: ARRAY OF CHAR;
                     VAR value: INTEGER);
PROCEDURE GetRealSlot(record: Record; slotname: ARRAY OF CHAR;
                      VAR value: REAL);
PROCEDURE GetBooleanSlot(record: Record; slotname: ARRAY OF CHAR;
                         VAR value: BOOLEAN);
PROCEDURE GetListSlot(record: Record; slotname: ARRAY OF CHAR;
                      VAR value: List);
PROCEDURE SetStringSlot(record: Record; slotname: ARRAY OF CHAR;
                        value: ARRAY OF CHAR);
PROCEDURE SetStringSlotFromStream(record: Record; 
                                  slotname: ARRAY OF CHAR;
                                  value: Streams.Stream);
PROCEDURE SetIntSlot(record: Record; slotname: ARRAY OF CHAR;
                     value: INTEGER);
PROCEDURE SetRealSlot(record: Record; slotname: ARRAY OF CHAR;
                      value: REAL);
PROCEDURE SetBooleanSlot(record: Record; slotname: ARRAY OF CHAR;
                         value: BOOLEAN);
PROCEDURE SetListSlot(record: Record; slotname: ARRAY OF CHAR;
                      value: List);
.Pe
.SH DESCRIPTION
.ds PS P\s-1OST\s0S\s-1CRIPT\s0
.I TclTk 
provides access to a Tcl interpreter which is extended with Tk commands.
Therewith \fITclTk\fP can be used to equip a oberon application with
a grafical user interface.  To do so, scripts can be evaluated in an
interpreter, in order to create the GUI and to handle events, generated
by X. Communication between Oberon and Tcl is done in terms of events
and communication objects.
.PP
In order to realize access to a interpreter there is a server, called
\fItcltks\fP.  The server can run on every machine that is connected
via internet to the machine, in which the Oberon application is running.
.SH Accessing servers
To be able to start servers dynamically at runtime, a port listener is
used, called \fItcltkl\fP. Hence, \fItcltkl\fP has to be started before
the Oberon application.  If started with a port number as argument,
tcltkl binds this number to the port it listens to. Otherwise the port
number defaults to 22090.  If the environment variable \fBTCLTKS_DIR\fP
on the server machine is given, the listener tries to find the server
there. Otherwise the current working directory on the server machine
is used.
.PP
In order to avoid network traffic evoked by the X-protocol, running
between Tk and X, the port listener should reside in the same machine
as the X-server for the specified display does.
.PP
Due to security, the server checks if the connecting partie is authorized.
To do so, there have to be a file called \fI.tcltks\fP in the users home
directory.  This file should only be readable by the user himself and
it has to contain a password in the first line. This file must also be
accessible by the server. If the server runs on a different file system
the same file has to be provided there.
.SH Creating a server and evaluating scripts
\fIOpen\fP contacts the port listener, which runs a new server on
his part.  The address is either given by \fIaddress\fP or in case it
contains 0 for \fIaddress.portnum\fP and \fIaddress.host\fP the address
is computed from one of the environment variables \fBTCLTKSERVER\fP or
\fBDISPLAY\fP. If \fBTCLTKSERVER\fP is present hostname and portnum will
be taken from there. Otherwise the hostname from \fBDISPLAY\fP will be
used and the port defaults to 22090.  If none is given the host defaults
to the local host with default port number.
.PP
After having connected successfully a server,
\fIOpen\fP passes the first line of \fI.tcltks\fP
to the server together with \fIdisplay\fP, \fIappName\fP and
\fIclassName\fP. The server tries to create a main window on \fIdisplay\fP
and assigns \fIclassName\fP as name for the class of the main window (among 
other thing the class name is used for the resource database). \fIappName\fP
is the name of the application as registered by the window manager and may be
used by the \fItk_send\fP command. On success \fIOpen\fP returns \fBTRUE\fP
and a new object of type \fIInterpreter\fP is created, representing the server.
.PP
For terminating a server \fITclTk\fP supports \fIResources\fP. \fIClose\fP 
terminates the server immediately.
.PP
\fIEval\fP sends the \fIscript\fP to the server, in order to evaluate it.
If there was no error during evaluation, \fIEval\fP returns \fBTRUE\fP and
the resulting string can be found in \fIresult\fP. Otherwise \fIresult\fP
contains the resulting error message returned by Tcl. \fIEvalStream\fP
works like \fIEval\fP except that it reads the script from a given stream,
starting at the current stream position.
.SH Objects for communication
In order to exchange data between Oberon and the Tcl programm running
in the server, TclTk provides objects for communication, called
\fIRecords\fP. Such objects can be handled by \fITclTk\fP and the server,
so that transmitted data can be accessed by name.
.PP
Records have to be defined in Tcl to keep the interface clear. For
dealing with records in Tcl there is a new command called Records,
which comes along with a few options:
.TP
\fBRecords define\fP \fItypename slotname slottype \fP?\fIslotname slottype ...\fP?
defines a new type with \fItypename\fP as name. A type has several slots, each of which
has a name (\fIslotname\fP) and a type (\fIslottype\fP). To form complex structured types,
the type of a slot can again be a list with \fIslotname\fP \fIslottype\fP pairs. Valid slottypes are:
\fIinteger\fP, \fIreal\fP, \fIstring\fP, \fIboolean\fP, 
\fIlist<integer>\fP, \fIlist<real>\fP, \fIlist<string>\fP and
\fIlist<boolean>\fP. On success it returns an empty string.
.TP
\fBRecords create\fP \fItypename var \fP?\fIvar ...\fP?
creates global objects of type \fItypename\fP. The names of the objects 
are given by the \fIvar\fP arguments. On success an empty string is returned.
.TP
\fBRecords delete\fP \fIvar \fP?\fIvar ...\fP?
Deletes the objects, that names are given by the \fIvar\fP arguments.
On success an empty string is returned.
.TP
\fBRecords typename\fP \fIvar\fP
returns the typename of object \fIvar\fP.
.TP
\fBRecords set\fP \fIvar slotname value \fP?\fIslotname value ...\fP?
assigns \fIvalue\fP to a slot named \fIslotname\fP of the object, that name 
is given by \fIva\fPr. To
reference complex structured slots, the path to the slot has to be constructed
with the slotnames along the way separated by ".", just like in Oberon.
On success it returns an empty string.
Note the value for a slot has to be assignment compatible to the declared type.
Checking is done by one of the functions \fITcl_GetInt\fP, \fITcl_GetDouble\fP
or \fITcl_GetBoolean\fP.
.TP
\fBRecords get\fP \fIvar \fP?\fIslotname\fP?
retrieves the values of object \fIvar\fP. If \fIslotname\fP is given 
the value of \fIslotname\fP is returned. 
Otherwise a list is returned that elements are lists
themselve containing name and value in this order for every slot.
.PP
In Oberon, objects for communication are of type \fIRecord\fP.
\fICreateRecord\fP creates a new object, that previously was defined in Tcl. 
\fItcltypename\fP
specifies the typename of the object, that has to be created.
.PP
For dealing with such objects, TclTk provides some procedures in order to
assign or retrieve values (\fIGetStringSlot\fP ... \fISetListSlot\fP). 
A list assigned to a slot in Tcl is converted to the
coressponding list type \fIIntList\fP, \fIRealList\fP, \fIStringList\fP or
\fIBoolList\fP, and
vice versa. The procedure used has to match the declared type of the 
slot, she should operate on. I.e. a slot declared of type \fIinteger\fP
can only be accessed by \fIGetIntSlot\fP or \fISetIntSlot\fP.
.PP
Build upon these objects, \fICallProc\fP offers a possibility to call a Tcl 
procedure from within Oberon.
The Tcl procedure expects a object as argument that is given in \fIarguments\fP
and returns another object on 
her part, which is accessible in \fIresult\fP. \fBNIL\fP objects in Tcl are 
denoted by "" or {}. Note the object passed to the Tcl procedure gets
deleted after the procedure returns.
.SH Events
Events generated by the X-server can be handled with proper Tcl scripts, that
previously was uploaded into the server.
Therewith part of the events can be handled locally and only the interesting
data have to be transmitted back to Oberon. To do so, there are events. 
Events raised in Tcl are delivered in Oberon by \fIEvents.Raise\fP and 
vice versa. Beside
their signaling function, events serve as carrier for communication objects.
.PP
For event handling there is another new Tcl command called \fIEvents\fP:
.TP
\fBEvents define \fP?\fIvar\fP?
Acts like \fIEvents.Define\fP by generating a new event type denoted by a name. 
If \fIvar\fP is
given the name will be stored there, otherwise it is returned as result.
According to this name there is a object of type \fIEvents.EventType\fP
generated, that will be used as event type of an event, that is transmitted from
Tcl to Oberon. The reaction for this type defaults to \fIignore\fP in Tcl and
to \fIdefault\fP in Oberon.
.TP
\fBEvents raise\fP \fItypename message record\fP
this command option is used to raise an event with \fItypename\fP as type. \fImessage\fP
is a short text that is delivered with the event and \fIrecord\fP is the name
of the communication object, that gets delivered too. 
The event gets transmitted to Oberon, where it is
read in as event of type \fIEvent\fP and
delivered with a call to \fIEvents.Raise\fP. In addition, the server evaluates
the registered Tcl handlers (therefore the reaction defaults to \fIignore\fP).
.TP
\fBEvents handler\fP \fItypename procname\fP
is used to install the Tcl procedure \fIprocname\fP as handler for events with 
\fItypename\fP as type of the event type.
.TP
\fBEvents gethandlers\fP \fItypename\fP
returns all the handlers for an event type of name \fItypename\fP.
.TP
\fBEvents removehandlers\fP \fItypename\fP
removes all handlers for the event type given by \fItypename\fP and sets the
reaction to \fIdefaul\fPt.
.TP
\fBEvents ignore\fP \fItypename\fP
acts like removehandlers but sets the reaction to \fIignore\fP.
.PP
A handler for an event type is a Tcl procedure with three arguments:
.PP
     proc procname {typename message record} body
.PP
The arguments equals the ones given to \fIEvents raise\fP.
.PP
Events raised in Tcl are delivered in Oberon as events of type \fIEvent\fP. The transmitted
communication object can be found in record. Receiving and raising events 
in Oberon can be done
in the traditional fashion with the procedures provided by the module \fIEvents\fP.
.PP
\fIGetEventType\fP retrieves the object of type \fIEvents.EventType\fP that is used as
event type denoted by \fItcltypename\fP. 
.PP
To receive an event within a task, 
\fIEventConditions\fP can be used. \fICreateEventConditions\fP therefore helps to 
create event conditions
for event types transmitted from Tcl to Oberon within a communication object.
For every slotname given in \fIslotnames\fP a event condition is produced and 
assigned in the
same order to \fIconditions\fP as the names are given. In addition, 
every condition is included in \fIconditionset\fP.
Note each value of the slots given in \fIslotnames\fP have to contain a
valid slotname which was defined in Tcl by \fIEvents define\fP.
\fIDropEventConditions\fP calls
\fIEventConditions.Drop\fP for every condition in \fIconditions\fP.
.PP
In addition to event types created by the \fIEvents define\fP command, 
existing event types can be prepared to use for communication with Tcl.
This is done
by \fIDefine\fP that also creates a unique \fItcltypename\fP for the given \fItype\fP. 
\fIDefine\fP can be called multiple for one type with different interpreters.
.PP
\fIHandler\fP
defines an additional Tcl procedure for handling events of event type \fItype\fP,
that previously was defined by \fIDefine\fP or \fIEvents define\fP.
.SH EXAMPLE
Handling with communication objects looks like this:
.PP
.Pg
Records define MyType \\
    slot1 integer \\
    slot2 string \\
    slot3 { \\
        slot31 list<string> \\
        slot32 boolean \\
    }

Records create MyType var1 var2

Records set var1 \\
    slot1 1234 \\
    slot3.slot32 1

Records get var1
-> {slot1 1234} {slot2 {}} {slot3 {{slot31 {}} {slot32 1}}}

Records get var1 slot1
-> 1234

Records typename var1
-> MyType
.Pe
.PP
A Tcl program, that is used to provide a GUI for Oberon, therefore looks like this:
The type definition of the objects can reside anywhere in the script, 
but it is a good practice to define all object types at the beginning.
To get the thing started, the defined event types must be known to the
oberon application. To do so, a communication object can be used that is
returned by a procedure so that the Oberon application can do a call to
\fICallProc\fP to get the object:
.PP
proc StartUp { record } {
    Records define UsedEvents \\
        ev1 string \\
        ev2 string \\
        ev3 string

    Records create UsedEvents myevents

    Records set myevents \\
        ev1 [Events define] \\
        ev2 [Events define] \\
        ev3 [Events define]

    # if ev3 is used for incoming events,
    # a handler is needed
    Events handler [Records get myevents ev3] MyHandler
    return myevents
.br
}

proc MyHandler {typename msg record} {
    puts "it works: $msg"

    # assuming, the record is of type MyType, we can write
    puts "slot1: [Records get $record slot1]"
.br
} 
.Pe
An event may then be raised in the following manner:
.Pg
# ...
Events raise [Records get myevents ev1] mymessage var2
.Pe
.PP
The text for the Oberon program may be structured like this:
.Pg
TYPE Slotname = ARRAY 5 OF CHAR;

PROCEDURE Init();
.br
    VAR
        cr: Coroutines.Coroutine;
        task: Tasks.Task;
        result: TclTk.Record;
        interp: TclTk.Interpreter;
BEGIN
    (* create a server via Open and eval the script for the GUI *)
        (* 
         * Note a script like "source myscript.tcl" is much more 
         * faster then sending the script accross the network.
         *
         *)

    (* start the whole thing and get the object *)
    IF TclTk.CallProc(interp, "StartUp", NIL, result) THEN
        MyTask(cr, interp, result);
        Tasks.Create(task, cr);
    END;
END Init;

PROCEDURE MyTask(VAR cr: Coroutines.Coroutine; 
                 interp: TclTk.Interpeter;
                 record: TclTk.Record);
    CONST
        ev1 = 0; ev2 = 1;
        events = 2;
    VAR
        tkeventtype: TclTk.EventType;
        tkevent, event: TclTk.Event;
        ev3: Events.EventType;
        slotnames: ARRAY events OF Slotname;
        conditions: ARRAY events OF Conditions.Condition;
        cset: Conditions.ConditionSet;
BEGIN
    (* create conditions for incoming events from Tcl *)
    slotnames[ev1] := "ev1";
    slotnames[ev2] := "ev2";
    Conditions.CreateSet(cset);
    TclTk.CreateEventConditions(interp, record,
            slotnames, conditions, cset);

    (* create and init an event in order to send it to Tcl *)
    NEW(event);
    TclTk.GetStringSlot(record, "ev3", tkeventtype);
    TclTk.GetEventType(interp, tkeventtype, event.type);
    TclTk.CreateRecord(event.record, interp, "MyType");

    SYSTEM.CRSPAWN(cr);

    (* lets wait *)
    LOOP
        Tasks.WaitForOneOf(cset);

        IF EventConditions.TestAndGet(conditions[ev1], tkevent) THEN
            (* do what you wonna do *)
        ELSIF EventConditions.TestAndGet(conditions[ev2], tkevent) THEN
            (* assign values to event.record *)
            TclTk.SetIntSlot(event.record, "slot1", 12345);

            (* transmit the event to Tcl *)
            Events.Raise(event);
        END;
    END;

    TclTk.DropEventConditions(conditions);
    TclTk.Close(interp);
    Tasks.Terminate;
END MyTask;
.Pe
.SH DIAGNOSTICS
Some errors lead to events of type ErrorEvent that are passed to RelatedEvents and
addresses either a object of type Interpreter or a object named errors. Following error codes
are implemented:
.Tb connectionRefused
.Tp connectionFailed
there is no port listener at the given address.
.Tp connectionRefused 
either the listener fails to exec the server \fItcltks\fP,
the transmitted password from $HOME/.tcltks is not valid
or the given arguments to Open are not valid, i.e. you are
not authorized to the given display.
.Tp connectionBroken    
the connection to the server is closed due to an error.
.Tp sendFailed          
there was an error while writing in the stream that connects
oberon with the server.
.Tp receiveFailed       
there was an error while reading from the stream that connects
oberon with the server.
.Tp serverExit
the exit command was called in the Tcl interpreter, so the
connection will be closed.
.Tp protocolError       
indicates an internal error that was caused by an unexpected 
value or field, read from the stream.
.Tp tkError 
a script that was asynchronously evaluated by Tk causes an error.
.Tp callProcError
the called Tcl procedure causes an error or no
valid object was returned by proc.
.Te
.PP
Several errors which results from programming mistakes are covered by
assertions:
.IP \(bu
the \fIresult\fP argument, given to \fIEval\fP or \fIEvalStream\fP, must
not be \fBNIL\fP.
.IP \(bu
\fICreateRecord\fP checks, if \fItcltypename\fP previously was defined.
.IP \(bu
Every procedure for slot handling checks, if \fIname\fP is valid for the
given \fIrecord\fP and if \fIvalue\fP match the declared type of the slot.
.IP \(bu
\fIGetEventType\fP checks, if \fItcltypename\fP is an valid name for a event type.
.IP \(bu
\fIHandler\fP checks, if \fItype\fP was previously defined, either by a call to 
\fIDefine\fP or \fIEvents define\fP.
.IP \(bu
\fICreateEventConditions\fP compares the length of \fIslotnames\fP against 
\fIconditions\fP to test, if all created conditions fits into \fIconditions\fP.
In addition, \fIconditionset\fP must not be \fBNIL\fP.
.SH ENVIRONMENT
.Tb \fBTCLTKSERVER\fP
.Tp \fBTCLTKSERVER\fP
specifies hostname and port of the port listener which is to contact.
Any form of \fIhostname:portno\fP is valid, where \fIhostname\fP is a
symbolic internet address and \fIportno\fP the number of the port.
.Tp \fBDISPLAY\fP
on the local machine it is taken for computing the hostname where
the port listener resides. On the server machine it specifies the
display, which is to use, if an empty string is passed to \fIOpen\fP for the
\fIdisplay\fP argument.
.Tp \fBTCLTKS_DIR\fP
specifies the directory where \fItcltks\fP and the script
\fItcltks.tcl\fP can be found. If not present, the current
working directory
is used. Note this variable must be defined
on the machine the listener runs.
.Te
.SH FILES
.Tb $HOME/.tcltks
.Tp $HOME/.tcltks 
password file for accessing a server
.Te
.SH SEE ALSO
.Tb EventConditions(3)
.Tp EventConditions(3)
conditions which allow to wait until a event is raised.
.Tp Events(3)
global event handling
.Tp RelatedEvents(3)
relate events to objects
.Tp Resources(3)
cooperative termination handling
.Te
.SH AUTHOR
Oliver Engelhardt
.\" ---------------------------------------------------------------------------
.\" $Id: TclTk.3,v 1.3 2003/07/10 09:27:08 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: TclTk.3,v $
.\" Revision 1.3  2003/07/10 09:27:08  borchert
.\" internal formatting changed
.\"
.\" Revision 1.2  1996/07/22 13:19:29  borchert
.\" - AUTHOR added
.\" - some minor fixes for man3tohtml
.\"
.\" Revision 1.1  1996/07/22  12:51:29  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
