.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-1995 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH UntaggedStorage 3 "Last change: 17 November 1995" "Release 0.5" "Ulm's Oberon System"
.SH NAME
UntaggedStorage \- interface for storage not affected by garbage collection
.SH SYNOPSIS
.Pg
TYPE Address = Types.UntracedAddress;
TYPE Size = Types.Size;
.sp 0.3
CONST Nil = SYSTEM.VAL(Address, NIL);
.sp 0.3
TYPE Status = POINTER TO StatusRec;
TYPE StatusRec =
   RECORD
      (Objects.ObjectRec)
      allocated: Size;
      consumed: Size;
      chunksize: Size;
   END;
.sp 0.7
TYPE NewProc = PROCEDURE (size: Size) : Address;
TYPE DisposeProc = PROCEDURE (ptr: Address);
TYPE UseProc = PROCEDURE (ptr: Address; size: Size);
TYPE GetStatusProc = PROCEDURE (VAR status: Status);
TYPE ChunkSizeProc = PROCEDURE (size: Size) : Size;
TYPE Interface =
   RECORD
      new: NewProc;
      dispose: DisposeProc;
      use: UseProc;
      getStatus: GetStatusProc;
      chunkSize: ChunkSizeProc;
   END;
.sp 0.7
PROCEDURE New(size: Size) : Address;
PROCEDURE Dispose(ptr: Address);
.sp 0.7
PROCEDURE Use(ptr: Address; size: Size);
.sp 0.7
PROCEDURE GetStatus(VAR status: Status);
PROCEDURE ChunkSize(size: Size) : Size;
.sp 0.7
PROCEDURE Init(if: Interface);
.sp 0.7
.Pe
.SH DESCRIPTION
.I UntaggedStorage
provides an interface for storage unaffected by a garbage collection.
Objects allocated using \fIUntaggedStorage\fP remain fixed in the
address space and do not belong to the memory regions
controlled by \fIStorage(3)\fP and the garbage collector.
As a consequence, the garbage collector must not be aware of pointers
pointing onto such objects. On the other side, that objects should not
contain pointers originating from \fBNEW\fP or \fBSYSTEM.NEW\fP, because
the garbage collector will not update them. In addition to that, objects
created with \fIUntaggedStorage\fP have no type tag and should be
considered just as an interval of bytes. The compiler options \fBP\fP
and/or \fBO\fP have to be switched off for pointer types pointing to such
objects. This makes it possible for the compiler not to trace these
pointers in pointer lists and to reject type tests.
.PP
.I Init
is to be called during startup by the module which is
implementing this interface.
All interface procedures have to follow the semantics described below.
.PP
.I New
tries to allocate an interval with the length of \fIsize\fP bytes.
On success, a reference to the requested region is returned.
Otherwise, \fIStorage.GarbageCollection\fP is called and \fINew\fP
retries the allocation. Finally, \fBNil\fP is returned when
not enough memory is available.
.PP
.I Dispose
releases a memory region which has been created earlier by \fINew\fP.
The parameter \fIptr\fP is expected to represent the start of the interval.
.PP
.I Use
puts the interval \fB[\fP\fIptr\fP, \fIptr\fP+\fIsize\fP\fB)\fP into the
free list of \fINew\fP for further consumption. This interval must not
be allocated earlier using \fINew\fP, \fBNEW\fP or
\fBSYSTEM.NEW\fP, but it can be every piece of memory which the garbage
collector is not aware of. This example reuses a global static array:
.Pg
CONST size = 1024;
VAR globalArray: ARRAY size OF BYTE;
.sp 0.3
(* ... *)
.sp 0.3
UntaggedStorage.Use(SYSTEM.VAL(UntaggedStorage.Address,
                               SYSTEM.ADR(globalArray)),
                    SYSTEM.SIZE(globalArray));
.Pe
.PP
.I GetStatus
returns a pointer to a record which contains information
about the current storage status.
The \fIchunksize\fP component contains the size of new memory regions which
will be requested from the operating system when more memory is needed.
The value returned in \fIallocated\fP represents the
total number of bytes which are currently under control of 
\fIUntaggedStorage\fP, while \fIconsumed\fP contains the number of bytes
which are currently in use (\fIconsumed\fP<=\fIallocated\fP).
.PP
.I ChunkSize
allows to change the current chunk size. The chunk size is the size
of new memory chunks when the storage allocator requests more memory
from the system.
There may be several system-dependent requirements which the chunk size has
to meet, such as concerning address space utilization or the system's page
size:
\fIChunkSize\fP rounds \fIsize\fP to the next higher possible value, if
the given parameter can not be used as new chunk size
(generally, it should be a good idea when \fIsize\fP is a power of 2 and
greater than the page size).
As result, the computed value is returned.
In case of \fIsize\fP = \fB0\fP, \fIChunkSize\fP only returns the
current chunk size and no change is made. 
.br
Especially, when allocating objects with sizes greater than
the page size, changing the chunk size can reduce the amount of memory
needed from the operating system and increase performance.
.SH DIAGNOSTICS
Calls to all interface procedures before \fIInit\fP
lead to immediate program termination via \fIProcess.Exit\fP (exit code
\fB255\fP).
.SH "SEE ALSO"
.Tb SysStorage(3)
.Tp Process(3)
process termination
.Tp Storage(3)
storage allocating interface for the compiler
.Tp SysStorage(3)
storage allocator with copying garbage collection.
.Tp oc(1)
compiler options
.Te
.SH AUTHOR
Hansj\*org N\*agele, University of Ulm
.\" ---------------------------------------------------------------------------
.\" $Id: UntaggedStorage.3,v 1.3 1995/11/17 13:22:02 naegele Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: UntaggedStorage.3,v $
.\" Revision 1.3  1995/11/17  13:22:02  naegele
.\" interface procedure SetChunkSize (size: Size) : BOOLEAN
.\" changed to          ChunkSize (size: Size) : Size
.\"
.\" Revision 1.2  1995/11/09  14:52:20  borchert
.\" minor bug fix in example
.\"
.\" Revision 1.1  1994/07/01  09:07:42  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
