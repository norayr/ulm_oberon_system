.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-2005 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH SysStacks 3 "Last change: 24 August 2005" "Release 0.5" "Ulm's Oberon System"
.SH NAME
SysStacks \- examination of coroutine stacks
.SH SYNOPSIS
.Pg
TYPE Stack = RECORD END;
.sp 0.7
PROCEDURE Open(VAR stack: Stack; cr: Coroutines.Coroutine);
PROCEDURE Next(VAR stack: Stack;
               VAR base, top, pc: SysTypes.UntracedAddress) : BOOLEAN;
.Pe
.SH DESCRIPTION
.I SysStacks
offers a system-independent interface for the examination of
coroutine stacks. This is used by the garbage collection
(see \fISysStorage(3)\fP)
and may find applications in debugging scenarios.
.I Open
opens the stack of the coroutine \fIcr\fP for examination.
.I Next
returns, beginning from the topmost procedure invocation, the
registers pointing to the beginning of the activation record (\fIbase\fP),
the end of the activation record (\fItop\fP), and the associated
program counter (\fIpc\fP). Multiple calls of \fINext\fP allow
to advance to the calling procedures until the begin of the stack
is reached where \fINext\fP returns \fBFALSE\fP.
.PP
Please note that neither \fIOpen\fP nor \fINext\fP allocate storage
using \fBNEW\fP or other methods. Hence, both operations can be
safely called during garbage collections or other critical moments.
.SH "SEE ALSO"
.Tb SysStorage(3)
.Tp Memory(3)
address space management
.Tp SysModules(3)
may be used to map program counters into module / procedure combinations
.Tp SysStorage(3)
garbage collection
.Te
.\" ---------------------------------------------------------------------------
.\" $Id: SysStacks.3,v 1.2 2005/08/24 08:51:07 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: SysStacks.3,v $
.\" Revision 1.2  2005/08/24 08:51:07  borchert
.\" Stack is now a record instead of a pointer to a record
.\" to avoid storage allocation during the garbage collection
.\"
.\" Revision 1.1  2000/11/17 19:02:40  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
