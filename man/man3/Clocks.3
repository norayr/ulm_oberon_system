.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-2004 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH Clocks 3 "Last change: 23 April 2004" "Release 0.5" "Ulm's Oberon System"
.SH NAME
Clocks \- general interface for clocks and timers
.SH SYNOPSIS
.Pg
TYPE Clock = POINTER TO ClockRec;
TYPE ClockRec = RECORD (Services.ObjectRec) END;
.sp 0.3
CONST settime = 0; timer = 1; passed = 2;
TYPE CapabilitySet = SET; (* OF [settime..passed] *)
TYPE GetTimeProc = PROCEDURE (clock: Clock; VAR time: Times.Time);
TYPE SetTimeProc = PROCEDURE (clock: Clock; time: Times.Time);
TYPE PassedProc = PROCEDURE (clock: Clock; time: Times.Time) : BOOLEAN;
TYPE TimerOnProc = PROCEDURE (clock: Clock; time: Times.Time;
                              event: Events.Event);
TYPE TimerOffProc = PROCEDURE (clock: Clock);
TYPE GetPriorityProc = PROCEDURE (clock: Clock;
                                  VAR priority: Priorities.Priority);
TYPE Interface = POINTER TO InterfaceRec;
TYPE InterfaceRec =
   RECORD
      (Objects.ObjectRec)
      gettime: GetTimeProc;
      settime: SetTimeProc;
      passed: PassedProc;
      timeron: TimerOnProc;
      timeroff: TimerOffProc;
      getpriority: GetPriorityProc;
   END;
.sp 0.7
VAR system: Clock; (* the clock of the operating system *)
.sp 0.7
CONST cannotSetTime = 0; (* SetTime not implemented *)
CONST cannotSetTimer = 1; (* timer not implemented *)
CONST errorcodes = 2;
TYPE ErrorEvent = POINTER TO ErrorEventRec;
TYPE ErrorEventRec =
   RECORD
      (Events.EventRec)
      errorcode: SHORTINT;
   END;
VAR errormsg: ARRAY errorcodes OF Events.Message;
VAR error: Events.EventType;
.sp 0.7
PROCEDURE Init(clock: Clock; if: Interface; caps: CapabilitySet);
PROCEDURE Capabilities(clock: Clock) : CapabilitySet;
.sp 0.3
PROCEDURE CreateStaticClock(VAR clock: Clock);
.sp 0.3
PROCEDURE GetTime(clock: Clock; VAR time: Times.Time);
PROCEDURE SetTime(clock: Clock; time: Times.Time);
PROCEDURE Passed(clock: Clock; time: Times.Time) : BOOLEAN;
.sp 0.3
PROCEDURE TimerOn(clock: Clock; time: Times.Time; event: Events.Event);
PROCEDURE TimerOff(clock: Clock);
PROCEDURE GetPriority(clock: Clock; VAR priority: Priorities.Priority);
.Pe
.SH DESCRIPTION
.I Clocks
provides an interface for clocks and associated timers.
A clock is a source which returns a current time.
.LP
.I Init
initializes a newly created clock and associates it with the given
interface \fIif\fP and \fIcaps\fP.
The interface procedures are expected to meet the specifications
following:
.Is "\fIclock\fP: \fIClock\fP"
.If gettime "; \fBVAR\fP \fItime\fP: \fITimes.Time\fP"
return the current time.
.If settime "; \fItime\fP: \fITimes.Time\fP"
set the current time to \fItime\fP.
This procedure needs only to be provided if \fIsettime\fP is
given in the set of capabilities.
.If passed "; \fItime\fP: \fITimes.Time\fP" "\fBBOOLEAN\fP
returns \fBTRUE\fP if \fItime\fP has already passed.
This procedure is optional and needs only to be provided if
\fIpassed\fP is given in the set of capabilities. This
interface procedure allows to reduce the number of \fIgettime\fP
invocations if the last time returned by \fIgettime\fP is compared
first against \fItime\fP before the current time is considered.
This is useful if invocations of \fIgettime\fP are
more expensive than ordinary procedure calls.
.If timeron "; \fItime\fP: \fITimes.Time\fP; \fIevent\fP: \fIEvents.Event\fP"
cause \fIevent\fP to be raised if the given time is reached.
Only one alarm time and one event has to be maintained.
New settings override older calls to \fItimeron\fP
if \fItimeron\fP is called multiple times.
\fItimeron\fP is expected to raise \fIevent\fP immediately
if \fItime\fP lies in the past.
This procedure needs only to be provided if \fItimer\fP is
given in the set of capabilities.
.If timeroff ""
switch off the timer.
.If getpriority "; \fBVAR\fP \fIpriority\fP: \fIPriorities.Priority\fP"
return the priority of the timer.
This is defined to be the minimal priority
during the processing of events passed to \fItimeron\fP.
\fIPriorities.base\fP is to be returned if there is no minimal
priority (e.g. for static clocks).
.Ef
.LP
\fICapabilities\fP returns the set of capabilities of \fIclock\fP.
Note that \fIPassed\fP can be called in any case whether \fIpassed\fP
is set or not.
.LP
\fICreateStaticClock\fP creates and initializes a static clock.
Static clocks return the last time setting of \fISetTime\fP.
.LP
\fIGetTime\fP returns the current time of \fIclock\fP.
\fISetTime\fP sets the current time of \fIclock\fP to \fItime\fP.
\fIPassed\fP returns \fBTRUE\fP if \fItime\fP has already been
passed.
.LP
\fITimerOn\fP causes \fIclock\fP to raise \fIevent\fP if \fItime\fP
is reached.
Multiple calls override previous settings.
\fITimerOff\fP switches off the timer.
\fIGetPriority\fP returns the priority of the associated timer.
This is the minimal priority when events which has been passed to
\fITimerOn\fP are raised.
.LP
\fIClocks\fP exports \fIsystem\fP which is expected to
be initialized by a system dependent module to represent the
clock of the operating system.
Initially, \fIsystem\fP is initialized as a static clock.
.SH DIAGNOSTICS
Errors lead to events which are passed to \fIRelatedEvents(3)\fP
and related to the clock.
By default, error events are queued.
Following error codes are implemented:
.Tb cannotSetTimer
.Tp cannotSetTime
\fISetTime\fP is not implemented for the given clock.
.Tp cannotSetTimer
The given clock does not support a timer.
.Te
.PP
An assertion of \fIInit\fP fails if the given clock has not been
initialized by \fIServices.Init\fP.  Various assertions that verify that
all required interface procedures passed to \fIInit\fP are non-\fBNIL\fP.
.SH "SEE ALSO"
.Tb RelatedEvents(3)
.Tp Events(3)
event handling
.Tp RelatedEvents(3)
handling of error events
.Tp Services(3)
definition of type-independent extensions
.Tp TimeConditions(3)
conditions which allow to wait for a given time
.Tp Times(3)
representations of time values
.Tp UnixClock(3)
reinitializes \fIsystem\fP (if imported)
.Te
.\" ---------------------------------------------------------------------------
.\" $Id: Clocks.3,v 1.8 2004/04/23 06:26:54 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: Clocks.3,v $
.\" Revision 1.8  2004/04/23 06:26:54  borchert
.\" capability passed was missing
.\"
.\" Revision 1.7  2004/02/19 16:03:55  borchert
.\" Passed added
.\"
.\" Revision 1.6  2003/07/10 09:05:39  borchert
.\" typo fixed
.\"
.\" Revision 1.5  1996/09/16 16:17:55  borchert
.\" base type changed from Disciplines.Object to Services.Object
.\"
.\" Revision 1.4  1992/03/24  08:26:10  borchert
.\" SystemClock renamed to UnixClock
.\"
.\" Revision 1.3  1992/01/13  08:08:38  borchert
.\" error handling changed
.\"
.\" Revision 1.2  1992/01/04  09:48:18  borchert
.\" StaticClock renamed to CreateStaticClock
.\" TimerProc renamed to TimerOnProc
.\" reference to SystemClock(3) added
.\"
.\" Revision 1.1  1992/01/02  10:52:50  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
