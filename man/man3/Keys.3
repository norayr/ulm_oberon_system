.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-1995 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH Keys 3 "Last change: 16 September 1996" "Release 0.5" "Ulm's Oberon System"
.SH NAME
Keys \- key-based total order relations
.SH SYNOPSIS
.Pg
TYPE Key = POINTER TO KeyRec;
TYPE KeyRec = RECORD (PersistentDisciplines.ObjectRec) END;
TYPE Value = POINTER TO ValueRec;
TYPE ValueRec = RECORD (PersistentDisciplines.ObjectRec) END;
.sp 0.3
ExtractProc = PROCEDURE (object: Services.Object;
                         key: Key; VAR keyval: Value);
CompareProc = PROCEDURE (key: Key; keyval1, keyval2: Value) : INTEGER;
.sp 0.7
PROCEDURE DefineService(name: ARRAY OF CHAR;
                        type: Services.Type;
                        compare: CompareProc;
                        VAR service: Services.Service);
PROCEDURE Init(key: Key; service: Services.Service);
PROCEDURE GetService(key: Key; VAR service: Services.Service);
.sp 0.3
PROCEDURE Support(service: Services.Service;
                  for: Services.Type;
                  extract: ExtractProc);
.sp 0.3
PROCEDURE Supported(object: Services.Object; key: Key) : BOOLEAN;
PROCEDURE Compare(key: Key; object1, object2: Services.Object) : INTEGER;
PROCEDURE Extract(object: Services.Object; key: Key; VAR keyval: Value);
.sp 0.3
PROCEDURE Compatible(keyval: Value; key: Key) : BOOLEAN;
PROCEDURE CompareKeyValues(key: Key; keyval1, keyval2: Value) : INTEGER;
.Pe
.SH DESCRIPTION
A key consists of
.IP \(bu
a set of attributes which can be extracted from
various kinds of objects, and
.IP \(bu
the definition of a total order relation for values of that key.
.LP
A key allows to sort a set of heterogeneous objects
if the specific key is supported for all kinds of objects
in the set.
Note that keys are not necessarily identifying in
the sense of the relational database theory and
that more than one key may be supported for one kind of objects.
Using the mechanism of \fIServices(3)\fP,
it is possible to define and support keys for objects types
without modifying their associated modules.
.LP
Both, keys and key values, are persistent objects,
i.e. extensions of \fIPersistentDisciplines.Object\fP.
.SS Client roles
There are four types of modules in the context of \fIKeys\fP
(\fIXXX\fP, \fIYYY\fP, and \fIZZZ\fP are place holders
for arbitrary names):
.Tb YYYKeysForXXXs
.Tp XXXs
a module which defines an extension of \fIServices.Object\fP
named \fIXXXs.XXX\fP but needs not to be aware of \fIKeys\fP.
.Tp YYYKeys
defines a key,
i.e. an attribute set and a total order relation.
Note that this type of modules does not need to know anything
about the later to be supported object types (e.g. \fIXXXs\fP).
\fIYYYKeys\fP is responsible for providing the
interface procedures of \fIPersistentObjects\fP for
its extensions of \fIKey\fP and \fIValue\fP.
.Tp YYYKeyForXXXs
defines how to extract a specific key (e.g. \fIYYYKeys.Key\fP)
from a specific kind of objects (e.g. \fIXXXs.XXX\fP).
.Tp ZZZ
is a module which compares heterogeneous objects
by using a key.
This module does not need to know any object-specific or
key-specific details.
.Te
.SS Definition of a key
Modules of the type \fIYYYKeys\fP have
to call \fIDefineService\fP during their initialization.
The name of the service should be that of the module
(e.g. "YYYKeys"), \fItype\fP is the \fIServices.Type\fP
of the associated key values (e.g. \fIYYYKeys.Value\fP).
The \fIcompare\fP interface procedure has to
define a total order relation for the key values
defined by \fIYYYKeys\fP.
\fIDefineService\fP creates and returns a service
which has later to be passed to \fIInit\fP for
each created key (of type \fIYYYKeys.Key\fP).
.LP
Note that \fIKeys\fP guarantees that the key value
parameters of the \fIcompare\fP interface procedure
are extensions of \fIYYYKeys.Value\fP.
The returned integer value of \fIcompare\fP must
be less than, equal to, or greater than zero
if \fIkeyval1\fP is found, respectively, to be less than,
equal to, or greater than \fIkeyval2\fP.
.LP
\fIGetService\fP allows to retrieve the associated service of a key.
.SS Supporting a key
Modules which support a specific key for
a specific kind of objects (e.g. \fIYYYKeyForXXXs\fP)
have to call \fISupport\fP during their
initialization time to pass their \fIextract\fP interface
procedure.
The \fIservice\fP parameter is the service
named after that module which defines the key
(e.g. "YYYKeys"), and \fIfor\fP is the \fIServices.Type\fP
of \fIXXXs.XXX\fP.
The \fIextract\fP interface procedure
gets an object which is guaranteed to be an
extension of \fIXXXs.XXX\fP,
a key which is an extension of \fIYYYKeys.Key\fP,
and has to return a key value which must be an
extension of \fIYYYKeys.Value\fP.
.PP
Note that \fIKeys\fP
supports implicitly all keys for their associated key values.
.SS Using keys
.I Compare
allows to compare two objects by using \fIkey\fP and
returns an integer value which is
less than, equal to, or greater than zero
if \fIobject1\fP is found, respectively, to be less than,
equal to, or greater than \fIobject2\fP regarding \fIkey\fP.
Note that \fICompare\fP requires \fIkey\fP to
be supported for the types of \fIobject1\fP and
\fIobject2\fP.
This may be checked for by \fISupported\fP.
.LP
Key values may be compared not
only by \fICompare\fP but also (somewhat faster)
directly by \fICompareKeyValues\fP.
Note that both key values must be compatible to the given key.
This may be checked for by \fICompatible\fP.
.LP
.I Extract
allows to extract a key value for \fIkey\fP from \fIobject\fP.
\fBNIL\fP is returned if \fIkey\fP is not supported
for the type of \fIobject\fP.
.SH DIAGNOSTICS
All kinds of errors lead to failed assertions
(with the exception of \fIExtract\fP which returns \fBNIL\fP):
.IP \(bu
\fIDefineService\fP checks \fItype\fP and \fIcompare\fP
for being non-\fBNIL\fP.
.IP \(bu
\fIInit\fP asserts that \fIservice\fP is non-\fBNIL\fP.
.IP \(bu
\fIGetService\fP requires \fIkey\fP to be initialized by \fIInit\fP.
.IP \(bu
\fISupport\fP asserts that \fIservice\fP originates
from \fIKeys\fP, i.e. that \fIservice\fP is the return value
of a former call of \fIDefineService\fP.
.IP \(bu
\fICompare\fP requires that \fIkey\fP is supported
for the types of \fIobject1\fP and \fIobject2\fP.
.IP \(bu
\fICompareKeyValues\fP checks that both key values, \fIkeyval1\fP
and \fIkeyval2\fP, are compatible to \fIkey\fP.
.IP \(bu
The return value of the \fIextract\fP interface
procedure is always checked to be an extension of
the corresponding key value type
(e.g. \fIYYYKeys.Value\fP).
.SH "SEE ALSO"
.Tb PersistentObjects(3)
.Tp PersistentObjects(3)
definition of persistent objects
.Tp Services(3)
type system and services
.Te
.\" ---------------------------------------------------------------------------
.\" $Id: Keys.3,v 1.2 1996/09/16 16:21:36 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: Keys.3,v $
.\" Revision 1.2  1996/09/16  16:21:36  borchert
.\" - CompareKeyValues added
.\" - minor typos corrected
.\"
.\" Revision 1.1  1995/03/13  09:56:20  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
