.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-2005 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH Plotters 3 "Last change: 11 April 2005" "Release 0.5" "Ulm's Oberon System"
.SH NAME
Plotters \- abstraction for simple plotters
.SH SYNOPSIS
.Pg
TYPE Plotter = POINTER TO PlotterRec;
TYPE PlotterRec = RECORD (Services.ObjectRec) END;
.sp 0.7
CONST solid = 0;
CONST dotted = 1;
CONST dotdashed = 2;
CONST shortdashed = 3;
CONST longdashed = 4;
CONST lineModes = 5;
TYPE LineMode = SHORTINT; (* solid ... *)
.sp 0.7
CONST setspace = 0;
CONST erase = 1;
CONST string = 2;
CONST linemodes = 3;
CONST linewidth = 4;
TYPE CapabilitySet = SET; (* OF setspace, erase ... *)
.sp 0.7
TYPE Description = POINTER TO DescriptionRec;
TYPE DescriptionRec =
      RECORD
         (Objects.ObjectRec)
         xmin, ymin, xmax, ymax: INTEGER; (* maximal supported range *)
      END;
.sp 0.7
TYPE GetSpaceProc = PROCEDURE (
      plotter: Plotter;
      VAR xmin, ymin, xmax, ymax: INTEGER);
TYPE SetSpaceProc = PROCEDURE (
      plotter: Plotter;
      xmin, ymin, xmax, ymax: INTEGER);
TYPE EraseProc = PROCEDURE (plotter: Plotter);
TYPE MoveProc = PROCEDURE (plotter: Plotter; xto, yto: INTEGER);
TYPE LineProc = PROCEDURE (plotter: Plotter; xfrom, yfrom, xto, yto: INTEGER);
TYPE ArcProc = PROCEDURE (
      plotter: Plotter;
      xcenter, ycenter, xstart, ystart, xend, yend: INTEGER);
TYPE CircleProc = PROCEDURE (
      plotter: Plotter; xcenter, ycenter, radius: INTEGER);
TYPE StringProc = PROCEDURE (plotter: Plotter; str: ARRAY OF CHAR);
TYPE SetLineModeProc = PROCEDURE (plotter: Plotter; mode: LineMode);
TYPE SetLineWidthProc = PROCEDURE (plotter: Plotter; width: INTEGER);
TYPE CloseProc = PROCEDURE (plotter: Plotter);
TYPE Interface = POINTER TO InterfaceRec;
TYPE InterfaceRec =
      RECORD
         (Objects.ObjectRec)
         setSpace: SetSpaceProc;
         erase: EraseProc;
         move: MoveProc;
         cont: MoveProc;
         point: MoveProc;
         line: LineProc;
         arc: ArcProc;
         circle: CircleProc;
         string: StringProc;
         setLineMode: SetLineModeProc;
         setLineWidth: SetLineWidthProc;
         close: CloseProc;
      END;
.sp 0.7
PROCEDURE Init(plotter: Plotter; if: Interface;
               caps: CapabilitySet; desc: Description);
PROCEDURE GetCapabilities(plotter: Plotter) : CapabilitySet;
.sp 0.7
PROCEDURE GetSpace(plotter: Plotter;
                   VAR xmin, ymin,
                   xmax, ymax: INTEGER);
PROCEDURE GetMaxSpace(plotter: Plotter;
                      VAR xmin, ymin,
                      xmax, ymax: INTEGER);
PROCEDURE SetSpace(plotter: Plotter;
                   xmin, ymin,
                   xmax, ymax: INTEGER);
.sp 0.7
PROCEDURE Erase(plotter: Plotter);
.sp 0.7
PROCEDURE Move(plotter: Plotter; xto, yto: INTEGER);
PROCEDURE Cont(plotter: Plotter; xto, yto: INTEGER);
PROCEDURE Point(plotter: Plotter; xpoint, ypoint: INTEGER);
PROCEDURE Line(plotter: Plotter; xfrom, yfrom, xto, yto: INTEGER);
PROCEDURE Arc(plotter: Plotter;
              xcenter, ycenter, xstart, ystart, xend, yend: INTEGER);
PROCEDURE Circle(plotter: Plotter; xcenter, ycenter, radius: INTEGER);
PROCEDURE String(plotter: Plotter; str: ARRAY OF CHAR);
PROCEDURE SetLineMode(plotter: Plotter; mode: LineMode);
PROCEDURE SetLineWidth(plotter: Plotter; width: INTEGER);
.sp 0.7
PROCEDURE Close(plotter: Plotter);
.Pe
.SH DESCRIPTION
.I Plotters
provides an abstraction for a very limited set of plotting operations
that are modeled after the Berkeley \fIplot(5)\fP interface.
.LP
A plotter provides a two-dimensional rectangular discrete space whose
dimensions can be retrieved by \fIGetSpace\fP, and, if supported,
changed by \fISetSpace\fP under consideration of the maximal supported
space returned by \fIGetMaxSpace\fP. Note that many plotter implementations
support square areas only, that means they convert rectangular areas
implicitly to the smallest square enclosing them. There is always
a current position defined which is initially (0,0)
in the lower left corner of the plotting space.
.LP
\fIGetSpace\fP, \fIMove\fP, \fICont\fP, \fIPoint\fP, \fILine\fP,
\fIArc\fP, \fICircle\fP, and \fIClose\fP are supported by all implementations.
\fISetSpace\fP, \fIErase\fP, \fIString\fP, and \fISetLineMode\fP are
permitted by some implementations only.  The set of capabilities returned
by \fIGetCapabilities\fP tells which of the optional operations are permitted.
.SS "Client interface"
.I Erase
erases the entire plot area. This is permitted only if \fIerase\fP
belongs to the set of capabilities.
.LP
.I Move
sets the current position to \fIxto\fP, \fIyto\fP.
.LP
.I Cont
draws a line from the current position to \fIxto\fP, \fIyto\fP,
and sets the current position to (\fIxto\fP, \fIyto\fP).
.LP
.I Point
draws a point at the given position and sets the current point to it.
.LP
.I Line
draws a line between the given two points and sets the current point
to (\fIxto\fP, \fIyto\fP).
.LP
.I Arc
draws an arc of a circle with center point (\fIxcenter\fP, \fIycenter\fP),
beginning at (\fIxstart\fP, \fIystart\fP) and going counter-clockwise
to (\fIxend\fP, \fIyend\fP). The current position is undefined after
this operation.
.LP
.I Circle
draws a circle with the given center point and radius. The current
position is undefined after this operation.
.LP
.I String
puts a text string at the current position. The string must not
include newlines. This is permitted only if \fIstring\fP is in
the set of capabilities.
.LP
.I SetLineMode
allows to set the line mode to \fIsolid\fP, \fIdotted\fP,
\fIdotdashed\fP, \fIshortdashed\fP, or \fIlongdashed\fP.
This is permitted only if \fIlinemodes\fP is in the set of
capabilities.
.LP
.I SetLineWidth
changes the line width to \fIwidth\fP. This is permitted only
if \fIlinewidth\fP is in the set of capabilities.
.LP
.I Close
allows to finalize a plot. No operation on the plotter is allowed
afterwards. This operation is implicitly invoked in case of a
termination event (see \fIResources(3)\fP).
.SS "Implementation interface"
.I Init
allows to connect a plotter object with an implementation.
The interface procedures should follow the specifications above
and must be defined if the corresponding capabilities are provided
in \fIcaps\fP. The only exception is \fIclose\fP which can be
set to \fBNIL\fP if it is not needed. \fIdesc\fP contains the
maximal supported rectangular area which is returned by
\fIGetMaxSpace\fP. This is also implicitly the initial plot area.
If the implementation prefers another default area, \fISetSpace\fP
should be called immediately after \fIInit\fP.
.SH DIAGNOSTICS
.I Plotters
does not generate any error events on its own. The invocation
of unsupported operations is caught by assertions. Likewise,
\fIInit\fP performs some sanity checks on the given interface.
.SH "SEE ALSO"
.Tb TurtleGraphics(3)
.Tp Plot5Streams(3)
traditional implementations that generates streams with
plot instructions in the traditional Berkeley format
.Tp TurtleGraphics(3)
simple turtle graphics which is based upon this module
.Tp XPlotters(3)
displays the plot on an X server.
.Te
.\" ---------------------------------------------------------------------------
.\" $Id: Plotters.3,v 1.2 2005/04/11 08:23:05 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: Plotters.3,v $
.\" Revision 1.2  2005/04/11 08:23:05  borchert
.\" SetLineWidth added
.\"
.\" Revision 1.1  2004/04/08 10:12:33  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
