.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-2004 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH DNSRequests 3 "Last change: 13 June 2004" "Release 0.5" "Ulm's Oberon System"
.SH NAME
DNSRequests \- process DNS requests
.SH SYNOPSIS
.Pg
TYPE Context = POINTER TO ContextRec;
TYPE ContextRec = RECORD (Disciplines.ObjectRec) END;
.sp 0.7
TYPE Name = DNSRecords.Name;
TYPE Record = DNSRecords.Record;
TYPE Query = POINTER TO QueryRec;
TYPE QueryRec =
      RECORD
         (Objects.ObjectRec)
         name: Name;
         type: DNSRecords.RRType;
         class: DNSRecords.Class;
      END;
.sp 0.7
CONST noNameServers = 0;
CONST protocolError = 1;
CONST tooManyRetries = 2;
CONST unexpectedResponse = 3;
CONST sendFailed = 4;
CONST timeout = 5;
CONST formatError = 6;
CONST serverFailure = 7;
CONST notImplemented = 8;
CONST refused = 9;
CONST unexpectedResponseCode = 10;
CONST errors = 11;
TYPE ErrorCode = SHORTINT; (* noNameServers... *)
TYPE ErrorEvent = POINTER TO ErrorEventRec;
TYPE ErrorEventRec =
      RECORD
         (Events.EventRec)
         errorcode: ErrorCode;
         query: Query;
         dnsserver: Name;
      END;
VAR errormsg: ARRAY errors OF Events.Message;
VAR error: Events.EventType;
.sp 0.7
PROCEDURE CreateContext(VAR context: Context);
PROCEDURE AddNameServer(context: Context;
                        socket: SysSockets.Socket;
                        name: ARRAY OF CHAR);
.sp 0.7
PROCEDURE EnableRoundRobin(context: Context);
PROCEDURE SetTimeout(context: Context; seconds: INTEGER);
PROCEDURE SetNumberOfRetries(context: Context; retries: INTEGER);
.sp 0.7
PROCEDURE Process(context: Context;
                  name: ARRAY OF CHAR;
                  type: DNSRecords.RRType;
                  class: DNSRecords.Class;
                  VAR header: DNSHeaders.Header;
                  VAR answerRecs, authRecs, addRecs: Record;
                  errors: RelatedEvents.Object) : BOOLEAN;
.Pe
.SH DESCRIPTION
.I DNSRequests
allows to send DNS requests and to wait synchronously for a response.
Each request is to be set in a context which consists of one or more
nameservers and some configuration parameters. Any number of requests
can be processed in parallel.
Within a given context,
.I DNSRequests
takes care of load-balancing and sorting out of non-responsive and
refusing nameservers.
.PP
.I CreateContext
creates a new context with initially no nameservers at all.
.PP
.I AddNameServer
adds a nameserver to a context where \fIsocket\fP is an already connected
socket of type \fISysSockets.dgram\fP. Note that this socket can be of
any protocol family, be it \fISysSockets.pfINET\fP,
\fISysSockets.pfINET6\fP, or \fISysSockets.pfUNIX\fP.
Additionally,
a string \fIname\fP is to be given as printable representation
of the nameserver which can be used in error messages. This is
usually the printable representation of the socket address.
.PP
There is a transitive precedence relation defined over the set of
nameservers belonging to a context. Nameservers who refuse to process
our requests have a lower precedence than those from which we haven't seen
any refusals yet. This being equal, nameservers have a lower precedence
if they had more timeouts than others. That also being equal, nameservers
are preferred if the queue of pending requests is shorter.  Finally,
if all other criterias show no difference, nameservers added earlier with
.I AddNameServer
take precedence.
If a roundrobin mode is selected using \fIEnableRoundRobin\fP, however,
the order of nameservers is changed by each of invocation of \fIProcess\fP.
Note that the maintained counts of refusals and timeouts are reset to
0 as soon successful replies are seen.
.PP
If no valid response comes within the given timelimit, or the nameserver
responds with a refusal, requests are forwarded to the nameserver
with the highest precedence excluding the last nameserver used.
.PP
For each of the nameservers added, a task is running (see \fITasks(3)\fP).
All these tasks are automatically shut down as soon as the context object
terminates (see \fIResources(3)\fP).
.PP
.I SetTimeout
sets the timeout for single request attempts. Note that the total time
for requests processed by \fIProcess\fP can be much longer as this
timeout multiplies with the number of maximal retries. The default
value is 1.
.PP
By default, the maximal number of retries is 2 multiplied with the
number of nameservers.
.I SetNumberOfRetries
allows to change this factor. This gives usually the number of retries
per nameserver but, if precedences play a role because of timeouts and
refusals, it might well happen that individual nameservers are queried
more often and other nameservers are left out.
.PP
.I Process
asks for resource records for \fIname\fP with the given
type (e.g. \fIDNSRecords.a\fP) in the given class (usually
\fIDNSRecords.classIN\fP). If successful, the header is returned along
with the lists of answer, authorization, and additional records.
Note that \fIname\fP must be a fully-qualified domain name. Local
domain names and search lists are not considered.
.SH "SECURITY CONSIDERATIONS"
.I DNSRequests
is unable to verify that response packets come indeed from the
queried nameserver. Any attacker who knows our socket address and
the chosen request id, can forge a response packet which just needs
to arrive first to be considered. To make it harder for attackers to
guess the request id, \fIRandomGenerators.unpredictable\fP is used to
generate them. But this provides some limited defense only in case of
blind-folded attacks.  Note that it is recommended to add name server
sockets using \fIAddNameServer\fP whose ports have been selected by
\fIEphemeralPortRange.GetRandomPort\fP. As these sockets are continually
used during the lifetime of a context, it might be useful to generate
new contexts from time to time.
.SH DIAGNOSTICS
All failures of \fIProcess\fP are represented by error events that
are related to \fIerrors\fP:
.Tb unexpectedResponseCode
.Tp noNameServers
No nameservers have yet been added to the given context.
.Tp protocolError
One of the queried nameservers returned a protocol error.
.Tp tooManyRetries
The maximal number of retries was exhausted.
.Tp unexpectedResponse
An unexpected response packet was received.
This can be the result of responses that come after the timeout
or the result of attempts to forge response packets.
.Tp sendFailed
The send operation failed for one of the sockets.
.Tp timeout
A timeout occurred with one of the nameservers.
.Tp formatError
One of the nameservers was unable to interpret the query.
.Tp serverFailure
One of the nameservers returned a server failure.
.Tp notImplemented
One of the nameservers indicated that this type of query is not implemented.
.Tp refused
One of the nameservers refused to process the query.
.Tp unexpectedResponseCode
An unexpected response code was returned by one of the nameservers.
.Te
.LP
Note that permanent name errors (i.e. \fIDNSHeaders.nameError\fP)
do not lead to error events or to a return of \fBFALSE\fP by \fIProcess\fP.
They are expected to be handled by the resolver who invokes \fIProcess\fP:
.Pg
IF DNSRequests.Process(context, name,
      rrtype, DNSRecords.classIN,
      header, answerRecs, authRecs, addRecs, errors) THEN
   rcode := DNSHeaders.GetResponseCode(header);
   CASE rcode OF
   | DNSHeaders.noError:
         (* handle successful response *)
   | DNSHeaders.nameError:
         (* permanent error;
            error event is to be generated
            or another attempt is to be made using search lists
            or other rules
         *)
   END;
ELSE
   (* temporary error;
      error events have already been generated
   *)
END;
.Pe
.SH "SEE ALSO"
.Tb DNSHeaders(3)
.Tp DNSHeaders(3)
DNS header structure as returned by \fIProcess\fP.
.Tp DNSRecords(3)
definition DNS records as returned by \fIProcess\fP.
.Te
.\" ---------------------------------------------------------------------------
.\" $Id: DNSRequests.3,v 1.2 2004/06/13 08:20:44 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: DNSRequests.3,v $
.\" Revision 1.2  2004/06/13 08:20:44  borchert
.\" typos fixed
.\"
.\" Revision 1.1  2004/03/11 09:24:03  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
