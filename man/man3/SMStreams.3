.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-1995 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH SMStreams 3 "Last change: 10 July 2003" "Release 0.5" "Ulm's Oberon System"
.SH NAME
SMStreams \- bidirectional IPC using shared memory
.SH SYNOPSIS
.Pg
TYPE Stream = POINTER TO StreamRec;
TYPE StreamRec = RECORD (Streams.StreamRec) END;
.sp 0.7
CONST MRingError = 0;
CONST SRingError = 1;
CONST PartnerNotAliveError = 2;
CONST WriteAfterCloseError = 3;
CONST DeadlockError = 4;
CONST NotAloneError = 5;
CONST ConnectionNotReadyError = 6;
CONST errorcodes = 7;
.sp 0.3
TYPE ErrorCode = SHORTINT;
TYPE ErrorEvent = POINTER TO ErrorEventRec;
TYPE ErrorEventRec =
   RECORD
      (Events.EventRec)
      errorcode: ErrorCode;
   END;
.sp 0.3
VAR error: Events.EventType;
VAR errormsg: ARRAY errorcodes OF Events.Message;
.sp 0.7
PROCEDURE Open(VAR s: Streams.Stream;
               filename: ARRAY OF CHAR;
               bufmode: Streams.BufMode;
               errors: RelatedEvents.Object) : BOOLEAN;
PROCEDURE CreateOpenCondition(VAR condition: Conditions.Condition;
                              filename: ARRAY OF CHAR);
PROCEDURE TestAndOpen(VAR s: Streams.Stream;
                      condition: Conditions.Condition;
                      bufmode: Streams.BufMode;
                      errors: RelatedEvents.Object) : BOOLEAN;
.sp 0.7
PROCEDURE Listen(VAR socket: Networks.Socket; filename: ARRAY OF CHAR;
                 size: SysTypes.Size;
                 errors: RelatedEvents.Object) : BOOLEAN;
PROCEDURE CreateSomeSocket(VAR socket: Networks.Socket;
                           VAR address: ARRAY OF CHAR;
                           size: SysTypes.Size;
                           errors: RelatedEvents.Object) : BOOLEAN;
PROCEDURE Release(socket: Networks.Socket);
.sp 0.7
PROCEDURE Accept(socket: Networks.Socket; VAR s: Streams.Stream;
                 bufmode: Streams.BufMode) : BOOLEAN;
PROCEDURE CreateAcceptCondition(s: Streams.Stream;
                                VAR cond: Conditions.Condition);
.sp 0.7
PROCEDURE CreateAddress(VAR address: Networks.Address;
                        filename: ARRAY OF CHAR;
                        size: SysTypes.Size);
PROCEDURE ConvertAddress(address: Networks.Address;
                         VAR filename: ARRAY OF CHAR;
                         VAR size: SysTypes.Size);
PROCEDURE SetAddress(address: Networks.Address;
                     filename: ARRAY OF CHAR;
                     size: SysTypes.Size);
.Pe
.SH DESCRIPTION
.I SMStreams
provides a \fIStreams(3)\fP interface
for bidirectional interprocess communication
and supports \fINetworks(3)\fP.
It uses \fISysMemory.Map\fP
to create a shared memory region in which the
communication takes place, and uses the signals
\fISysSignals.USR1\fP and \fISysSignals.USR2\fP for
synchronization. Thus, the communicating processes must both run
on the same machine and have the same effective user-id.
.LP
.I SMStreams
supports the waiting condition interface provided by
.IR StreamConditions(3) .
.LP
.I Open
tries to create a stream that maps the
file \fIfilename\fP which must have been created
by some other process by
calling \fIListen\fP or \fICreateSomeSocket\fP.
The stream has a memory area of the size which 
was given to \fIListen\fP.
Alternatively, \fICreateOpenCondition\fP and
\fITestAndOpen\fP may be used like the equally
named procedures of \fINetworks(3)\fP.
.LP
.I Listen
creates a file to be mapped into memory and
a socket which may be used later
to wait for incoming connections.
.I CreateSomeSocket
works like \fIListen\fP but takes an unique file name
which has been returned by \fIUnixTmpNames(3)\fP.
.LP
.I Accept
waits for incoming connections for socket \fIsocket\fP.
The socket must have been created and prepared by \fIListen\fP.
When \fIAccept\fP returns, the stream \fIs\fP is connected with the
new communication partner.
.LP
The buffering mode \fIbufmode\fP can be chosen from the modes supplied by
\fIStreams\fP. Please notice that the choice of the right buffering mode is
vital to good performance. Usually, \fIStreams.nobuf\fP is fastest, but not
in every case, e.g. unbuffered bytewise I/O will result in massive 
synchronization of the two processes. On the other hand buffered operation
on large structures will double the amount of data moved around in memory.
Be free to choose different buffering modes for each side of the
communication.
.LP
.I AcceptCondition
creates a condition which evaluates to \fBTRUE\fP
if a subsequent \fIAccept\fP would not block for stream \fIs\fP.
.LP
.I Release
frees the resources used by the socket \fIsocket\fP.
.LP
\fISMStreams\fP supports the interface of \fINetworks(3)\fP:
\fICreateAddress\fP
takes a filename and a memory size and converts it into a newly created
network address. \fIConvertAddress\fP returns the address data for an
\fISMStreams\fP which consists of a filename and a memory size.
\fISetAddress\fP allows to change an existing network address. 
.SH DIAGNOSTICS
All procedures return
.B FALSE
in case of errors
and relate their error events to \fIerrors\fP .
.LP
\fIAccept\fP relates its errors to stream \fIs\fP.
By default, these events are being queued.
.PP
Errorcodes:
.sp 0.7
.Tb ConnectionNotReadyError 
.Tp MRingError
The first communication area could not be created. Check if size is >0.
.Tp SRingError
The second communication area could not be created. Check if size is >0.
.Tp PartnerNotAliveError
An operation did not reach the other side because it has
ceased to exist.
.Tp WriteAfterCloseError
The other side has already closed the stream when a write operation
was attempted.
.Tp DeadlockError
A deadlock situation occurred.
.Tp NotAloneError
Some other process has already mapped the connection file with the same
opening procedure.
.Tp ConnectionNotReadyError
\fIOpen\fP or \fITestAndOpen\fP
could not establish the connection.
.Te
.SH "SEE ALSO"
.Tb StreamConditions(3)
.Tp Conditions(3)
interface for conditions
.Tp Networks(3)
general abstraction for bidirectional connections
.Tp RelatedEvents(3)
handling of error events
.Tp SysMemory(3)
interface for the \fImmap(2)\fP system call
.Tp Streams(3)
stream operations
.Tp StreamConditions(3)
stream I/O waiting conditions 
.Te
.SH AUTHOR
Till Franke, University of Ulm
.br
some minor revisions are due to Andreas Borchert, University of Ulm
.\" ---------------------------------------------------------------------------
.\" $Id: SMStreams.3,v 1.5 2003/07/10 09:20:55 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: SMStreams.3,v $
.\" Revision 1.5  2003/07/10 09:20:55  borchert
.\" typo fixed
.\"
.\" Revision 1.4  1996/09/16 16:55:57  borchert
.\" non-blocking open & CreateSomeSocket added
.\"
.\" Revision 1.3  1994/02/10  19:13:04  franke
.\" corrected some beauty errors
.\"
.\" Revision 1.2  1994/02/10  19:05:58  franke
.\" Entered the modifications for the Networks interface. SMStreams
.\" contains now sockets.
.\"
.\" Revision 1.1  1993/11/18  14:02:48  borchert
.\" Initial revision
.\"
.\"
.\" ---------------------------------------------------------------------------
