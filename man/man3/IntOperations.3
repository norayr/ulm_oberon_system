'\" e
.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-1996 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH IntOperations 3 "Last change: 3 April 1997" "Release 0.5" "Ulm's Oberon System"
.SH NAME
IntOperations \- generic interface for arithmetic integer operations
.SH SYNOPSIS
.Pg
CONST mod = 5; pow = 6; inc = 7; dec = 8; mmul = 9; mpow = 10; 
CONST odd = 11; shift = 12;
.sp 0.3
TYPE Operation = Operations.Operation;  (* Operations.add..mpow *)
TYPE Operand = POINTER TO OperandRec;
TYPE OperandRec = RECORD (Operations.OperandRec) END;
.sp 0.3
TYPE CapabilitySet = Operations.CapabilitySet; 
   (* SET of [Operations.add..shift] *)
TYPE IsLargeEnoughForProc = PROCEDURE (op: Operations.Operand
                                       n: LONGINT): BOOLEAN;
TYPE UnsignedProc = PROCEDURE (op: Operations.Operand): BOOLEAN;
TYPE IntToOpProc = PROCEDURE (int32: Types.Int32; VAR op: Operations.Operand);
TYPE OpToIntProc = PROCEDURE (op: Operations.Operand; VAR int32: Types.Int32);
TYPE Log2Proc = PROCEDURE (op: Operations.Operand): LONGINT;
TYPE OddProc = PROCEDURE (op: Operations.Operand): BOOLEAN;
TYPE ShiftProc = PROCEDURE (op: Operations.Operand; 
                            n: INTEGER): Operations.Operand;
TYPE IntOperatorProc = PROCEDURE(op: Operation; 
                                 op1, op2, op3: Operations.Operand; 
                                 VAR result: Operations.Operand);
.sp 0.3
TYPE Interface = POINTER TO InterfaceRec;
TYPE InterfaceRec = 
   RECORD
      (Operations.InterfaceRec)
      isLargeEnoughFor: IsLargeEnoughForProc;
      unsigned: UnsignedProc;
      intToOp: IntToOpProc;
      opToInt: OpToIntProc;
      log2: Log2Proc;
      odd: OddProc;
      shift: ShiftProc;
      intOp: IntOperatorProc;
   END;
.sp 0.7
PROCEDURE Init(op: Operand; if: Interface; caps: CapabilitySet);
PROCEDURE Capabilities(op: Operand): CapabilitySet;
PROCEDURE IsLargeEnoughFor(op: Operations.Operand; n: LONGINT): BOOLEAN;
PROCEDURE Unsigned(op: Operations.Operand): BOOLEAN;
.sp 0.3
PROCEDURE IntToOp(int32: Types.Int32; VAR op: Operations.Operand);
PROCEDURE OpToInt(op: Operations.Operand; VAR int32: Types.Int32);
PROCEDURE Log2(op: Operations.Operand): LONGINT;
PROCEDURE Odd(op: Operations.Operand): BOOLEAN;
.sp 0.3
PROCEDURE Shift(op1: Operations.Operand; n: INTEGER): Operations.Operand;
PROCEDURE Shift2(VAR op1: Operations.Operand; n: INTEGER);
PROCEDURE Shift3(VAR result: Operations.Operand; 
                 op1: Operations.Operand; n: INTEGER);
.sp 0.3
PROCEDURE Inc(op1: Operations.Operand): Operations.Operand;
PROCEDURE Inc2(VAR op1: Operations.Operand);
PROCEDURE Inc3(VAR result: Operations.Operand; op1: Operations.Operand);
.sp 0.3
PROCEDURE Dec(op1: Operations.Operand): Operations.Operand;
PROCEDURE Dec2(VAR op1: Operations.Operand);
PROCEDURE Dec3(VAR result: Operations.Operand; op1: Operations.Operand);
.sp 0.3
PROCEDURE Mod(op1, op2: Operations.Operand) : Operations.Operand;
PROCEDURE Mod2(VAR op1: Operations.Operand; op2: Operations.Operand);
PROCEDURE Mod3(VAR result: Operations.Operand; op1, op2: Operations.Operand);
.sp 0.3
PROCEDURE Pow(op1, op2: Operations.Operand): Operations.Operand;
PROCEDURE Pow2(VAR op1: Operations.Operand; op2: Operations.Operand);
PROCEDURE Pow3(VAR result: Operations.Operand; op1, op2: Operations.Operand);
.sp 0.3
PROCEDURE MMul(op1, op2, op3: Operations.Operand): Operations.Operand;
PROCEDURE MMul2(VAR op1: Operations.Operand; op2, op3: Operations.Operand);
PROCEDURE MMul3(VAR result: Operations.Operand; 
                op1, op2, op3: Operations.Operand);
.sp 0.3
PROCEDURE MPow(op1, op2, op3: Operations.Operand): Operations.Operand;
PROCEDURE MPow2(VAR op1: Operations.Operand; op2, op3: Operations.Operand);
PROCEDURE MPow3(VAR result: Operations.Operand; 
                op1, op2, op3: Operations.Operand);
.Pe
.SH DESCRIPTION
.I IntOperations
is an extension of Operations(3) and
provides a generic interface for arithmetic operators covering additional
operations for integers: logical shift, 
increment, decrement, modulo and power. Residue of multiplication and power, the
conversion from \fIInt32\fP to \fIOperand\fP, the conversion from \fIOperand\fP
to \fIInt32\fP, and the test whether an operand is odd or not are also 
supported.
.LP
The interface describes the set of available operations and contains the 
necessary procedures. The type \fIInterface\fP is an extension of 
\fIOperations\fP.\fIInterface\fP and therefore an explicit call of 
\fIOperations\fP.\fIInit\fP is not necessary because it is automatically called
by \fIInit\fP. The interface procedures should meet the following
specifications:
.LP
.Is
.If isLargeEnoughFor "\fIop\fP: \fIOperations\fP.\fIOperand\fP; \fIn\fP: \fBLONGINT\fP" " \fBBOOLEAN\fP"
return \fBTRUE\fP if the type of \fIop\fP is large enough for 2^\fIn\fP - 1
and return \fBFALSE\fP if not.
.If unsigned "\fIop\fP: \fIOperations\fP.\fIOperand\fP" " \fBBOOLEAN\fP"
return \fBTRUE\fP if the operand type of \fIop\fP is unsigned, else return 
\fBFALSE\fP.
.If intToOp "\fIint32\fP: \fITypes\fP.\fIInt32\fP; \fBVAR\fP \fIop\fP: \fIOperations\fP.\fIOperand\fP
convert given \fIint32\fP into a value of type \fIOperations\fP.\fIOperand\fP
and store it in already initialized \fIop\fP.
.If opToInt "\fIop\fP: \fIOperations\fP.\fIOperand\fP; \fBVAR\fP \fIint32\fP: \fITypes\fP.\fIInt32\fP
convert given \fIop\fP into \fIint32\fP if possible and use modulo operation
if \fIop\fP does not fit into a 32 bit value.
.If log2 "\fIop\fP: \fIOperations\fP.\fIOperand\fP" "\fBLONGINT\fP"
compute log2(\fIop\fP) and return the rounded up result.
.If odd "\fIop\fP: \fIOperations\fP.\fIOperand\fP" "\fBBOOLEAN\fP"
check whether \fIop\fP is odd or not and return \fBTRUE\fP if \fIop\fP is odd
and \fBFALSE\fP if not. This procedure needs only to be provided if \fIodd\fP
is given in the set of capabilities.
.If shift "\fIop\fP: \fIOperations.Operand\fP; \fIn\fP: \fBINTEGER\fP
logically shift \fIop n\fP bits to the left and return the shifted value, if 
\fIn\fP is positive. Else shift \fIop\fP -\fIn\fP bits to the right.
.If intOp "\fIop\fP: \fIOperation\fP; \fIop1\fP, \fIop2\fP, \fIop3\fP: \fIOperations.Operand\fP; \fBVAR\fP \fIresult\fP: \fIOperations.Operand\fP
execute the given operator for the given operands \fIop1\fP, \fIop2\fP and
\fIop3\fP and store the result in the already initialized \fIresult\fP.
\fIop2\fP and \fIop3\fP are \fBNIL\fP if unused. So far as \fIop2\fP and 
\fIop3\fP are used, the operands are already checked for type equality and 
\fIresult\fP is of the appropriate type. This procedure is not called with 
\fIop\fP values outside the capability set of the associated interface. 
\fIresult\fP is guaranteed to be not an alias of \fIop1\fP, \fIop2\fP or 
\fIop3\fP.
.Ef
.LP
.EQ
delim $$
.EN
\fIInit\fP is to be called by modules implementing an arithmetic data
type to connect the interface \fIif\fP to the operand \fIop\fP. 
\fICapabilities\fP returns the set of capabilities of \fIop\fP.
\fIIsLargeEnoughFor\fP returns \fBTRUE\fP if the type specified by \fIop\fP is
large enough for $2 sup n - 1$, else returns \fBFALSE\fP. \fIUnsigned\fP returns
\fBTRUE\fP if the type of \fIop\fP is unsigned and returns \fBFALSE\fP if the 
type is signed.
.LP
\fIIntToOp\fP converts a given integer \fIint32\fP into the type 
\fIOperations\fP.\fIOperand\fP and stores the result into the already 
initialized variable \fIop\fP. \fIOpToInt\fP converts \fIop\fP into an integer
of type \fITypes\fP.\fIInt32\fP and stores the result in the variable 
\fIint32\fP. If \fIop\fP does not fit into a 32 bit variable, then the modulo
operation is used for adaption. 
.LP
\fILog2\fP returns the rounded up result of log2(\fIop\fP). \fIOdd\fP checks a 
given operand \fIop\fP if it is odd and returns \fBTRUE\fP if odd, else the 
procedure returns \fBFALSE\fP.
.LP
Arithmetic operations are implemented in three forms:
.IP "\fIXXX\fP(\fIop1\fP: \fIOperations.Operand\fP; (* ... *)) : \fIOperations.Operand\fP"
Executes the named operations with the required parameters and returns the
newly created operand.
.IP "\fIXXX2\fP(\fBVAR\fP \fIop1\fP: \fIOperations.Operand\fP; (* ... *))"
Operates on \fIop1\fP and, depending on the named operation, on further operands
and stores the result into \fIop1\fP.
.IP "\fIXXX3\fP(\fBVAR\fP \fIresult\fP: \fIOperations.Operand\fP; \fIop1\fP: \fIOperations.Operand\fP; (* ... *))"
Operates on \fIop1\fP and, depending on the named operation, on further operands
and stores the result into \fIresult\fP.
.LP
If more than one parameter is used in \fIXXX\fP resp. in \fIXXX2\fP or in 
\fIXXX3\fP then type equality is necessary.
These procedures are provided for \fIXXX\fP equal to \fIInc\fP, \fIDec\fP, 
\fIMod\fP, \fIPow\fP, \fIMMul\fP and \fIMPow\fP. \fIXXX2\fP and \fIXXX3\fP allow
\fIresult\fP to be equal to \fIop1\fP, \fIop2\fP or \fIop3\fP.
.LP
\fIShift\fP works like \fBSYSTEM.LSH\fP and logically shifts \fIop1\fP \fIn\fP 
bits to the left, provided that \fIn\fP is positive. Else \fIop1\fP is shifted 
\fIn\fP bits to the right. \fIInc\fP and \fIDec\fP increment resp. decrement 
\fIop1\fP by 1. \fIMod\fP calculates \fIop1\fP \fBMOD\fP \fIop2\fP and 
\fIPow\fP returns \fIop1\fP to the power of \fIop2\fP. \fIMMul\fP multiplies
\fIop1\fP and \fIop2\fP and assures that the result is less than \fIop3\fP. 
Like \fIMMul\fP, \fIMPow\fP computes the residue of power.
.SH DIAGNOSTICS
\fIIntOperations\fP checks for some errors which may lead to failed
assertions:
.IP \(bu
In \fIIntToOp\fP the operand must be already initialized.
.IP \(bu
The interfaces of the given operands must match.
.IP \(bu
Operations which are not supported for the given operand must not be called.
.SH AUTHOR
Frank B.J. Fischer
.SH "SEE ALSO"
.Tb Operations(3)
.Tp Operations(3)
generic interface for arithmetic operations
.Tp Card1024s(3) 
implementation of \fIIntOperations\fP for 1024 bit cardinal
.Te
.\" ---------------------------------------------------------------------------
.\" $Id: IntOperations.3,v 1.1 1997/04/03 15:29:29 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: IntOperations.3,v $
.\" Revision 1.1  1997/04/03  15:29:29  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
