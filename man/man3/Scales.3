'\" te
.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-1995 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH Scales 3 "Last change: 16 September 1996" "Release 0.5" "Ulm's Oberon System"
.SH NAME
Scales \- general interface for systems of units for measuring
.SH SYNOPSIS
.Pg
TYPE Family = POINTER TO FamilyRec;
TYPE FamilyRec = RECORD (Disciplines.ObjectRec) END;
TYPE Scale = POINTER TO ScaleRec;
TYPE ScaleRec = RECORD (Disciplines.ObjectRec) END;
.sp 0.3
CONST unitNameLength = 32;
TYPE Unit = POINTER TO UnitRec;
TYPE UnitRec = RECORD (Disciplines.ObjectRec) END;
TYPE UnitName = ARRAY unitNameLength OF CHAR;
.sp 0.3
CONST absolute = 1; relative = 2; (* measure types *)
TYPE Measure = POINTER TO MeasureRec;
TYPE MeasureRec = RECORD (Operations.OperandRec) END;
TYPE Value = LONGINT;
.sp 0.7
TYPE CreateProc = PROCEDURE (scale: Scale; VAR measure: Measure; abs: BOOLEAN);
TYPE GetValueProc = PROCEDURE (measure: Measure; unit: Unit; VAR value: Value);
TYPE SetValueProc = PROCEDURE (measure: Measure; unit: Unit; value: Value);
TYPE AssignProc = PROCEDURE (target: Measure; source: Measure);
CONST add = Operations.add; sub = Operations.sub;
TYPE Operation = SHORTINT; (* add or sub *)
TYPE OperatorProc = PROCEDURE (op: Operation; op1, op2, result: Measure);
TYPE CompareProc = PROCEDURE (op1, op2: Measure) : INTEGER;
TYPE ConvertProc = PROCEDURE (from, to: Measure);
TYPE Interface = POINTER TO InterfaceRec;
TYPE InterfaceRec =
   RECORD
      (Objects.ObjectRec)
      create: CreateProc;
      getvalue: GetValueProc;
      setvalue: SetValueProc;
      assign: AssignProc;
      op: OperatorProc;
      compare: CompareProc;
      scaleToReference: ConvertProc;
      referenceToScale: ConvertProc;
   END;
.sp 0.7
VAR invalidOperation: Events.EventType;
VAR incompatibleScales: Events.EventType;
VAR badCombination: Events.EventType;
.sp 0.7
PROCEDURE InitFamily(family: Family; reference: Scale);
PROCEDURE Init(scale: Scale; family: Family; if: Interface);
PROCEDURE InitUnit(scale: Scale; unit: Unit; name: UnitName);
PROCEDURE CreateMeasure(scale: Scale; VAR measure: Measure; type: SHORTINT);
PROCEDURE CreateAbsMeasure(scale: Scale; VAR measure: Measure);
PROCEDURE CreateRelMeasure(scale: Scale; VAR measure: Measure);
PROCEDURE ConvertMeasure(scale: Scale; VAR measure: Measure);
.sp 0.7
PROCEDURE GetReference(family: Family; VAR reference: Scale);
PROCEDURE GetFamily(scale: Scale; VAR family: Family);
PROCEDURE GetScaleOfUnit(unit: Unit; VAR scale: Scale);
PROCEDURE GetScale(measure: Measure; VAR scale: Scale);
.sp 0.7
PROCEDURE TraverseUnits(scale: Scale);
PROCEDURE NextUnit(scale: Scale; VAR unit: Unit) : BOOLEAN;
PROCEDURE GetName(unit: Unit; VAR name: UnitName);
PROCEDURE GetValue(measure: Measure; unit: Unit; VAR value: Value);
PROCEDURE SetValue(measure: Measure; unit: Unit; value: Value);
.sp 0.7
PROCEDURE IsAbsolute(measure: Measure) : BOOLEAN;
PROCEDURE IsRelative(measure: Measure) : BOOLEAN;
PROCEDURE MeasureType(measure: Measure) : SHORTINT;
.Pe
.SH DESCRIPTION
.I Scales
provides a general interface for measuring systems which is
based on \fIOperations\fP.
.LP
A scale is defined by a set of units for measuring,
e.g. a scale for dates could consist of the units day, month and year.
A measure is defined by a set of values for each of the units.
Values are of type \fIValue\fP.
.LP
\fIScales\fP distinguishes between absolute and relative measures.
An absolute measure describes a point within the set of measures
while a relative measure describes the difference between
two points of the set of measures.
.EQ
delim $$
.EN
Let $ m sub 1 $ and $ m sub 2 $ be absolute measures for
the points $ p sub 1 $ and $ p sub 2 $.
Then we can define the differences (relative measures)
between $ m sub 1 $ and $ m sub 2 $:
.EQ
delim off
.EN
.sp 0.3
.in +5
.EQ
d sub 1 ~:=~ m sub 1 ~-~ m sub 2
.EN
.sp 0.3
.EQ
d sub 2 ~:=~ m sub 2 ~-~ m sub 1
.EN
.in -5
.sp 0.3
which are expected to hold following conditions:
.sp 0.3
.in +5
.EQ
m sub 1 ~-~ d sub 1 ~=~ m sub 2
.EN
.sp 0.3
.EQ
m sub 1 ~+~ d sub 2 ~=~ m sub 2
.EN
.in -5
.LP
In many cases there exist alternative unit systems for similar scales.
A family of scales is defined by a reference scale
and a set of additional scales where every scaling system
knows how to convert its measures to the reference system and back.
.LP
.I Init
initializes a newly created \fIscale\fP and associates it
with the given \fIfamily\fP and uses \fIif\fP as interface.
\fIfamily\fP may be \fBNIL\fP
if \fIscale\fP does not belong to a family or
if \fIscale\fP should become a reference scale.
.LP
The interface procedures are expected to meet the specifications following:
.Is
.If create "\fIscale\fP: \fIScale\fP; \fBVAR\fP \fImeasure\fP: \fIMeasure\fP; \fIabs\fP: \fBBOOLEAN\fP"
create a new measure of the given scale and
initialize it with an implementation dependant zero value.
The measure type (absolute or relative) is determined by \fIabs\fP.
\fImeasure\fP needs not to be passed to \fIOperations.Init\fP.
Note that \fIMeasure\fP is an extension of \fIPersistentObjects.Object\fP.
Thus, \fIPersistentObjects.Init\fP has to be called immediately after
creation.
.If getvalue "\fImeasure\fP: \fIMeasure\fP; \fIunit\fP: \fIUnit\fP; \fBVAR\fP \fIvalue\fP: \fIValue\fP"
store the value of the given unit of the given measure into \fIvalue\fP.
.If setvalue "\fImeasure\fP: \fIMeasure\fP; \fIunit\fP: \fIUnit\fP; \fIvalue\fP: \fIValue\fP"
set the value of the given unit of the given measure to \fIvalue\fP.
.If assign "\fItarget\fP: \fIMeasure\fP; \fIsource\fP: \fIMeasure\fP"
copy the value of \fIsource\fP to \fItarget\fP;
\fItarget\fP is of the appropiate type and already initialized.
.If op "\fIop\fP: \fIOperation\fP; \fIop1\fP, \fIop2\fP, \fIresult\fP: \fIMeasure\fP"
execute the given operator (\fIadd\fP or \fIsub\fP)
for the given operands \fIop1\fP and \fIop2\fP
and store the result in the already initialized \fIresult\fP.
\fIop1\fP, \fIop2\fP and \fIresult\fP
are guaranteed to belong to the same scale.
\fIresult\fP is guaranteed to be not equal to \fIop1\fP or \fIop2\fP.
.If compare "\fIop1\fP, \fIop2\fP: \fIMeasure\fP" "\fBINTEGER\fP"
compare the given operands and return an integer value
less than zero if \fIop1\fP is less than \fIop2\fP,
or equal to zero if \fIop1\fP equals \fIop2\fP,
or greater than zero if \fIop1\fP is greater than \fIop2\fP.
.If scaleToReference "\fIfrom\fP, \fIto\fP: \fIMeasure\fP"
convert the given measure \fIfrom\fP to the reference scale
and return it in \fIto\fP (which is already created and initialized).
.If referenceToScale "\fIfrom\fP, \fIto\fP: \fIMeasure\fP"
convert the given measure of the reference scale to the own scale
and return it in \fIto\fP (which is already created and initialized).
.Ef
The conversion routines are only to be provided
if the scaling system belongs to a family.
.LP
\fIInitFamily\fP initializes a family and takes \fIreference\fP
as reference scale.
\fIreference\fP must not belong to another family.
.LP
.I InitUnit
adds a unit to the scaling system \fIscale\fP.
\fIname\fP should be a short descriptive name of the unit,
e.g. "day", "month" or "year" for dates.
.LP
.I CreateAbsMeasure
creates and initializes \fImeasure\fP to the origin of the
given scaling system.
.I CreateRelMeasure
creates and initializes \fImeasure\fP to zero.
.I CreateMeasure
creates and initializes \fImeasure\fP for the given
type (either \fIabsolute\fP or \fIrelative\fP).
.I ConvertMeasure
converts \fImeasure\fP to the given scale which must
belong to the same family as the original scale of \fImeasure\fP.
.LP
.I GetReference
returns the reference scale of the given family.
.I GetFamily
returns the family of the given scale which may be \fBNIL\fP.
.I GetScaleOfUnit
or
.I GetScale
return the scale of the given unit or measure respectively.
.LP
.I TraverseUnits
starts a traverse through the set of units of a scale.
.I NextUnit
returns \fBTRUE\fP on success and
stores the next unit of the given scale into \fIunit\fP.
\fBFALSE\fP is returned at the end of the traverse.
.LP
.I GetName
returns the name of the given unit.
.LP
.I GetValue
and
.I SetValue
allow to get and set values of measures for a given unit.
.LP
.I IsAbsolute
and
.I IsRelative
allow to distinguish between absolute and relative measures.
.I MeasureType
returns the measure type (either \fIabsolute\fP or \fIrelative\fP).
.LP
Additionally, the addition, subtraction, comparison and assignment
operations of \fIOperations\fP may be used.
The resulting measure type (absolute or relative) of addition and
subtraction operations is shown by following tables:
.sp 0.3
.TS
tab(:);
l|l|l l l|l|l.
\fIAdd\fP:\fIabsolute\fP:\fIrelative\fP::\fISub\fP:\fIabsolute\fP:\fIrelative\fP
_:_:_::_:_:_
\fIabsolute\fP:\fBinvalid\fP:\fIabsolute\fP::\fIabsolute\fP:\fIrelative\fP:\fIabsolute\fP
_:_:_::_:_:_
\fIrelative\fP:\fIabsolute\fP:\fIrelative\fP::\fIrelative\fP:\fBinvalid\fP:\fIrelative\fP
.TE
.SH DIAGNOSTICS
Some of the possible errors lead to events which are passed to
\fIAssertions.Raise\fP:
.Tb incompatibleScales
.Tp invalidOperation
indicates a try to execute an invalid operation for the
given measure types,
e.g. addition of two absolute values.
.Tp incompatibleScales
the scales of the operands do not belong to the same family.
.Tp badCombination
this event is raised by \fISetValue\fP or \fIGetValue\fP if
the given measure and unit do not belong to the same scaling system.
.Te
.SH "SEE ALSO"
.Tb PersistentObjects(3)
.Tp Assertions(3)
error handling
.Tp Operations(3)
addition, subtraction, comparison and assignment of measures
.Tp PersistentObjects(3)
interface for persistent objects
.Te
.\" ---------------------------------------------------------------------------
.\" $Id: Scales.3,v 1.8 1996/09/16 16:56:59 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: Scales.3,v $
.\" Revision 1.8  1996/09/16  16:56:59  borchert
.\" - PersistentObjects.Connect --> PersistentObjects.Init
.\" - minor typo fixed
.\" - formatting changed
.\"
.\" Revision 1.7  1994/02/12  17:04:03  borchert
.\" Scales.Measure is now an extension of PersistentObjects.Object
.\" InitXXX's renamed to CreateXXX's where an object gets created
.\"
.\" Revision 1.6  1993/09/25  13:23:26  borchert
.\" conditions about the relationship between absolute and relative
.\" measures fixed
.\"
.\" Revision 1.5  1992/01/13  08:31:56  borchert
.\" MeasureType added
.\"
.\" Revision 1.4  1992/01/13  08:09:15  borchert
.\" measure types and InitMeasure added
.\"
.\" Revision 1.3  1992/01/04  09:49:34  borchert
.\" AssignProc changed
.\"
.\" Revision 1.2  1992/01/02  10:57:34  borchert
.\" typo errors fixed
.\" parameter scale removed from all interface procedures except init
.\" better definition of absolute and relative measures
.\"
.\" Revision 1.1  1991/12/30  12:46:53  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
