.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-1996 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH StandardContainers 3 "Last change: 9 February 2005" "Release 0.5" "Ulm's Oberon System"
.SH NAME
StandardContainers \- standard implementation of \fIContainers(3)\fP
.SH SYNOPSIS
.Pg
CONST usecurrent = 0; usestripped = 1; usefree = 2; useothercurrent = 3;
CONST useotherstripped = 4; useotherfree = 5; usenew = 6; usedefault = 7;
TYPE AllocStrat = SHORTINT; (* usecurrent..usedefault *)
.sp 0.7
CONST usestrippedslot = 0; usefreeslot = 1;
CONST usenewslot  = 2; usedefaultslot = 3;
TYPE SlotStrat = SHORTINT; (* usestrippedslot..usedefaultslot *)
.sp 0.7
CONST unsupportedStream = 0;
CONST invalidContainer = 1;
CONST containerInAutoMode = 2;
CONST invalidTransaction = 3;
CONST fatalIOError = 4;
CONST transStreamOpFailed = 5;
CONST persFailure = 6;
CONST objectTooLarge = 7;
CONST outOfSpace = 8;
CONST tooManyObjects = 9;
CONST objectIsNIL = 10;
CONST noSuchIdent = 11;
CONST noAnchorDefined = 12;
CONST errors = 13;
TYPE ErrorCode = SHORTINT;
.sp 0.3
TYPE ErrorEvent = POINTER TO ErrorEventRec;
TYPE ErrorEventRec =
   RECORD
      (Events.EventRec);
      errcode: ErrorCode;
   END;
.sp 0.3
VAR error: Events.EventType;
VAR errormsg: ARRAY errors OF Events.Message;
.sp 0.7
PROCEDURE Open(VAR container: Containers.Container;
               data: Streams.Stream;
               auto: BOOLEAN;
               errors: RelatedEvents.Object) : BOOLEAN;
.sp 0.7
PROCEDURE SetTries(cont: Containers.Container; tries: SHORTINT);
PROCEDURE SetAllocStrat(cont: Containers.Container;
                        insertpos, mode: AllocStrat);
PROCEDURE SetSlotStrat(cont: Containers.Container;
                       insertpos, mode: SlotStrat);
.Pe
.SH DESCRIPTION
.I StandardContainers
offers a standard implementation of \fIContainers(3)\fP
which uses transaction streams that support \fIObjectTransactions(3)\fP
as persistent storage.
.PP
.I Open
opens or creates (if \fIdata\fP has zero length) a container
on top of \fIdata\fP which serves as persistent storage.
The underlying stream needs to be supported by
\fIObjectTransactions(3)\fP and must not have been attached to
a transaction yet.
Note that the termination of the underlying stream
will be propagated to the container (see \fIResources(3)\fP).
In auto mode, there is only one transaction running from
the beginning up to the invocation of \fIContainers.Close\fP.
Alternatively, the container supports \fIObjectTransactions(3)\fP
and all operations of \fITransactions(3)\fP may be applied.
All container operations of \fIContainers(3)\fP are permitted,
provided the transaction parameter matches the transaction
\fIcontainer\fP is attached to (\fBNIL\fP is to be given in auto mode).
.PP
.I StandardContainers
allows some tuning of the allocation strategies.
Allocation is done for new objects (tunable by \fISetAllocStrat\fP)
and for new entries of the index table (tunable by \fISetSlotStrat\fP).
Each of these strategies consists of a small vector
(indexed from 0 to \fIusedefault\fP, and from 0 to \fIusedefaultslot\fP,
respectively) with values which select one of the possible
allocation variants.
The last entry of these vectors is always \fIusedefault\fP
(or \fIusedefaultslot\fP, respectively) which works as a wildcard
of all possible variants.
The other entries of the vectors are initialized to their associated
indices.
By calling \fISetAllocStrat\fP or \fISetSlotStrat\fP, it is
possible to insert a strategy into the vector at the given
position, i.e. the former strategy at this index and all following
will be shifted towards the end of the vector with the last
but one strategy entry being lost.
On allocation, the associated variants will be considered exactly
in the order as found in the associated vector.
Note that neither \fIusedefault\fP nor \fIusedefaultslot\fP
must be inserted because they will fire anyway as last strategy.
.PP
.I SetTries
sets a tuning parameter which controls the number of free lists
which are considered when allocating an object.
The larger the value of \fItries\fP, the more
\fIStandardContainers\fP is willing to split larger free areas
for small objects instead of allocating new areas.
The default value of this parameter is 3.
.SH DIAGNOSTICS
All error events which are raised in the context of a
container will be forwarded to it (or to \fIerrors\fP
at opening time).
This includes the underlying data stream, an internal in-memory
stream, the transaction (of \fIObjectTransactions(3)\fP) on
the data stream, and the transaction on the container itself.
All failures which are seen by \fIStandardContainers\fP
will result in an error event which is related to the container:
.Tb containerInAutoMode
.Tp unsupportedStream
The stream which was passed to \fIOpen\fP does not
support \fIObjectTransactions(3)\fP.
\fITransStreams(3)\fP, for example, offers streams which
provide the necessary support.
.Tp invalidContainer
The container was non-empty and found to be not a valid
container (at least of the same platform).
.Tp containerInAutoMode
Transaction operations of \fITransactions(3)\fP are
not valid if the container is in auto mode.
.Tp invalidTransaction
A transaction parameter was passed to one of the \fIContainer(3)\fP
operations where the container is not attached to.
If the container is in auto mode, any transaction not equal
to \fBNIL\fP will be considered as invalid.
.Tp fatalIOError
An operation on the underlying stream failed.
In this case it is best to abort the transaction.
.Tp transStreamOpFailed
A transaction operation on the underlying stream failed.
Note that transaction streams of \fITransStreams(3)\fP must
not be opened in auto mode to be usable for \fIStandardContainers\fP.
.Tp persFailure
Either \fIPersistentObjects.Write\fP or \fIPersistentObjects.Read\fP
failed \(em this may be due to a failure of one of the associated
interface procedures.
On reading, problems may occur if one of the referenced modules
cannot be loaded (see \fILoader(3)\fP).
.Tp objectTooLarge
The given object is architecturally to large to fit into
a container of \fIStandardContainers(3)\fP (independent on
how much space is left).
.Tp outOfSpace
There is no virtual space left for the given object.
Note that this is not a problem on your local disk
but one of the virtual address space.
If your local disk fills up, underlying stream operations
will fail on committing and result in an abortion of the transaction.
.Tp tooManyObjects
There are no entries left in the index table,
i.e. the container has already the maximal number of objects
possible.
.Tp objectIsNIL
Objects passed to \fIContainers.Insert\fP or \fIContainers.Replace\fP
must not be \fBNIL\fP.
.Tp noSuchIdent
An invalid ident was given to \fIContainers.Delete\fP,
\fIContainers.Obtain\fP, \fIContainers.Replace\fP,
\fIContainers.Find\fP, or \fIContainers.SetAnchor\fP.
.Tp noAnchorDefined
\fIContainers.GetAnchor\fP was called but no anchor
was previously defined, or the anchor became invalid due to
a delete operation.
.Te
.PP
.I StandardContainers
has a large number of assertions.
Most of them check the internal consistency but some
are used to check parameters:
.IP \(bu
.I SetAllocStrat
asserts that \fIinsertpos\fP and \fImode\fP have legal
values. Note that \fImode\fP must not be \fIusedefault\fP.
.IP \(bu
Likewise,
.I SetSlotStrat
checks that \fIinsertpos\fP and \fImode\fP have
valid values. Again, \fImode\fP must not equal
the default strategy \fIusedefaultslot\fP.
.SH EXAMPLE
Following procedure shows how to open a container of
\fIStandardContainers(3)\fP that bases on \fITransStreams(3)\fP
and \fIUnixFiles(3)\fP:
.Pg
PROCEDURE OpenContainer(containerFile: ARRAY OF CHAR;
                        auto: BOOLEAN;
                        VAR trans: Transactions.Transaction;
                        VAR container: Containers.Container;
                        errors: RelatedEvents.Object) : BOOLEAN;
   (* open a standard container which is represented
      by the UNIX file with the name ``containerFile'';
      in auto mode, ``trans'' will be set to NIL, otherwise
      an associated transaction will be created;
      all errors at opening time and in future
      will be related to ``errors''
   *)
   VAR
      file, ts: Streams.Stream;
BEGIN
   IF ~UnixFiles.Open(file, containerFile,
            UnixFiles.rdwr + UnixFiles.condcreate, Streams.nobuf,
            errors) OR
         ~TransStreams.Open(ts, file, TransStreams.standard, errors) OR
         ~StandardContainers.Open(container, ts, auto, errors) THEN
      RETURN FALSE
   END;
   RelatedEvents.Forward(container, errors);
   IF auto THEN
      trans := NIL;
   ELSE
      IF ~ObjectTransactions.Create(trans, container, NIL, errors) THEN
         RETURN FALSE
      END;
      RelatedEvents.Forward(trans, errors);
   END;
   RETURN TRUE
END OpenContainer;
.Pe
It is later sufficient to close the container only.
This will cause the transaction (if any) to be released and
all underlying streams to be closed (because there are
no other references on \fIfile\fP and \fIts\fP).
This works because there is an implicit chain of dependencies
of \fIResources(3)\fP starting from \fIfile\fP and ending
at \fItrans\fP.
.SH "SEE ALSO"
.Tb ObjectTransactions(3)
.Tp Containers(3)
general abstraction of object containers
.Tp ObjectTransactions(3)
transactions with one object only
(supported by \fIStandardContainers(3)\fP)
.Tp TransStreams(3)
stream implementation which supports \fIObjectTransactions(3)\fP
.Te
.SH AUTHOR
The original implementation is due to Werner Stanglow,
the revisions and this manual page have been contributed
by Andreas Borchert.
.SH BUGS
Note that the format of the container is not portable across platforms.
It depends on byte ordering and the page size of the memory system.
Cross-platform access is still possible, though, by setting up
distributed systems (\fIRemoteObjects(3)\fP for \fIContainers(3)\fP
is supported by \fIRemoteContainers(3)\fP).
In this way, a container may be accessed by a process on the
associated platform, converted implicitely by transferring it
over the network, and dumped into a new container for a different platform.
.\" ---------------------------------------------------------------------------
.\" $Id: StandardContainers.3,v 1.4 2005/02/09 19:21:53 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: StandardContainers.3,v $
.\" Revision 1.4  2005/02/09 19:21:53  borchert
.\" table fixed
.\"
.\" Revision 1.3  2002/02/15 05:45:09  borchert
.\" typos fixed
.\"
.\" Revision 1.2  1996/11/28 10:51:16  borchert
.\" example added
.\"
.\" Revision 1.1  1996/11/26  19:56:56  borchert
.\" Initial revision
.\"
.\" ---------------------------------------------------------------------------
