.\" ---------------------------------------------------------------------------
.\" Ulm's Oberon System Documentation
.\" Copyright (C) 1989-1995 by University of Ulm, SAI, D-89069 Ulm, Germany
.\" ---------------------------------------------------------------------------
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided also
.\" that the sections entitled "GNU General Public License" and "Protect
.\" Your Freedom--Fight `Look And Feel'" are included exactly as in the
.\" original, and provided that the entire resulting derived work is
.\" distributed under the terms of a permission notice identical to this
.\" one.
.\" 
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that the sections entitled "GNU General Public
.\" License" and "Protect Your Freedom--Fight `Look And Feel'", and this
.\" permission notice, may be included in translations approved by the Free
.\" Software Foundation instead of in the original English.
.\" ---------------------------------------------------------------------------
.de Pg
.nf
.ie t \{\
.	sp 0.3v
.	ps 9
.	ft CW
.\}
.el .sp 1v
..
.de Pe
.ie t \{\
.	ps
.	ft P
.	sp 0.3v
.\}
.el .sp 1v
.fi
..
'\"----------------------------------------------------------------------------
.de Tb
.br
.nr Tw \w'\\$1MMM'
.in +\\n(Twu
..
.de Te
.in -\\n(Twu
..
.de Tp
.br
.ne 2v
.in -\\n(Twu
\fI\\$1\fP
.br
.in +\\n(Twu
.sp -1
..
'\"----------------------------------------------------------------------------
'\" Is [prefix]
'\" Ic capability
'\" If procname params [rtype]
'\" Ef
'\"----------------------------------------------------------------------------
.de Is
.br
.ie \\n(.$=1 .ds iS \\$1
.el .ds iS "
.nr I1 5
.nr I2 5
.in +\\n(I1
..
.de Ic
.sp .3
.in -\\n(I1
.nr I1 5
.nr I2 2
.in +\\n(I1
.ti -\\n(I1
If
\.I \\$1
\.B IN
\.IR caps :
.br
..
.de If
.ne 3v
.sp 0.3
.ti -\\n(I2
.ie \\n(.$=3 \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2) : \\$3;
.el \fI\\$1\fP: \fBPROCEDURE\fP(\\*(iS\\$2);
.br
..
.de Ef
.in -\\n(I1
.sp 0.3
..
'\"----------------------------------------------------------------------------
'\"	Strings - made in Ulm (tm 8/87)
'\"
'\"				troff or new nroff
'ds A \(:A
'ds O \(:O
'ds U \(:U
'ds a \(:a
'ds o \(:o
'ds u \(:u
'ds s \(ss
'\"
'\"     international character support
.ds ' \h'\w'e'u*4/10'\z\(aa\h'-\w'e'u*4/10'
.ds ` \h'\w'e'u*4/10'\z\(ga\h'-\w'e'u*4/10'
.ds : \v'-0.6m'\h'(1u-(\\n(.fu%2u))*0.13m+0.06m'\z.\h'0.2m'\z.\h'-((1u-(\\n(.fu%2u))*0.13m+0.26m)'\v'0.6m'
.ds ^ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z^\h'|\\n:u'
.ds ~ \\k:\h'-\\n(.fu+1u/2u*2u+\\n(.fu-1u*0.13m+0.06m'\z~\h'|\\n:u'
.ds C \\k:\\h'+\\w'e'u/4u'\\v'-0.6m'\\s6v\\s0\\v'0.6m'\\h'|\\n:u'
.ds v \\k:\(ah\\h'|\\n:u'
.ds , \\k:\\h'\\w'c'u*0.4u'\\z,\\h'|\\n:u'
'\"----------------------------------------------------------------------------
.ie t .ds St "\v'.3m'\s+2*\s-2\v'-.3m'
.el .ds St *
.de cC
.IP "\fB\\$1\fP"
..
'\"----------------------------------------------------------------------------
.de Op
.TP
.SM
.ie \\n(.$=2 .BI (+|\-)\\$1 " \\$2"
.el .B (+|\-)\\$1
..
.de Mo
.TP
.SM
.BI \\$1 " \\$2"
..
'\"----------------------------------------------------------------------------
.TH oc 1 "Last change: 4 January 1996" "Release 0.5" "Ulm's Oberon System"
.SH NAME
oc \- Oberon compiler
.SH SYNOPSIS
.B oc
[ option ] ... file ...
.SH DESCRIPTION
.I oc
is Ulm's Oberon compiler.
The accepted language is defined by the revised Oberon report from 1989
with following exceptions:
.IP (1)
Definition and implementation parts must be separate.
The current version of the Oberon compiler does not accept
export marks:
.Pg
$ identdef = ident .
.Pe
.IP (2)
The relaxed parameter compatibility rule for the formal type
\fBARRAY OF BYTE\fP applies for variable \fIand\fP value parameters.
.IP (3)
Variable parameters do not require type identity in case of pointer types.
.IP (4)
The syntax of the import list has been changed to:
.Pg
$ ImportList = IMPORT import { "," import } ";" .
$ import = identdef [":=" ident ] .
.Pe
.IP (5)
Comments may be nested.
.LP
(1), (2), and (3) conform to unrevised Oberon.
(4) and (5) conform to newer revisions.
.PP
The Oberon compiler accepts two kinds of sources:
definitions and modules.
The definition is an excerpt of the module and specifies
the items visible to all clients importing the module.
Definitions and modules are textually separated.
The suffix of the filename determines the kind of source:
`.od' for definitions and `.om' for modules.
.PP
The Oberon compiler accepts several types of arguments:
Arguments whose names end with `.om' are taken to be
Oberon modules; they are compiled, and
each object program is left in the file
whose name is the basename of the source with `.o' substituted
for `.om'.
Further a reference file with suffix `.r' is left. See
.IR odb(1)
for more information.
Names ending with `.od' are taken to be Oberon definitions
and compiled, producing a `.sy' file.
Symbol files and reference files may be archived in
the files `SYM' and `REF'.
If these archives exist
.I oc
tries to archive the corresponding output files.
.PP
In the same way,
arguments whose names end with `.s' are taken to be assembly source programs
and are assembled, producing a `.o' file.
.PP
The following options are interpreted by
.IR oc .
.TP 8
.SM
.B \-a
Suppress archiving of the reference and symbol files even if
`SYM' and `REF' exist.
.TP
.SM
.B \-c
Suppress the loading phase of the compilation.
A single object file can be named explicitly using the \fB-o\fP option.
.TP
.SM
.B \-C
Requests parameterless exported procedures of
the given modules to be accessible as commands.
See \fISysCommands(3)\fP for further reference.
.TP
.SM
.BI \-d destdir
Requests all output files to be put into the directory \fIdestdir\fP.
.TP
.SM
.BI \-i
Causes \fIoc\fP to ignore compilation errors of all sources
following this option.
The exit code of \fIoc\fP equals the number of
failed compilations.
.TP
.SM
.BI \-l libdir
Requests the \fIlibdir\fP to be included in front of the
search path for libraries.
\fIlibdir\fP must be either absolute (i.e. pathname beginning with "/")
or a subdirectory of one of the directories specified by \fBOBPATH\fP or
\fBOBLIB\fP (see below).
Note that despite to \fIcc(1)\fP and \fIld(1)\fP
this option must appear before the sources.
.TP
.SM
.B \-L
Arrange the compiler to produce a listing for each source file
in a corresponding `.l' file,
or in a `.ld' file if the source is a definition.
.TP
.SM
.BI \-o " output"
Name the final output file
.IR output .
The output file may be either an object file
(if the loading phase is suppressed and only one argument is given),
an archive with suffix `.a'
(this causes the loading phase to be suppressed implicitly),
or the designated output file of the loading phase.
In the last case the file `a.out' will be left undisturbed.
.TP
.SM
.BI \-O L
Set the default value of compiler option
.I L
(upper case letter) to \fBFALSE\fP.
Options not modified by the command line have an initial value of \fBTRUE\fP.
The options can also be set from within a Oberon source
using a comment as follows:
.Pg
.ti +8n
(* $R- $I+ $N= *)
.Pe
sets compiler option \fBR\fP to \fBFALSE\fP,
\fBI\fP to \fBTRUE\fP, and restores the previous value of \fBN\fP.
Whitespace is permitted and `$' precedes the option letters.
Following options are currently supported:
.RS 8
.TP 8
.B C
requests checks to be generated for conversions from \fBINTEGER\fP
to \fBSHORTINT\fP.
.TP 8
.B I
enables the yet undocumented revisions of Oberon: (4) and (5)
as described above.
.TP 8
.B M
this option causes the two least significant bits of the
type tag to be masked out on each access.
This may be useful for some garbage collecting algorithms
and requires this option to be applied for all modules.
.TP 8
.B O
requests pointer types to point to tagged data structures.
This options is to be switched off for pointer types
which are intended to point to areas which have not been created
by \fBNEW\fP.
These pointer types will not be traced on garbage collections.
\fBIS\fP operators or \fBWITH\fP statements are rejected by the compiler
for untagged pointers.
.TP 8
.B P
requests pointer types to be traced on garbage collections.
This option must be switched off in cases where pointers refer
to untagged locations.
Only types which contain pointers are affected by this option.
In case of exported types only the setting in the definition is
considered by the compiler.
.TP 8
.B R
enables parameter types to be given as required by revised Oberon.
.TP 8
.B S
if switched on, not only strings of length 1 are treated
as possible strings but also all other character constants,
e.g. 4X, \fBMAX\fP(\fBCHAR\fP), \fBCAP\fP("A"), \fBCHR\fP(4).
While the report doesn't encourage this interpretation,
the Z\*urich compilers treat all these character constants
as possible strings of the length 1.
.TP 8
.B T
causes range checks for array indices to be generated.
.RE
.TP 8
.SM
.B \-r
Suppress cleanup of archived files.
.TP 8
.SM
.B \-R
Suppress clean up of temporary files.
.TP 8
.SM
.B \-s
Causes the symbol table of the output file to be stripped of.
This implies that debuggers cannot be used.
The symbol table can also be removed by \fIstrip(1)\fP.
.TP
.SM
.B \-S
Compile the named Oberon modules, and leave the
assembler-language output on corresponding files suffixed `.s'.
.TP
.SM
.BI \-Tdir
Allocate the temporary files of the compiler in the directory
.IR dir .
.TP
.SM
.B \-u
Enables the Oberon compiler to patch symbol files on compilation
of the corresponding module.
This is required in case of record type extensions
(i.e. a record type of the definition is a public projection
of the corresponding record type of the module).
If \fB\-u\fP is not given the compiler compares the
the size needed with the size found in the symbol file
(determined either by the compilation of the definition or
by an earlier update).
If the size is not sufficient the compiler gives an error message:
"required type extension is prohibited; use \-u option".
.TP
.SM
.B \-U
Forces the Oberon compiler to patch symbol files if sizes
are different,
i.e. if the implementation of an record is smaller than the
(already patched) size in the symbol file then
\fB-u\fP wouldn't cause an update but \fB-U\fP.
.TP
.SM
.B \-v
Verbose flag.
.I oc
prints all executed commands to standard output.
.TP
.SM
.B \-V
Show but do not execute the commands constructed by the
compilation driver.
.PP
Other arguments
are Oberon object programs (suffix `.o'), typically produced by an earlier
.I oc
run,
or Oberon libraries (suffix `.a').
These programs, together with the results of any
compilations specified, are loaded (in the order
given) to produce an executable program with name
.B a.out.
.SH ENVIRONMENT
.I oc
looks for two environment parameters:
.B OBLIB
and
.B OBPATH.
If
.B OBLIB
is given
.I oc
calls the compiler passes in the directory
.B $OBLIB.
.B OBPATH
specifies a list of directories, separated with colons (like
.B PATH).
Each of these directories consists of a
.I SYM
archive of symbol files, a
.I REF
archive of reference files, and archives with suffix `.a'.
If the compiler looks for a symbol file or \fIld(1)\fP for
library modules this search path is used.
.SH FILES
.Tb "/home/obsrc/library/oberon"
.Tp file.od
Oberon definition
.Tp file.om
Oberon module
.Tp SYM
archive with symbol files
.Tp REF
archive with reference files
.Tp file.o
object file
.Tp file.sy
symbol file
.Tp file.r
reference file
.Tp file.l
listing of an Oberon module
.Tp file.ld
listing of an Oberon definition
.Tp a.out
loaded output
.Tp /tmp/oc.*
temporaries for
.I oc
.Tp /home/obsrc/library/oberon
compiler for
.I oc
.Tp /home/obsrc/library/ort0.o
runtime start-off
.Tp /home/obsrc/library/post.o
executed after initialization of all modules
.Tp /home/obsrc/library/libo.a
standard library
.Tp /home/obsrc/library/SYM
symbol files of the std library
.Tp /home/obsrc/library/REF
reference files of the std library
.Te
.SH "SEE ALSO"
Niklaus Wirth,
.I The Programming Language Oberon,
Software\(emPractice and Experience, 18, 7 (July 1988), 671-690
.br
Niklaus Wirth,
.I The Programming Language Oberon (revised Report),
Eidgen\*ossische Technische Hochschule Z\*urich,
Report 111, September 1989
.br
Andreas Borchert,
.I Report of Ulm's Oberon Compiler,
University of Ulm, SAI
.br
\fIld(1), odb(1), mmo(1), SysCommands(3)\fP
.SH DIAGNOSTICS
The diagnostics produced by the compiler itself are intended to be
self-explanatory.
Occasional messages may be produced by the assembler
or loader.
.PP
Error messages of the loader about undefined symbols of the form
\fIO_modulename_digits_digits\fP
result from key mismatches.
In this case it is recommended to recompile all sources in the
appropriate order.
.SH CAVEAT
The first 11 characters of the module name should be identical to the
file name.
This avoids silent truncation of suffixes when symbol files,
reference files, and objects get archived.
.SH BUGS
Not yet implemented:
.IP (1)
detection of erroneous constant floating point expressions
.IP (2)
\fBLONGREAL\fP floating point constants
.IP (3)
good error recovery on syntactic errors
.PP
The Oberon compiler does not support shared libraries.
.PP
\fIar(1)\fP allocates its temporary files either in \fI/tmp\fP
or in the current directory.
Thus \fB-T\fP \fIdir\fP causes \fIar(1)\fP only to change
the temporary files directory if \fIdir\fP equals ".".
.SH AUTHORS
Andreas Borchert and Martin Hasch, University of Ulm
.\" ---------------------------------------------------------------------------
.\" $Id: oc.1,v 1.13 1996/01/04 15:30:02 borchert Exp $
.\" ---------------------------------------------------------------------------
.\" $Log: oc.1,v $
.\" Revision 1.13  1996/01/04 15:30:02  borchert
.\" - Commands replaced by SysCommands
.\" - typos & layout fixed
.\"
.\" Revision 1.12  1994/02/15  16:36:54  borchert
.\" compiler options M and S added
.\"
.\" Revision 1.11  1993/06/28  12:10:56  borchert
.\" compile option -OO added
.\"
.\" Revision 1.10  1992/11/25  12:58:15  borchert
.\" P option added
.\"
.\" Revision 1.9  1992/07/31  16:05:53  borchert
.\" conversion checks added ($C option)
.\"
.\" Revision 1.8  1992/07/31  14:41:36  borchert
.\" new option for range checks: $T
.\"
.\" Revision 1.7  1992/04/22  10:34:11  borchert
.\" typo error fixed
.\"
.\" Revision 1.6  1991/06/21  15:25:07  borchert
.\" /home/obsrc/library dependency introduced
.\" name of compiler changed
.\"
.\" Revision 1.5  91/01/04  09:00:09  borchert
.\" note added for -l option
.\" 
.\" Revision 1.4  90/12/17  08:03:47  oberon
.\" some old stuff deleted or fixed
.\" 
.\" Revision 1.3  90/10/23  19:35:39  oberon
.\" list of changes in respect to revised oberon changed:
.\" no type identity required for VAR-parameters in case of pointer types
.\" 
.\" Revision 1.2  90/10/08  14:49:13  oberon
.\" oc shell script replaced by Oberon program
.\" 
.\" Revision 1.1  90/08/31  17:02:11  borchert
.\" Initial revision
.\" 
.\" ---------------------------------------------------------------------------
